// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package projet_dw.monprojet_dw_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: MONPROJET_DW Purpose: Projet de DataWarehouse<br>
 * Description: MODELISATION D’UN ENTREPOT DE DONNEES DES
 COMMANDES, VENTES, LIVRAISONS ET VERSEMENTS 
 POUR UNE ENTREPRISE COMMERCIALE <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class MONPROJET_DW implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "MONPROJET_DW";
	private final String projectName = "PROJET_DW";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MONPROJET_DW.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MONPROJET_DW.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row19_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row22_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row26_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_13_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_14_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_15_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_16_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_17_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_18_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class lesPaysStruct implements
			routines.system.IPersistableRow<lesPaysStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idpays;

		public int getIdpays() {
			return this.idpays;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idpays;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lesPaysStruct other = (lesPaysStruct) obj;

			if (this.idpays != other.idpays)
				return false;

			return true;
		}

		public void copyDataTo(lesPaysStruct other) {

			other.idpays = this.idpays;
			other.nom = this.nom;

		}

		public void copyKeysDataTo(lesPaysStruct other) {

			other.idpays = this.idpays;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idpays = dis.readInt();

					this.nom = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idpays);

				// String

				writeString(this.nom, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idpays=" + String.valueOf(idpays));
			sb.append(",nom=" + nom);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lesPaysStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idpays, other.idpays);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public int idpays;

		public int getIdpays() {
			return this.idpays;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public Long monnaie;

		public Long getMonnaie() {
			return this.monnaie;
		}

		public Integer id_user;

		public Integer getId_user() {
			return this.id_user;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public int est_supprime;

		public int getEst_supprime() {
			return this.est_supprime;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idpays = dis.readInt();

					this.nom = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.monnaie = null;
					} else {
						this.monnaie = dis.readLong();
					}

					this.id_user = readInteger(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idpays);

				// String

				writeString(this.nom, dos);

				// Long

				if (this.monnaie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.monnaie);
				}

				// Integer

				writeInteger(this.id_user, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// int

				dos.writeInt(this.est_supprime);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idpays=" + String.valueOf(idpays));
			sb.append(",nom=" + nom);
			sb.append(",monnaie=" + String.valueOf(monnaie));
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idpays;

		public int getIdpays() {
			return this.idpays;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public Long monnaie;

		public Long getMonnaie() {
			return this.monnaie;
		}

		public Integer id_user;

		public Integer getId_user() {
			return this.id_user;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public int est_supprime;

		public int getEst_supprime() {
			return this.est_supprime;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idpays;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.idpays != other.idpays)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.idpays = this.idpays;
			other.nom = this.nom;
			other.monnaie = this.monnaie;
			other.id_user = this.id_user;
			other.date_creation = this.date_creation;
			other.date_last_modif = this.date_last_modif;
			other.est_supprime = this.est_supprime;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.idpays = this.idpays;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idpays = dis.readInt();

					this.nom = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.monnaie = null;
					} else {
						this.monnaie = dis.readLong();
					}

					this.id_user = readInteger(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idpays);

				// String

				writeString(this.nom, dos);

				// Long

				if (this.monnaie == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.monnaie);
				}

				// Integer

				writeInteger(this.id_user, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// int

				dos.writeInt(this.est_supprime);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idpays=" + String.valueOf(idpays));
			sb.append(",nom=" + nom);
			sb.append(",monnaie=" + String.valueOf(monnaie));
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idpays, other.idpays);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				lesPaysStruct lesPays = new lesPaysStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lesPays" + iterateId,
								0, 0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_1 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_1;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_1 = 1;
				if (insertKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "dbo";
				String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String port_tDBOutput_1 = "1433";
				String dbname_tDBOutput_1 = "PROJET_DW";
				String url_tDBOutput_1 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_1)) {
					url_tDBOutput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_1)) {
					url_tDBOutput_1 += "//" + "PROJET_DW";

				}
				url_tDBOutput_1 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_1 = "sa";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);

				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "DIM_PAYS";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].["
							+ "DIM_PAYS";
				}
				int count_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_1
								+ "] WHERE [idpays] = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO ["
						+ tableName_tDBOutput_1
						+ "] ([idpays],[nom]) VALUES (?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1",
						pstmtInsert_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lesPaysStruct lesPays_tmp = new lesPaysStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(
						url_tDBInput_1, dbUser_tDBInput_1, dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  `pays`.`idpays`, \n  `pays`.`nom`, \n  `pays`.`monnaie`, \n  `pays`.`id_user`, \n  `pays`.`date_creation`, \n  `pa"
						+ "ys`.`date_last_modif`, \n  `pays`.`est_supprime`\nFROM `pays`";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.idpays = 0;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row1.idpays = rs_tDBInput_1.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.nom = null;
						} else {

							row1.nom = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.monnaie = null;
						} else {

							if (rs_tDBInput_1.getObject(3) != null) {
								row1.monnaie = rs_tDBInput_1.getLong(3);
							} else {
								row1.monnaie = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.id_user = null;
						} else {

							if (rs_tDBInput_1.getObject(4) != null) {
								row1.id_user = rs_tDBInput_1.getInt(4);
							} else {
								row1.id_user = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.date_creation = null;
						} else {

							if (rs_tDBInput_1.getString(5) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1
										.getString(5);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_1)) {
									row1.date_creation = rs_tDBInput_1
											.getTimestamp(5);
								} else {
									row1.date_creation = (java.util.Date) year0_tDBInput_1
											.clone();
								}
							} else {
								row1.date_creation = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.date_last_modif = null;
						} else {

							if (rs_tDBInput_1.getString(6) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1
										.getString(6);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_1)) {
									row1.date_last_modif = rs_tDBInput_1
											.getTimestamp(6);
								} else {
									row1.date_last_modif = (java.util.Date) year0_tDBInput_1
											.clone();
								}
							} else {
								row1.date_last_modif = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.est_supprime = 0;
						} else {

							if (rs_tDBInput_1.getObject(7) != null) {
								row1.est_supprime = rs_tDBInput_1.getInt(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_1 main ] start
						 */

						currentComponent = "tFilterRow_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						row2 = null;
						Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
								"&&");
						ope_tFilterRow_1.matches((row1.est_supprime == 0),
								"est_supprime==0 failed");

						if (ope_tFilterRow_1.getMatchFlag()) {
							if (row2 == null) {
								row2 = new row2Struct();
							}
							row2.idpays = row1.idpays;
							row2.nom = row1.nom;
							row2.monnaie = row1.monnaie;
							row2.id_user = row1.id_user;
							row2.date_creation = row1.date_creation;
							row2.date_last_modif = row1.date_last_modif;
							row2.est_supprime = row1.est_supprime;
							nb_line_ok_tFilterRow_1++;
						} else {
							nb_line_reject_tFilterRow_1++;
						}

						nb_line_tFilterRow_1++;

						tos_count_tFilterRow_1++;

						/**
						 * [tFilterRow_1 main ] stop
						 */

						/**
						 * [tFilterRow_1 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_1";

						/**
						 * [tFilterRow_1 process_data_begin ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								lesPays = null;

								// # Output table : 'lesPays'
								lesPays_tmp.idpays = row2.idpays;
								lesPays_tmp.nom = row2.nom;
								lesPays = lesPays_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
							// Start of branch "lesPays"
							if (lesPays != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								// lesPays
								// lesPays

								if (execStat) {
									runStat.updateStatOnConnection("lesPays"
											+ iterateId, 1, 1);
								}

								whetherReject_tDBOutput_1 = false;

								pstmt_tDBOutput_1.setInt(1, lesPays.idpays);

								java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1
										.executeQuery();
								int checkCount_tDBOutput_1 = -1;
								while (rs_tDBOutput_1.next()) {
									checkCount_tDBOutput_1 = rs_tDBOutput_1
											.getInt(1);
								}

								if (checkCount_tDBOutput_1 < 1) {
									pstmtInsert_tDBOutput_1.setInt(1,
											lesPays.idpays);

									if (lesPays.nom == null) {
										pstmtInsert_tDBOutput_1.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(2,
												lesPays.nom);
									}

									try {
										insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
												+ pstmtInsert_tDBOutput_1
														.executeUpdate();
										nb_line_tDBOutput_1++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_1 = true;
										nb_line_tDBOutput_1++;

										System.err.print(e.getMessage());
									}
								}
								// ////////batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_1 {
									public int limitBytePart1(
											int counter,
											java.sql.PreparedStatement pstmt_tDBOutput_1)
											throws Exception {
										try {

											for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
													.executeBatch()) {
												if (countEach_tDBOutput_1 == -2
														|| countEach_tDBOutput_1 == -3) {
													break;
												}
												counter += countEach_tDBOutput_1;
											}

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : e
													.getUpdateCounts()) {
												counter += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(
											int counter,
											java.sql.PreparedStatement pstmt_tDBOutput_1)
											throws Exception {
										try {

											for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
													.executeBatch()) {
												if (countEach_tDBOutput_1 == -2
														|| countEach_tDBOutput_1 == -3) {
													break;
												}
												counter += countEach_tDBOutput_1;
											}

										} catch (java.sql.BatchUpdateException e) {

											for (int countEach_tDBOutput_1 : e
													.getUpdateCounts()) {
												counter += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								// //////////commit every////////////

								commitCounter_tDBOutput_1++;
								if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

									conn_tDBOutput_1.commit();

									commitCounter_tDBOutput_1 = 0;
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "lesPays"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFilterRow_1 process_data_end ] start
						 */

						currentComponent = "tFilterRow_1";

						/**
						 * [tFilterRow_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();
				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lesPays" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class lesClientsStruct implements
			routines.system.IPersistableRow<lesClientsStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public int DIM_PAYS_idpays;

		public int getDIM_PAYS_idpays() {
			return this.DIM_PAYS_idpays;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idclients;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lesClientsStruct other = (lesClientsStruct) obj;

			if (this.idclients != other.idclients)
				return false;

			return true;
		}

		public void copyDataTo(lesClientsStruct other) {

			other.idclients = this.idclients;
			other.DIM_PAYS_idpays = this.DIM_PAYS_idpays;
			other.prenom = this.prenom;
			other.nom = this.nom;
			other.adresse = this.adresse;

		}

		public void copyKeysDataTo(lesClientsStruct other) {

			other.idclients = this.idclients;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idclients = dis.readInt();

					this.DIM_PAYS_idpays = dis.readInt();

					this.prenom = readString(dis);

					this.nom = readString(dis);

					this.adresse = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idclients);

				// int

				dos.writeInt(this.DIM_PAYS_idpays);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.adresse, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idclients=" + String.valueOf(idclients));
			sb.append(",DIM_PAYS_idpays=" + String.valueOf(DIM_PAYS_idpays));
			sb.append(",prenom=" + prenom);
			sb.append(",nom=" + nom);
			sb.append(",adresse=" + adresse);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lesClientsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idclients, other.idclients);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public int idpays;

		public int getIdpays() {
			return this.idpays;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public Integer id_user;

		public Integer getId_user() {
			return this.id_user;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String bloque;

		public String getBloque() {
			return this.bloque;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idclients = dis.readInt();

					this.idpays = dis.readInt();

					this.prenom = readString(dis);

					this.nom = readString(dis);

					this.telephone = readString(dis);

					this.adresse = readString(dis);

					this.id_user = readInteger(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.bloque = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idclients);

				// int

				dos.writeInt(this.idpays);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.adresse, dos);

				// Integer

				writeInteger(this.id_user, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// String

				writeString(this.bloque, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idclients=" + String.valueOf(idclients));
			sb.append(",idpays=" + String.valueOf(idpays));
			sb.append(",prenom=" + prenom);
			sb.append(",nom=" + nom);
			sb.append(",telephone=" + telephone);
			sb.append(",adresse=" + adresse);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",bloque=" + bloque);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public int idpays;

		public int getIdpays() {
			return this.idpays;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public Integer id_user;

		public Integer getId_user() {
			return this.id_user;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String bloque;

		public String getBloque() {
			return this.bloque;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idclients;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.idclients != other.idclients)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.idclients = this.idclients;
			other.idpays = this.idpays;
			other.prenom = this.prenom;
			other.nom = this.nom;
			other.telephone = this.telephone;
			other.adresse = this.adresse;
			other.id_user = this.id_user;
			other.date_creation = this.date_creation;
			other.date_last_modif = this.date_last_modif;
			other.est_supprime = this.est_supprime;
			other.bloque = this.bloque;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.idclients = this.idclients;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idclients = dis.readInt();

					this.idpays = dis.readInt();

					this.prenom = readString(dis);

					this.nom = readString(dis);

					this.telephone = readString(dis);

					this.adresse = readString(dis);

					this.id_user = readInteger(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.bloque = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idclients);

				// int

				dos.writeInt(this.idpays);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.adresse, dos);

				// Integer

				writeInteger(this.id_user, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// String

				writeString(this.bloque, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idclients=" + String.valueOf(idclients));
			sb.append(",idpays=" + String.valueOf(idpays));
			sb.append(",prenom=" + prenom);
			sb.append(",nom=" + nom);
			sb.append(",telephone=" + telephone);
			sb.append(",adresse=" + adresse);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",bloque=" + bloque);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idclients, other.idclients);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				lesClientsStruct lesClients = new lesClientsStruct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"lesClients" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;
				String dbschema_tDBOutput_2 = null;
				String tableName_tDBOutput_2 = null;
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_2 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_2;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_2 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_2 = 1;
				if (insertKeyCount_tDBOutput_2 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = "dbo";
				String driverClass_tDBOutput_2 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_2);
				String port_tDBOutput_2 = "1433";
				String dbname_tDBOutput_2 = "PROJET_DW";
				String url_tDBOutput_2 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_2)) {
					url_tDBOutput_2 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_2)) {
					url_tDBOutput_2 += "//" + "PROJET_DW";

				}
				url_tDBOutput_2 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_2 = "sa";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(
						url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);

				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				if (dbschema_tDBOutput_2 == null
						|| dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = "DIM_CLIENTS";
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "].["
							+ "DIM_CLIENTS";
				}
				int count_tDBOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_2
								+ "] WHERE [idclients] = ?");
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
				String insert_tDBOutput_2 = "INSERT INTO ["
						+ tableName_tDBOutput_2
						+ "] ([idclients],[DIM_PAYS_idpays],[prenom],[nom],[adresse]) VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmtInsert_tDBOutput_2",
						pstmtInsert_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lesClientsStruct lesClients_tmp = new lesClientsStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "root";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(
						url_tDBInput_2, dbUser_tDBInput_2, dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  `clients`.`idclients`, \n  `clients`.`idpays`, \n  `clients`.`prenom`, \n  `clients`.`nom`, \n  `clients`.`teleph"
						+ "one`, \n  `clients`.`adresse`, \n  `clients`.`id_user`, \n  `clients`.`date_creation`, \n  `clients`.`date_last_modif`, \n  `"
						+ "clients`.`est_supprime`, \n  `clients`.`bloque`\nFROM `clients`";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row3.idclients = 0;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row3.idclients = rs_tDBInput_2.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row3.idpays = 0;
						} else {

							if (rs_tDBInput_2.getObject(2) != null) {
								row3.idpays = rs_tDBInput_2.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row3.prenom = null;
						} else {

							row3.prenom = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row3.nom = null;
						} else {

							row3.nom = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row3.telephone = null;
						} else {

							row3.telephone = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row3.adresse = null;
						} else {

							row3.adresse = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row3.id_user = null;
						} else {

							if (rs_tDBInput_2.getObject(7) != null) {
								row3.id_user = rs_tDBInput_2.getInt(7);
							} else {
								row3.id_user = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row3.date_creation = null;
						} else {

							if (rs_tDBInput_2.getString(8) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2
										.getString(8);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_2)) {
									row3.date_creation = rs_tDBInput_2
											.getTimestamp(8);
								} else {
									row3.date_creation = (java.util.Date) year0_tDBInput_2
											.clone();
								}
							} else {
								row3.date_creation = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row3.date_last_modif = null;
						} else {

							if (rs_tDBInput_2.getString(9) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2
										.getString(9);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_2)) {
									row3.date_last_modif = rs_tDBInput_2
											.getTimestamp(9);
								} else {
									row3.date_last_modif = (java.util.Date) year0_tDBInput_2
											.clone();
								}
							} else {
								row3.date_last_modif = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row3.est_supprime = null;
						} else {

							if (rs_tDBInput_2.getObject(10) != null) {
								row3.est_supprime = rs_tDBInput_2.getInt(10);
							} else {
								row3.est_supprime = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row3.bloque = null;
						} else {

							row3.bloque = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 11, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_2 main ] start
						 */

						currentComponent = "tFilterRow_2";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						row4 = null;
						Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2(
								"&&");
						ope_tFilterRow_2.matches((row3.est_supprime == null),
								"est_supprime==null failed");

						if (ope_tFilterRow_2.getMatchFlag()) {
							if (row4 == null) {
								row4 = new row4Struct();
							}
							row4.idclients = row3.idclients;
							row4.idpays = row3.idpays;
							row4.prenom = row3.prenom;
							row4.nom = row3.nom;
							row4.telephone = row3.telephone;
							row4.adresse = row3.adresse;
							row4.id_user = row3.id_user;
							row4.date_creation = row3.date_creation;
							row4.date_last_modif = row3.date_last_modif;
							row4.est_supprime = row3.est_supprime;
							row4.bloque = row3.bloque;
							nb_line_ok_tFilterRow_2++;
						} else {
							nb_line_reject_tFilterRow_2++;
						}

						nb_line_tFilterRow_2++;

						tos_count_tFilterRow_2++;

						/**
						 * [tFilterRow_2 main ] stop
						 */

						/**
						 * [tFilterRow_2 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_2";

						/**
						 * [tFilterRow_2 process_data_begin ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							// row4
							// row4

							if (execStat) {
								runStat.updateStatOnConnection("row4"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								lesClients = null;

								// # Output table : 'lesClients'
								lesClients_tmp.idclients = row4.idclients;
								lesClients_tmp.DIM_PAYS_idpays = row4.idpays;
								lesClients_tmp.prenom = row4.prenom;
								lesClients_tmp.nom = row4.nom;
								lesClients_tmp.adresse = row4.adresse;
								lesClients = lesClients_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
							// Start of branch "lesClients"
							if (lesClients != null) {

								/**
								 * [tDBOutput_2 main ] start
								 */

								currentComponent = "tDBOutput_2";

								// lesClients
								// lesClients

								if (execStat) {
									runStat.updateStatOnConnection("lesClients"
											+ iterateId, 1, 1);
								}

								whetherReject_tDBOutput_2 = false;

								pstmt_tDBOutput_2.setInt(1,
										lesClients.idclients);

								java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2
										.executeQuery();
								int checkCount_tDBOutput_2 = -1;
								while (rs_tDBOutput_2.next()) {
									checkCount_tDBOutput_2 = rs_tDBOutput_2
											.getInt(1);
								}

								if (checkCount_tDBOutput_2 < 1) {
									pstmtInsert_tDBOutput_2.setInt(1,
											lesClients.idclients);

									pstmtInsert_tDBOutput_2.setInt(2,
											lesClients.DIM_PAYS_idpays);

									if (lesClients.prenom == null) {
										pstmtInsert_tDBOutput_2.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(3,
												lesClients.prenom);
									}

									if (lesClients.nom == null) {
										pstmtInsert_tDBOutput_2.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(4,
												lesClients.nom);
									}

									if (lesClients.adresse == null) {
										pstmtInsert_tDBOutput_2.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_2.setString(5,
												lesClients.adresse);
									}

									try {
										insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2
												+ pstmtInsert_tDBOutput_2
														.executeUpdate();
										nb_line_tDBOutput_2++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_2 = true;
										nb_line_tDBOutput_2++;

										System.err.print(e.getMessage());
									}
								}
								// ////////batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_2 {
									public int limitBytePart1(
											int counter,
											java.sql.PreparedStatement pstmt_tDBOutput_2)
											throws Exception {
										try {

											for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
													.executeBatch()) {
												if (countEach_tDBOutput_2 == -2
														|| countEach_tDBOutput_2 == -3) {
													break;
												}
												counter += countEach_tDBOutput_2;
											}

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tDBOutput_2 = 0;
											for (int countEach_tDBOutput_2 : e
													.getUpdateCounts()) {
												counter += (countEach_tDBOutput_2 < 0 ? 0
														: countEach_tDBOutput_2);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(
											int counter,
											java.sql.PreparedStatement pstmt_tDBOutput_2)
											throws Exception {
										try {

											for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
													.executeBatch()) {
												if (countEach_tDBOutput_2 == -2
														|| countEach_tDBOutput_2 == -3) {
													break;
												}
												counter += countEach_tDBOutput_2;
											}

										} catch (java.sql.BatchUpdateException e) {

											for (int countEach_tDBOutput_2 : e
													.getUpdateCounts()) {
												counter += (countEach_tDBOutput_2 < 0 ? 0
														: countEach_tDBOutput_2);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								// //////////commit every////////////

								commitCounter_tDBOutput_2++;
								if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

									conn_tDBOutput_2.commit();

									commitCounter_tDBOutput_2 = 0;
								}

								tos_count_tDBOutput_2++;

								/**
								 * [tDBOutput_2 main ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_end ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_end ] stop
								 */

							} // End of branch "lesClients"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFilterRow_2 process_data_end ] start
						 */

						currentComponent = "tFilterRow_2";

						/**
						 * [tFilterRow_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

					}

				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK",
						nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				if (pstmtInsert_tDBOutput_2 != null) {
					pstmtInsert_tDBOutput_2.close();
					resourceMap.remove("pstmtInsert_tDBOutput_2");
				}
				if (pstmt_tDBOutput_2 != null) {
					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				conn_tDBOutput_2.commit();

				conn_tDBOutput_2.close();
				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"lesClients" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class lesDatesCommandesStruct implements
			routines.system.IPersistableRow<lesDatesCommandesStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String iddate;

		public String getIddate() {
			return this.iddate;
		}

		public Integer jour;

		public Integer getJour() {
			return this.jour;
		}

		public Integer mois;

		public Integer getMois() {
			return this.mois;
		}

		public Integer annee;

		public Integer getAnnee() {
			return this.annee;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.iddate == null) ? 0 : this.iddate.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lesDatesCommandesStruct other = (lesDatesCommandesStruct) obj;

			if (this.iddate == null) {
				if (other.iddate != null)
					return false;

			} else if (!this.iddate.equals(other.iddate))

				return false;

			return true;
		}

		public void copyDataTo(lesDatesCommandesStruct other) {

			other.iddate = this.iddate;
			other.jour = this.jour;
			other.mois = this.mois;
			other.annee = this.annee;

		}

		public void copyKeysDataTo(lesDatesCommandesStruct other) {

			other.iddate = this.iddate;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.iddate = readString(dis);

					this.jour = readInteger(dis);

					this.mois = readInteger(dis);

					this.annee = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iddate, dos);

				// Integer

				writeInteger(this.jour, dos);

				// Integer

				writeInteger(this.mois, dos);

				// Integer

				writeInteger(this.annee, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddate=" + iddate);
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",mois=" + String.valueOf(mois));
			sb.append(",annee=" + String.valueOf(annee));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lesDatesCommandesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddate, other.iddate);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public String date_cmd;

		public String getDate_cmd() {
			return this.date_cmd;
		}

		public Integer MOIS;

		public Integer getMOIS() {
			return this.MOIS;
		}

		public Integer ANNEE;

		public Integer getANNEE() {
			return this.ANNEE;
		}

		public Integer JOUR;

		public Integer getJOUR() {
			return this.JOUR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.date_cmd = readString(dis);

					this.MOIS = readInteger(dis);

					this.ANNEE = readInteger(dis);

					this.JOUR = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.date_cmd, dos);

				// Integer

				writeInteger(this.MOIS, dos);

				// Integer

				writeInteger(this.ANNEE, dos);

				// Integer

				writeInteger(this.JOUR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date_cmd=" + date_cmd);
			sb.append(",MOIS=" + String.valueOf(MOIS));
			sb.append(",ANNEE=" + String.valueOf(ANNEE));
			sb.append(",JOUR=" + String.valueOf(JOUR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				lesDatesCommandesStruct lesDatesCommandes = new lesDatesCommandesStruct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lesDatesCommandes"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;
				String dbschema_tDBOutput_3 = null;
				String tableName_tDBOutput_3 = null;
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_3 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_3;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_3 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_3 = 1;
				if (insertKeyCount_tDBOutput_3 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = "dbo";
				String driverClass_tDBOutput_3 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_3);
				String port_tDBOutput_3 = "1433";
				String dbname_tDBOutput_3 = "PROJET_DW";
				String url_tDBOutput_3 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_3)) {
					url_tDBOutput_3 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_3)) {
					url_tDBOutput_3 += "//" + "PROJET_DW";

				}
				url_tDBOutput_3 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_3 = "sa";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(
						url_tDBOutput_3, dbUser_tDBOutput_3, dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);

				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				if (dbschema_tDBOutput_3 == null
						|| dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = "DIM_DATE_COMMANDE";
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "].["
							+ "DIM_DATE_COMMANDE";
				}
				int count_tDBOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_3
								+ "] WHERE [iddate] = ?");
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
				String insert_tDBOutput_3 = "INSERT INTO ["
						+ tableName_tDBOutput_3
						+ "] ([iddate],[jour],[mois],[annee]) VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmtInsert_tDBOutput_3",
						pstmtInsert_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lesDatesCommandesStruct lesDatesCommandes_tmp = new lesDatesCommandesStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "root";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(
						url_tDBInput_3, dbUser_tDBInput_3, dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();

				String dbquery_tDBInput_3 = "SELECT DISTINCT DATE_FORMAT(STR_TO_DATE(REPLACE(date_cmd,'-','/'), '%d/%m/%Y' ), '%d/%m/%Y')  as date_cmd,\nMONTH( STR_"
						+ "TO_DATE(REPLACE(date_cmd,'-','/'), '%d/%m/%Y' )) AS MOIS,\nYEAR( STR_TO_DATE(REPLACE(date_cmd,'-','/'), '%d/%m/%Y')) AS "
						+ "ANNEE,\nDAY( STR_TO_DATE(REPLACE(date_cmd,'-','/'), '%d/%m/%Y') ) AS JOUR\nFROM commande";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row5.date_cmd = null;
						} else {

							row5.date_cmd = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 1, false);
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row5.MOIS = null;
						} else {

							if (rs_tDBInput_3.getObject(2) != null) {
								row5.MOIS = rs_tDBInput_3.getInt(2);
							} else {
								row5.MOIS = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row5.ANNEE = null;
						} else {

							if (rs_tDBInput_3.getObject(3) != null) {
								row5.ANNEE = rs_tDBInput_3.getInt(3);
							} else {
								row5.ANNEE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row5.JOUR = null;
						} else {

							if (rs_tDBInput_3.getObject(4) != null) {
								row5.JOUR = rs_tDBInput_3.getInt(4);
							} else {
								row5.JOUR = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							lesDatesCommandes = null;

							// # Output table : 'lesDatesCommandes'
							lesDatesCommandes_tmp.iddate = row5.date_cmd;
							lesDatesCommandes_tmp.jour = row5.JOUR;
							lesDatesCommandes_tmp.mois = row5.MOIS;
							lesDatesCommandes_tmp.annee = row5.ANNEE;
							lesDatesCommandes = lesDatesCommandes_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
						// Start of branch "lesDatesCommandes"
						if (lesDatesCommandes != null) {

							/**
							 * [tDBOutput_3 main ] start
							 */

							currentComponent = "tDBOutput_3";

							// lesDatesCommandes
							// lesDatesCommandes

							if (execStat) {
								runStat.updateStatOnConnection(
										"lesDatesCommandes" + iterateId, 1, 1);
							}

							whetherReject_tDBOutput_3 = false;

							if (lesDatesCommandes.iddate == null) {
								pstmt_tDBOutput_3.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(1,
										lesDatesCommandes.iddate);
							}

							java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3
									.executeQuery();
							int checkCount_tDBOutput_3 = -1;
							while (rs_tDBOutput_3.next()) {
								checkCount_tDBOutput_3 = rs_tDBOutput_3
										.getInt(1);
							}

							if (checkCount_tDBOutput_3 < 1) {
								if (lesDatesCommandes.iddate == null) {
									pstmtInsert_tDBOutput_3.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_3.setString(1,
											lesDatesCommandes.iddate);
								}

								if (lesDatesCommandes.jour == null) {
									pstmtInsert_tDBOutput_3.setNull(2,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_3.setInt(2,
											lesDatesCommandes.jour);
								}

								if (lesDatesCommandes.mois == null) {
									pstmtInsert_tDBOutput_3.setNull(3,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_3.setInt(3,
											lesDatesCommandes.mois);
								}

								if (lesDatesCommandes.annee == null) {
									pstmtInsert_tDBOutput_3.setNull(4,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_3.setInt(4,
											lesDatesCommandes.annee);
								}

								try {
									insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3
											+ pstmtInsert_tDBOutput_3
													.executeUpdate();
									nb_line_tDBOutput_3++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_3 = true;
									nb_line_tDBOutput_3++;

									System.err.print(e.getMessage());
								}
							}
							// ////////batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_3 {
								public int limitBytePart1(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_3)
										throws Exception {
									try {

										for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
												.executeBatch()) {
											if (countEach_tDBOutput_3 == -2
													|| countEach_tDBOutput_3 == -3) {
												break;
											}
											counter += countEach_tDBOutput_3;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_3 = 0;
										for (int countEach_tDBOutput_3 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_3 < 0 ? 0
													: countEach_tDBOutput_3);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_3)
										throws Exception {
									try {

										for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
												.executeBatch()) {
											if (countEach_tDBOutput_3 == -2
													|| countEach_tDBOutput_3 == -3) {
												break;
											}
											counter += countEach_tDBOutput_3;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_3 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_3 < 0 ? 0
													: countEach_tDBOutput_3);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							// //////////commit every////////////

							commitCounter_tDBOutput_3++;
							if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {

								conn_tDBOutput_3.commit();

								commitCounter_tDBOutput_3 = 0;
							}

							tos_count_tDBOutput_3++;

							/**
							 * [tDBOutput_3 main ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_end ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_end ] stop
							 */

						} // End of branch "lesDatesCommandes"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

					}

				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				if (pstmtInsert_tDBOutput_3 != null) {
					pstmtInsert_tDBOutput_3.close();
					resourceMap.remove("pstmtInsert_tDBOutput_3");
				}
				if (pstmt_tDBOutput_3 != null) {
					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);
				conn_tDBOutput_3.commit();

				conn_tDBOutput_3.close();
				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3
						+ deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3
						+ updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3
						+ insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3
						+ rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lesDatesCommandes"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class lesDatesLivraisonsStruct implements
			routines.system.IPersistableRow<lesDatesLivraisonsStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String iddate;

		public String getIddate() {
			return this.iddate;
		}

		public Integer jour;

		public Integer getJour() {
			return this.jour;
		}

		public Integer mois;

		public Integer getMois() {
			return this.mois;
		}

		public Integer annee;

		public Integer getAnnee() {
			return this.annee;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.iddate == null) ? 0 : this.iddate.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lesDatesLivraisonsStruct other = (lesDatesLivraisonsStruct) obj;

			if (this.iddate == null) {
				if (other.iddate != null)
					return false;

			} else if (!this.iddate.equals(other.iddate))

				return false;

			return true;
		}

		public void copyDataTo(lesDatesLivraisonsStruct other) {

			other.iddate = this.iddate;
			other.jour = this.jour;
			other.mois = this.mois;
			other.annee = this.annee;

		}

		public void copyKeysDataTo(lesDatesLivraisonsStruct other) {

			other.iddate = this.iddate;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.iddate = readString(dis);

					this.jour = readInteger(dis);

					this.mois = readInteger(dis);

					this.annee = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iddate, dos);

				// Integer

				writeInteger(this.jour, dos);

				// Integer

				writeInteger(this.mois, dos);

				// Integer

				writeInteger(this.annee, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddate=" + iddate);
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",mois=" + String.valueOf(mois));
			sb.append(",annee=" + String.valueOf(annee));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lesDatesLivraisonsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddate, other.iddate);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public String date_livrai;

		public String getDate_livrai() {
			return this.date_livrai;
		}

		public Integer MOIS;

		public Integer getMOIS() {
			return this.MOIS;
		}

		public Integer ANNEE;

		public Integer getANNEE() {
			return this.ANNEE;
		}

		public Integer JOUR;

		public Integer getJOUR() {
			return this.JOUR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.date_livrai = readString(dis);

					this.MOIS = readInteger(dis);

					this.ANNEE = readInteger(dis);

					this.JOUR = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.date_livrai, dos);

				// Integer

				writeInteger(this.MOIS, dos);

				// Integer

				writeInteger(this.ANNEE, dos);

				// Integer

				writeInteger(this.JOUR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date_livrai=" + date_livrai);
			sb.append(",MOIS=" + String.valueOf(MOIS));
			sb.append(",ANNEE=" + String.valueOf(ANNEE));
			sb.append(",JOUR=" + String.valueOf(JOUR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				lesDatesLivraisonsStruct lesDatesLivraisons = new lesDatesLivraisonsStruct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lesDatesLivraisons"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_4 = 0;

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;
				String dbschema_tDBOutput_4 = null;
				String tableName_tDBOutput_4 = null;
				boolean whetherReject_tDBOutput_4 = false;

				java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_4 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_4;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_4 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_4 = 1;
				if (insertKeyCount_tDBOutput_4 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = "dbo";
				String driverClass_tDBOutput_4 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_4);
				String port_tDBOutput_4 = "1433";
				String dbname_tDBOutput_4 = "PROJET_DW";
				String url_tDBOutput_4 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_4)) {
					url_tDBOutput_4 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_4)) {
					url_tDBOutput_4 += "//" + "PROJET_DW";

				}
				url_tDBOutput_4 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_4 = "sa";

				final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;
				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(
						url_tDBOutput_4, dbUser_tDBOutput_4, dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);

				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				if (dbschema_tDBOutput_4 == null
						|| dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = "DIM_DATE_LIVRAISON";
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "].["
							+ "DIM_DATE_LIVRAISON";
				}
				int count_tDBOutput_4 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_4
								+ "] WHERE [iddate] = ?");
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
				String insert_tDBOutput_4 = "INSERT INTO ["
						+ tableName_tDBOutput_4
						+ "] ([iddate],[jour],[mois],[annee]) VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmtInsert_tDBOutput_4",
						pstmtInsert_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lesDatesLivraisonsStruct lesDatesLivraisons_tmp = new lesDatesLivraisonsStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				java.util.Calendar calendar_tDBInput_4 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "root";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String url_tDBInput_4 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(
						url_tDBInput_4, dbUser_tDBInput_4, dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4
						.createStatement();

				String dbquery_tDBInput_4 = "SELECT DISTINCT DATE_FORMAT(STR_TO_DATE(REPLACE(date_livrai,'-','/'), '%d/%m/%Y' ), '%d/%m/%Y')  as date_livrai,\nMONTH"
						+ "( STR_TO_DATE(REPLACE(date_livrai,'-','/'), '%d/%m/%Y' )) AS MOIS,\nYEAR( STR_TO_DATE(REPLACE(date_livrai,'-','/'), '%d/"
						+ "%m/%Y')) AS ANNEE,\nDAY( STR_TO_DATE(REPLACE(date_livrai,'-','/'), '%d/%m/%Y') ) AS JOUR\nFROM livraison";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4
							.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4
							.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4
							.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row6.date_livrai = null;
						} else {

							row6.date_livrai = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 1, false);
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row6.MOIS = null;
						} else {

							if (rs_tDBInput_4.getObject(2) != null) {
								row6.MOIS = rs_tDBInput_4.getInt(2);
							} else {
								row6.MOIS = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row6.ANNEE = null;
						} else {

							if (rs_tDBInput_4.getObject(3) != null) {
								row6.ANNEE = rs_tDBInput_4.getInt(3);
							} else {
								row6.ANNEE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row6.JOUR = null;
						} else {

							if (rs_tDBInput_4.getObject(4) != null) {
								row6.JOUR = rs_tDBInput_4.getInt(4);
							} else {
								row6.JOUR = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							lesDatesLivraisons = null;

							// # Output table : 'lesDatesLivraisons'
							lesDatesLivraisons_tmp.iddate = row6.date_livrai;
							lesDatesLivraisons_tmp.jour = row6.JOUR;
							lesDatesLivraisons_tmp.mois = row6.MOIS;
							lesDatesLivraisons_tmp.annee = row6.ANNEE;
							lesDatesLivraisons = lesDatesLivraisons_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */

						/**
						 * [tMap_4 process_data_begin ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_begin ] stop
						 */
						// Start of branch "lesDatesLivraisons"
						if (lesDatesLivraisons != null) {

							/**
							 * [tDBOutput_4 main ] start
							 */

							currentComponent = "tDBOutput_4";

							// lesDatesLivraisons
							// lesDatesLivraisons

							if (execStat) {
								runStat.updateStatOnConnection(
										"lesDatesLivraisons" + iterateId, 1, 1);
							}

							whetherReject_tDBOutput_4 = false;

							if (lesDatesLivraisons.iddate == null) {
								pstmt_tDBOutput_4.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_4.setString(1,
										lesDatesLivraisons.iddate);
							}

							java.sql.ResultSet rs_tDBOutput_4 = pstmt_tDBOutput_4
									.executeQuery();
							int checkCount_tDBOutput_4 = -1;
							while (rs_tDBOutput_4.next()) {
								checkCount_tDBOutput_4 = rs_tDBOutput_4
										.getInt(1);
							}

							if (checkCount_tDBOutput_4 < 1) {
								if (lesDatesLivraisons.iddate == null) {
									pstmtInsert_tDBOutput_4.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_4.setString(1,
											lesDatesLivraisons.iddate);
								}

								if (lesDatesLivraisons.jour == null) {
									pstmtInsert_tDBOutput_4.setNull(2,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_4.setInt(2,
											lesDatesLivraisons.jour);
								}

								if (lesDatesLivraisons.mois == null) {
									pstmtInsert_tDBOutput_4.setNull(3,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_4.setInt(3,
											lesDatesLivraisons.mois);
								}

								if (lesDatesLivraisons.annee == null) {
									pstmtInsert_tDBOutput_4.setNull(4,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_4.setInt(4,
											lesDatesLivraisons.annee);
								}

								try {
									insertedCount_tDBOutput_4 = insertedCount_tDBOutput_4
											+ pstmtInsert_tDBOutput_4
													.executeUpdate();
									nb_line_tDBOutput_4++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_4 = true;
									nb_line_tDBOutput_4++;

									System.err.print(e.getMessage());
								}
							}
							// ////////batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_4 {
								public int limitBytePart1(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_4)
										throws Exception {
									try {

										for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
												.executeBatch()) {
											if (countEach_tDBOutput_4 == -2
													|| countEach_tDBOutput_4 == -3) {
												break;
											}
											counter += countEach_tDBOutput_4;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_4 = 0;
										for (int countEach_tDBOutput_4 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_4 < 0 ? 0
													: countEach_tDBOutput_4);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_4)
										throws Exception {
									try {

										for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
												.executeBatch()) {
											if (countEach_tDBOutput_4 == -2
													|| countEach_tDBOutput_4 == -3) {
												break;
											}
											counter += countEach_tDBOutput_4;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_4 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_4 < 0 ? 0
													: countEach_tDBOutput_4);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							// //////////commit every////////////

							commitCounter_tDBOutput_4++;
							if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {

								conn_tDBOutput_4.commit();

								commitCounter_tDBOutput_4 = 0;
							}

							tos_count_tDBOutput_4++;

							/**
							 * [tDBOutput_4 main ] stop
							 */

							/**
							 * [tDBOutput_4 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_4";

							/**
							 * [tDBOutput_4 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_4 process_data_end ] start
							 */

							currentComponent = "tDBOutput_4";

							/**
							 * [tDBOutput_4 process_data_end ] stop
							 */

						} // End of branch "lesDatesLivraisons"

						/**
						 * [tMap_4 process_data_end ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

					}

				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				if (pstmtInsert_tDBOutput_4 != null) {
					pstmtInsert_tDBOutput_4.close();
					resourceMap.remove("pstmtInsert_tDBOutput_4");
				}
				if (pstmt_tDBOutput_4 != null) {
					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);
				conn_tDBOutput_4.commit();

				conn_tDBOutput_4.close();
				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4
						+ deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4
						+ updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4
						+ insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4
						+ rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lesDatesLivraisons"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class lesDatesStockStruct implements
			routines.system.IPersistableRow<lesDatesStockStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String iddate;

		public String getIddate() {
			return this.iddate;
		}

		public Integer jour;

		public Integer getJour() {
			return this.jour;
		}

		public Integer mois;

		public Integer getMois() {
			return this.mois;
		}

		public Integer annee;

		public Integer getAnnee() {
			return this.annee;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.iddate == null) ? 0 : this.iddate.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lesDatesStockStruct other = (lesDatesStockStruct) obj;

			if (this.iddate == null) {
				if (other.iddate != null)
					return false;

			} else if (!this.iddate.equals(other.iddate))

				return false;

			return true;
		}

		public void copyDataTo(lesDatesStockStruct other) {

			other.iddate = this.iddate;
			other.jour = this.jour;
			other.mois = this.mois;
			other.annee = this.annee;

		}

		public void copyKeysDataTo(lesDatesStockStruct other) {

			other.iddate = this.iddate;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.iddate = readString(dis);

					this.jour = readInteger(dis);

					this.mois = readInteger(dis);

					this.annee = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iddate, dos);

				// Integer

				writeInteger(this.jour, dos);

				// Integer

				writeInteger(this.mois, dos);

				// Integer

				writeInteger(this.annee, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddate=" + iddate);
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",mois=" + String.valueOf(mois));
			sb.append(",annee=" + String.valueOf(annee));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lesDatesStockStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddate, other.iddate);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public String date_stock;

		public String getDate_stock() {
			return this.date_stock;
		}

		public Integer MOIS;

		public Integer getMOIS() {
			return this.MOIS;
		}

		public Integer ANNEE;

		public Integer getANNEE() {
			return this.ANNEE;
		}

		public Integer JOUR;

		public Integer getJOUR() {
			return this.JOUR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.date_stock = readString(dis);

					this.MOIS = readInteger(dis);

					this.ANNEE = readInteger(dis);

					this.JOUR = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.date_stock, dos);

				// Integer

				writeInteger(this.MOIS, dos);

				// Integer

				writeInteger(this.ANNEE, dos);

				// Integer

				writeInteger(this.JOUR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date_stock=" + date_stock);
			sb.append(",MOIS=" + String.valueOf(MOIS));
			sb.append(",ANNEE=" + String.valueOf(ANNEE));
			sb.append(",JOUR=" + String.valueOf(JOUR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				lesDatesStockStruct lesDatesStock = new lesDatesStockStruct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lesDatesStock"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_5 = 0;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;
				String dbschema_tDBOutput_5 = null;
				String tableName_tDBOutput_5 = null;
				boolean whetherReject_tDBOutput_5 = false;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_5 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_5;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_5 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_5 = 1;
				if (insertKeyCount_tDBOutput_5 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = "dbo";
				String driverClass_tDBOutput_5 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_5);
				String port_tDBOutput_5 = "1433";
				String dbname_tDBOutput_5 = "PROJET_DW";
				String url_tDBOutput_5 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_5)) {
					url_tDBOutput_5 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_5)) {
					url_tDBOutput_5 += "//" + "PROJET_DW";

				}
				url_tDBOutput_5 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_5 = "sa";

				final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;
				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(
						url_tDBOutput_5, dbUser_tDBOutput_5, dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);

				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				if (dbschema_tDBOutput_5 == null
						|| dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = "DIM_DATE_STOCK";
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "].["
							+ "DIM_DATE_STOCK";
				}
				int count_tDBOutput_5 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_5
								+ "] WHERE [iddate] = ?");
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
				String insert_tDBOutput_5 = "INSERT INTO ["
						+ tableName_tDBOutput_5
						+ "] ([iddate],[jour],[mois],[annee]) VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmtInsert_tDBOutput_5",
						pstmtInsert_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lesDatesStockStruct lesDatesStock_tmp = new lesDatesStockStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				java.util.Calendar calendar_tDBInput_5 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_5.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_5 = calendar_tDBInput_5.getTime();
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "root";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String url_tDBInput_5 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(
						url_tDBInput_5, dbUser_tDBInput_5, dbPwd_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5
						.createStatement();

				String dbquery_tDBInput_5 = "(SELECT DISTINCT DATE_FORMAT(STR_TO_DATE(REPLACE(date_livrai,'-','/'), '%d/%m/%Y' ), '%d/%m/%Y')  as date_stock,\nMONTH"
						+ "( STR_TO_DATE(REPLACE(date_livrai,'-','/'), '%d/%m/%Y' )) AS MOIS,\nYEAR( STR_TO_DATE(REPLACE(date_livrai,'-','/'), '%d/"
						+ "%m/%Y')) AS ANNEE,\nDAY( STR_TO_DATE(REPLACE(date_livrai,'-','/'), '%d/%m/%Y') ) AS JOUR\nFROM livraison)\nUNION\n(SELEC"
						+ "T DISTINCT DATE_FORMAT(STR_TO_DATE(REPLACE(date_cmd,'-','/'), '%d/%m/%Y' ), '%d/%m/%Y')  as date_stock,\nMONTH( STR_TO_D"
						+ "ATE(REPLACE(date_cmd,'-','/'), '%d/%m/%Y' )) AS MOIS,\nYEAR( STR_TO_DATE(REPLACE(date_cmd,'-','/'), '%d/%m/%Y')) AS ANNE"
						+ "E,\nDAY( STR_TO_DATE(REPLACE(date_cmd,'-','/'), '%d/%m/%Y') ) AS JOUR\nFROM commande)";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5
							.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5
							.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5
							.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row7.date_stock = null;
						} else {

							row7.date_stock = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 1, false);
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row7.MOIS = null;
						} else {

							if (rs_tDBInput_5.getObject(2) != null) {
								row7.MOIS = rs_tDBInput_5.getInt(2);
							} else {
								row7.MOIS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row7.ANNEE = null;
						} else {

							if (rs_tDBInput_5.getObject(3) != null) {
								row7.ANNEE = rs_tDBInput_5.getInt(3);
							} else {
								row7.ANNEE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row7.JOUR = null;
						} else {

							if (rs_tDBInput_5.getObject(4) != null) {
								row7.JOUR = rs_tDBInput_5.getInt(4);
							} else {
								row7.JOUR = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
							// ###############################
							// # Output tables

							lesDatesStock = null;

							// # Output table : 'lesDatesStock'
							lesDatesStock_tmp.iddate = row7.date_stock;
							lesDatesStock_tmp.jour = row7.JOUR;
							lesDatesStock_tmp.mois = row7.MOIS;
							lesDatesStock_tmp.annee = row7.ANNEE;
							lesDatesStock = lesDatesStock_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5 = false;

						tos_count_tMap_5++;

						/**
						 * [tMap_5 main ] stop
						 */

						/**
						 * [tMap_5 process_data_begin ] start
						 */

						currentComponent = "tMap_5";

						/**
						 * [tMap_5 process_data_begin ] stop
						 */
						// Start of branch "lesDatesStock"
						if (lesDatesStock != null) {

							/**
							 * [tDBOutput_5 main ] start
							 */

							currentComponent = "tDBOutput_5";

							// lesDatesStock
							// lesDatesStock

							if (execStat) {
								runStat.updateStatOnConnection("lesDatesStock"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_5 = false;

							if (lesDatesStock.iddate == null) {
								pstmt_tDBOutput_5.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(1,
										lesDatesStock.iddate);
							}

							java.sql.ResultSet rs_tDBOutput_5 = pstmt_tDBOutput_5
									.executeQuery();
							int checkCount_tDBOutput_5 = -1;
							while (rs_tDBOutput_5.next()) {
								checkCount_tDBOutput_5 = rs_tDBOutput_5
										.getInt(1);
							}

							if (checkCount_tDBOutput_5 < 1) {
								if (lesDatesStock.iddate == null) {
									pstmtInsert_tDBOutput_5.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_5.setString(1,
											lesDatesStock.iddate);
								}

								if (lesDatesStock.jour == null) {
									pstmtInsert_tDBOutput_5.setNull(2,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_5.setInt(2,
											lesDatesStock.jour);
								}

								if (lesDatesStock.mois == null) {
									pstmtInsert_tDBOutput_5.setNull(3,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_5.setInt(3,
											lesDatesStock.mois);
								}

								if (lesDatesStock.annee == null) {
									pstmtInsert_tDBOutput_5.setNull(4,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_5.setInt(4,
											lesDatesStock.annee);
								}

								try {
									insertedCount_tDBOutput_5 = insertedCount_tDBOutput_5
											+ pstmtInsert_tDBOutput_5
													.executeUpdate();
									nb_line_tDBOutput_5++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_5 = true;
									nb_line_tDBOutput_5++;

									System.err.print(e.getMessage());
								}
							}
							// ////////batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_5 {
								public int limitBytePart1(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_5)
										throws Exception {
									try {

										for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
												.executeBatch()) {
											if (countEach_tDBOutput_5 == -2
													|| countEach_tDBOutput_5 == -3) {
												break;
											}
											counter += countEach_tDBOutput_5;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_5 = 0;
										for (int countEach_tDBOutput_5 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_5 < 0 ? 0
													: countEach_tDBOutput_5);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_5)
										throws Exception {
									try {

										for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
												.executeBatch()) {
											if (countEach_tDBOutput_5 == -2
													|| countEach_tDBOutput_5 == -3) {
												break;
											}
											counter += countEach_tDBOutput_5;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_5 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_5 < 0 ? 0
													: countEach_tDBOutput_5);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							// //////////commit every////////////

							commitCounter_tDBOutput_5++;
							if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {

								conn_tDBOutput_5.commit();

								commitCounter_tDBOutput_5 = 0;
							}

							tos_count_tDBOutput_5++;

							/**
							 * [tDBOutput_5 main ] stop
							 */

							/**
							 * [tDBOutput_5 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_5";

							/**
							 * [tDBOutput_5 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_5 process_data_end ] start
							 */

							currentComponent = "tDBOutput_5";

							/**
							 * [tDBOutput_5 process_data_end ] stop
							 */

						} // End of branch "lesDatesStock"

						/**
						 * [tMap_5 process_data_end ] start
						 */

						currentComponent = "tMap_5";

						/**
						 * [tMap_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

					}

				}

				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				if (pstmtInsert_tDBOutput_5 != null) {
					pstmtInsert_tDBOutput_5.close();
					resourceMap.remove("pstmtInsert_tDBOutput_5");
				}
				if (pstmt_tDBOutput_5 != null) {
					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);
				conn_tDBOutput_5.commit();

				conn_tDBOutput_5.close();
				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5
						+ deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5
						+ updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5
						+ insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5
						+ rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lesDatesStock"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class lesDatesVersementsStruct implements
			routines.system.IPersistableRow<lesDatesVersementsStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String iddate;

		public String getIddate() {
			return this.iddate;
		}

		public Integer jour;

		public Integer getJour() {
			return this.jour;
		}

		public Integer mois;

		public Integer getMois() {
			return this.mois;
		}

		public Integer annee;

		public Integer getAnnee() {
			return this.annee;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.iddate == null) ? 0 : this.iddate.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lesDatesVersementsStruct other = (lesDatesVersementsStruct) obj;

			if (this.iddate == null) {
				if (other.iddate != null)
					return false;

			} else if (!this.iddate.equals(other.iddate))

				return false;

			return true;
		}

		public void copyDataTo(lesDatesVersementsStruct other) {

			other.iddate = this.iddate;
			other.jour = this.jour;
			other.mois = this.mois;
			other.annee = this.annee;

		}

		public void copyKeysDataTo(lesDatesVersementsStruct other) {

			other.iddate = this.iddate;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.iddate = readString(dis);

					this.jour = readInteger(dis);

					this.mois = readInteger(dis);

					this.annee = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iddate, dos);

				// Integer

				writeInteger(this.jour, dos);

				// Integer

				writeInteger(this.mois, dos);

				// Integer

				writeInteger(this.annee, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iddate=" + iddate);
			sb.append(",jour=" + String.valueOf(jour));
			sb.append(",mois=" + String.valueOf(mois));
			sb.append(",annee=" + String.valueOf(annee));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lesDatesVersementsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iddate, other.iddate);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public String date_versement;

		public String getDate_versement() {
			return this.date_versement;
		}

		public Integer MOIS;

		public Integer getMOIS() {
			return this.MOIS;
		}

		public Integer ANNEE;

		public Integer getANNEE() {
			return this.ANNEE;
		}

		public Integer JOUR;

		public Integer getJOUR() {
			return this.JOUR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.date_versement = readString(dis);

					this.MOIS = readInteger(dis);

					this.ANNEE = readInteger(dis);

					this.JOUR = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.date_versement, dos);

				// Integer

				writeInteger(this.MOIS, dos);

				// Integer

				writeInteger(this.ANNEE, dos);

				// Integer

				writeInteger(this.JOUR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date_versement=" + date_versement);
			sb.append(",MOIS=" + String.valueOf(MOIS));
			sb.append(",ANNEE=" + String.valueOf(ANNEE));
			sb.append(",JOUR=" + String.valueOf(JOUR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();
				lesDatesVersementsStruct lesDatesVersements = new lesDatesVersementsStruct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lesDatesVersements"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_6 = 0;

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;
				String dbschema_tDBOutput_6 = null;
				String tableName_tDBOutput_6 = null;
				boolean whetherReject_tDBOutput_6 = false;

				java.util.Calendar calendar_tDBOutput_6 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_6 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_6 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_6 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_6;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_6 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_6 = 1;
				if (insertKeyCount_tDBOutput_6 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbUser_tDBOutput_6 = null;
				dbschema_tDBOutput_6 = "dbo";
				String driverClass_tDBOutput_6 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_6);
				String port_tDBOutput_6 = "1433";
				String dbname_tDBOutput_6 = "PROJET_DW";
				String url_tDBOutput_6 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_6)) {
					url_tDBOutput_6 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_6)) {
					url_tDBOutput_6 += "//" + "PROJET_DW";

				}
				url_tDBOutput_6 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_6 = "sa";

				final String decryptedPassword_tDBOutput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;
				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(
						url_tDBOutput_6, dbUser_tDBOutput_6, dbPwd_tDBOutput_6);

				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);

				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;

				if (dbschema_tDBOutput_6 == null
						|| dbschema_tDBOutput_6.trim().length() == 0) {
					tableName_tDBOutput_6 = "DIM_DATE_VERSEMENT";
				} else {
					tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "].["
							+ "DIM_DATE_VERSEMENT";
				}
				int count_tDBOutput_6 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_6
								+ "] WHERE [iddate] = ?");
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
				String insert_tDBOutput_6 = "INSERT INTO ["
						+ tableName_tDBOutput_6
						+ "] ([iddate],[jour],[mois],[annee]) VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmtInsert_tDBOutput_6",
						pstmtInsert_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lesDatesVersementsStruct lesDatesVersements_tmp = new lesDatesVersementsStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				java.util.Calendar calendar_tDBInput_6 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "root";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String url_tDBInput_6 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(
						url_tDBInput_6, dbUser_tDBInput_6, dbPwd_tDBInput_6);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6
						.createStatement();

				String dbquery_tDBInput_6 = "SELECT DISTINCT DATE_FORMAT(STR_TO_DATE(REPLACE(date_versement,'-','/'), '%d/%m/%Y' ), '%d/%m/%Y')  as date_versement,"
						+ "\nMONTH( STR_TO_DATE(REPLACE(date_versement,'-','/'), '%d/%m/%Y' )) AS MOIS,\nYEAR( STR_TO_DATE(REPLACE(date_versement,'-"
						+ "','/'), '%d/%m/%Y')) AS ANNEE,\nDAY( STR_TO_DATE(REPLACE(date_versement,'-','/'), '%d/%m/%Y') ) AS JOUR\nFROM versement "
						+ "where  \nDATE_FORMAT(STR_TO_DATE(REPLACE(date_versement,'-','/'), '%d/%m/%Y' ), '%d/%m/%Y') IS NOT NULL";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6
							.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6
							.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6
							.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row8.date_versement = null;
						} else {

							row8.date_versement = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 1, false);
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row8.MOIS = null;
						} else {

							if (rs_tDBInput_6.getObject(2) != null) {
								row8.MOIS = rs_tDBInput_6.getInt(2);
							} else {
								row8.MOIS = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row8.ANNEE = null;
						} else {

							if (rs_tDBInput_6.getObject(3) != null) {
								row8.ANNEE = rs_tDBInput_6.getInt(3);
							} else {
								row8.ANNEE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row8.JOUR = null;
						} else {

							if (rs_tDBInput_6.getObject(4) != null) {
								row8.JOUR = rs_tDBInput_6.getInt(4);
							} else {
								row8.JOUR = null;
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tMap_6 main ] start
						 */

						currentComponent = "tMap_6";

						// row8
						// row8

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_6 = false;
						boolean mainRowRejected_tMap_6 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
							// ###############################
							// # Output tables

							lesDatesVersements = null;

							// # Output table : 'lesDatesVersements'
							lesDatesVersements_tmp.iddate = row8.date_versement;
							lesDatesVersements_tmp.jour = row8.JOUR;
							lesDatesVersements_tmp.mois = row8.MOIS;
							lesDatesVersements_tmp.annee = row8.ANNEE;
							lesDatesVersements = lesDatesVersements_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_6 = false;

						tos_count_tMap_6++;

						/**
						 * [tMap_6 main ] stop
						 */

						/**
						 * [tMap_6 process_data_begin ] start
						 */

						currentComponent = "tMap_6";

						/**
						 * [tMap_6 process_data_begin ] stop
						 */
						// Start of branch "lesDatesVersements"
						if (lesDatesVersements != null) {

							/**
							 * [tDBOutput_6 main ] start
							 */

							currentComponent = "tDBOutput_6";

							// lesDatesVersements
							// lesDatesVersements

							if (execStat) {
								runStat.updateStatOnConnection(
										"lesDatesVersements" + iterateId, 1, 1);
							}

							whetherReject_tDBOutput_6 = false;

							if (lesDatesVersements.iddate == null) {
								pstmt_tDBOutput_6.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_6.setString(1,
										lesDatesVersements.iddate);
							}

							java.sql.ResultSet rs_tDBOutput_6 = pstmt_tDBOutput_6
									.executeQuery();
							int checkCount_tDBOutput_6 = -1;
							while (rs_tDBOutput_6.next()) {
								checkCount_tDBOutput_6 = rs_tDBOutput_6
										.getInt(1);
							}

							if (checkCount_tDBOutput_6 < 1) {
								if (lesDatesVersements.iddate == null) {
									pstmtInsert_tDBOutput_6.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_6.setString(1,
											lesDatesVersements.iddate);
								}

								if (lesDatesVersements.jour == null) {
									pstmtInsert_tDBOutput_6.setNull(2,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_6.setInt(2,
											lesDatesVersements.jour);
								}

								if (lesDatesVersements.mois == null) {
									pstmtInsert_tDBOutput_6.setNull(3,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_6.setInt(3,
											lesDatesVersements.mois);
								}

								if (lesDatesVersements.annee == null) {
									pstmtInsert_tDBOutput_6.setNull(4,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tDBOutput_6.setInt(4,
											lesDatesVersements.annee);
								}

								try {
									insertedCount_tDBOutput_6 = insertedCount_tDBOutput_6
											+ pstmtInsert_tDBOutput_6
													.executeUpdate();
									nb_line_tDBOutput_6++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_6 = true;
									nb_line_tDBOutput_6++;

									System.err.print(e.getMessage());
								}
							}
							// ////////batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_6 {
								public int limitBytePart1(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_6)
										throws Exception {
									try {

										for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
												.executeBatch()) {
											if (countEach_tDBOutput_6 == -2
													|| countEach_tDBOutput_6 == -3) {
												break;
											}
											counter += countEach_tDBOutput_6;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_6 = 0;
										for (int countEach_tDBOutput_6 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_6 < 0 ? 0
													: countEach_tDBOutput_6);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_6)
										throws Exception {
									try {

										for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
												.executeBatch()) {
											if (countEach_tDBOutput_6 == -2
													|| countEach_tDBOutput_6 == -3) {
												break;
											}
											counter += countEach_tDBOutput_6;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_6 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_6 < 0 ? 0
													: countEach_tDBOutput_6);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							// //////////commit every////////////

							commitCounter_tDBOutput_6++;
							if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {

								conn_tDBOutput_6.commit();

								commitCounter_tDBOutput_6 = 0;
							}

							tos_count_tDBOutput_6++;

							/**
							 * [tDBOutput_6 main ] stop
							 */

							/**
							 * [tDBOutput_6 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_6";

							/**
							 * [tDBOutput_6 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_6 process_data_end ] start
							 */

							currentComponent = "tDBOutput_6";

							/**
							 * [tDBOutput_6 process_data_end ] stop
							 */

						} // End of branch "lesDatesVersements"

						/**
						 * [tMap_6 process_data_end ] start
						 */

						currentComponent = "tMap_6";

						/**
						 * [tMap_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.close();

					}

				}

				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				if (pstmtInsert_tDBOutput_6 != null) {
					pstmtInsert_tDBOutput_6.close();
					resourceMap.remove("pstmtInsert_tDBOutput_6");
				}
				if (pstmt_tDBOutput_6 != null) {
					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");
				}
				resourceMap.put("statementClosed_tDBOutput_6", true);
				conn_tDBOutput_6.commit();

				conn_tDBOutput_6.close();
				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6
						+ deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6
						+ updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6
						+ insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6
						+ rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lesDatesVersements"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
						if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_6")) != null) {
							pstmtToClose_tDBOutput_6.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_6") == null) {
						java.sql.Connection ctn_tDBOutput_6 = null;
						if ((ctn_tDBOutput_6 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_6")) != null) {
							try {
								ctn_tDBOutput_6.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
								String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
										+ sqlEx_tDBOutput_6.getMessage();
								System.err.println(errorMessage_tDBOutput_6);
							}
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class lesFournisseursStruct implements
			routines.system.IPersistableRow<lesFournisseursStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idfournisseurs;

		public int getIdfournisseurs() {
			return this.idfournisseurs;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idfournisseurs;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lesFournisseursStruct other = (lesFournisseursStruct) obj;

			if (this.idfournisseurs != other.idfournisseurs)
				return false;

			return true;
		}

		public void copyDataTo(lesFournisseursStruct other) {

			other.idfournisseurs = this.idfournisseurs;
			other.nom = this.nom;

		}

		public void copyKeysDataTo(lesFournisseursStruct other) {

			other.idfournisseurs = this.idfournisseurs;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idfournisseurs = dis.readInt();

					this.nom = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idfournisseurs);

				// String

				writeString(this.nom, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfournisseurs=" + String.valueOf(idfournisseurs));
			sb.append(",nom=" + nom);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lesFournisseursStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfournisseurs,
					other.idfournisseurs);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public int idfournisseurs;

		public int getIdfournisseurs() {
			return this.idfournisseurs;
		}

		public int idpays;

		public int getIdpays() {
			return this.idpays;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idfournisseurs = dis.readInt();

					this.idpays = dis.readInt();

					this.nom = readString(dis);

					this.adresse = readString(dis);

					this.telephone = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.id_user = null;
					} else {
						this.id_user = dis.readLong();
					}

					this.est_supprime = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idfournisseurs);

				// int

				dos.writeInt(this.idpays);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.adresse, dos);

				// String

				writeString(this.telephone, dos);

				// Long

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				// Integer

				writeInteger(this.est_supprime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfournisseurs=" + String.valueOf(idfournisseurs));
			sb.append(",idpays=" + String.valueOf(idpays));
			sb.append(",nom=" + nom);
			sb.append(",adresse=" + adresse);
			sb.append(",telephone=" + telephone);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idfournisseurs;

		public int getIdfournisseurs() {
			return this.idfournisseurs;
		}

		public int idpays;

		public int getIdpays() {
			return this.idpays;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idfournisseurs;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.idfournisseurs != other.idfournisseurs)
				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.idfournisseurs = this.idfournisseurs;
			other.idpays = this.idpays;
			other.nom = this.nom;
			other.adresse = this.adresse;
			other.telephone = this.telephone;
			other.id_user = this.id_user;
			other.est_supprime = this.est_supprime;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.idfournisseurs = this.idfournisseurs;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idfournisseurs = dis.readInt();

					this.idpays = dis.readInt();

					this.nom = readString(dis);

					this.adresse = readString(dis);

					this.telephone = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.id_user = null;
					} else {
						this.id_user = dis.readLong();
					}

					this.est_supprime = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idfournisseurs);

				// int

				dos.writeInt(this.idpays);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.adresse, dos);

				// String

				writeString(this.telephone, dos);

				// Long

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				// Integer

				writeInteger(this.est_supprime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfournisseurs=" + String.valueOf(idfournisseurs));
			sb.append(",idpays=" + String.valueOf(idpays));
			sb.append(",nom=" + nom);
			sb.append(",adresse=" + adresse);
			sb.append(",telephone=" + telephone);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfournisseurs,
					other.idfournisseurs);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				row10Struct row10 = new row10Struct();
				lesFournisseursStruct lesFournisseurs = new lesFournisseursStruct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lesFournisseurs"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_7 = 0;

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;
				String dbschema_tDBOutput_7 = null;
				String tableName_tDBOutput_7 = null;
				boolean whetherReject_tDBOutput_7 = false;

				java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_7 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_7;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_7 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_7 = 1;
				if (insertKeyCount_tDBOutput_7 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbUser_tDBOutput_7 = null;
				dbschema_tDBOutput_7 = "dbo";
				String driverClass_tDBOutput_7 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_7);
				String port_tDBOutput_7 = "1433";
				String dbname_tDBOutput_7 = "PROJET_DW";
				String url_tDBOutput_7 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_7)) {
					url_tDBOutput_7 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_7)) {
					url_tDBOutput_7 += "//" + "PROJET_DW";

				}
				url_tDBOutput_7 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_7 = "sa";

				final String decryptedPassword_tDBOutput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;
				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(
						url_tDBOutput_7, dbUser_tDBOutput_7, dbPwd_tDBOutput_7);

				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);

				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;

				if (dbschema_tDBOutput_7 == null
						|| dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = "DIM_FOURNISSEURS";
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "].["
							+ "DIM_FOURNISSEURS";
				}
				int count_tDBOutput_7 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_7
								+ "] WHERE [idfournisseurs] = ?");
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
				String insert_tDBOutput_7 = "INSERT INTO ["
						+ tableName_tDBOutput_7
						+ "] ([idfournisseurs],[nom]) VALUES (?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmtInsert_tDBOutput_7",
						pstmtInsert_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lesFournisseursStruct lesFournisseurs_tmp = new lesFournisseursStruct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tFilterRow_3 = 0;

				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				java.util.Calendar calendar_tDBInput_7 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_7.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_7 = calendar_tDBInput_7.getTime();
				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "root";

				final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String url_tDBInput_7 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(
						url_tDBInput_7, dbUser_tDBInput_7, dbPwd_tDBInput_7);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7
						.createStatement();

				String dbquery_tDBInput_7 = "SELECT \n  `fournisseurs`.`idfournisseurs`, \n  `fournisseurs`.`idpays`, \n  `fournisseurs`.`nom`, \n  `fournisseurs`.`adre"
						+ "sse`, \n  `fournisseurs`.`telephone`, \n  `fournisseurs`.`id_user`, \n  `fournisseurs`.`est_supprime`\nFROM `fournisseurs`";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7
							.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7
							.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7
							.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row9.idfournisseurs = 0;
						} else {

							if (rs_tDBInput_7.getObject(1) != null) {
								row9.idfournisseurs = rs_tDBInput_7.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row9.idpays = 0;
						} else {

							if (rs_tDBInput_7.getObject(2) != null) {
								row9.idpays = rs_tDBInput_7.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row9.nom = null;
						} else {

							row9.nom = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 3, false);
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row9.adresse = null;
						} else {

							row9.adresse = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 4, false);
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row9.telephone = null;
						} else {

							row9.telephone = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 5, false);
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row9.id_user = null;
						} else {

							if (rs_tDBInput_7.getObject(6) != null) {
								row9.id_user = rs_tDBInput_7.getLong(6);
							} else {
								row9.id_user = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row9.est_supprime = null;
						} else {

							if (rs_tDBInput_7.getObject(7) != null) {
								row9.est_supprime = rs_tDBInput_7.getInt(7);
							} else {
								row9.est_supprime = null;
							}
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_3 main ] start
						 */

						currentComponent = "tFilterRow_3";

						// row9
						// row9

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId,
									1, 1);
						}

						row10 = null;
						Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3(
								"&&");
						ope_tFilterRow_3.matches((row9.est_supprime == null),
								"est_supprime==null failed");

						if (ope_tFilterRow_3.getMatchFlag()) {
							if (row10 == null) {
								row10 = new row10Struct();
							}
							row10.idfournisseurs = row9.idfournisseurs;
							row10.idpays = row9.idpays;
							row10.nom = row9.nom;
							row10.adresse = row9.adresse;
							row10.telephone = row9.telephone;
							row10.id_user = row9.id_user;
							row10.est_supprime = row9.est_supprime;
							nb_line_ok_tFilterRow_3++;
						} else {
							nb_line_reject_tFilterRow_3++;
						}

						nb_line_tFilterRow_3++;

						tos_count_tFilterRow_3++;

						/**
						 * [tFilterRow_3 main ] stop
						 */

						/**
						 * [tFilterRow_3 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_3";

						/**
						 * [tFilterRow_3 process_data_begin ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tMap_7 main ] start
							 */

							currentComponent = "tMap_7";

							// row10
							// row10

							if (execStat) {
								runStat.updateStatOnConnection("row10"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_7 = false;
							boolean mainRowRejected_tMap_7 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
								// ###############################
								// # Output tables

								lesFournisseurs = null;

								// # Output table : 'lesFournisseurs'
								lesFournisseurs_tmp.idfournisseurs = row10.idfournisseurs;
								lesFournisseurs_tmp.nom = row10.nom;
								lesFournisseurs = lesFournisseurs_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_7 = false;

							tos_count_tMap_7++;

							/**
							 * [tMap_7 main ] stop
							 */

							/**
							 * [tMap_7 process_data_begin ] start
							 */

							currentComponent = "tMap_7";

							/**
							 * [tMap_7 process_data_begin ] stop
							 */
							// Start of branch "lesFournisseurs"
							if (lesFournisseurs != null) {

								/**
								 * [tDBOutput_7 main ] start
								 */

								currentComponent = "tDBOutput_7";

								// lesFournisseurs
								// lesFournisseurs

								if (execStat) {
									runStat.updateStatOnConnection(
											"lesFournisseurs" + iterateId, 1, 1);
								}

								whetherReject_tDBOutput_7 = false;

								pstmt_tDBOutput_7.setInt(1,
										lesFournisseurs.idfournisseurs);

								java.sql.ResultSet rs_tDBOutput_7 = pstmt_tDBOutput_7
										.executeQuery();
								int checkCount_tDBOutput_7 = -1;
								while (rs_tDBOutput_7.next()) {
									checkCount_tDBOutput_7 = rs_tDBOutput_7
											.getInt(1);
								}

								if (checkCount_tDBOutput_7 < 1) {
									pstmtInsert_tDBOutput_7.setInt(1,
											lesFournisseurs.idfournisseurs);

									if (lesFournisseurs.nom == null) {
										pstmtInsert_tDBOutput_7.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_7.setString(2,
												lesFournisseurs.nom);
									}

									try {
										insertedCount_tDBOutput_7 = insertedCount_tDBOutput_7
												+ pstmtInsert_tDBOutput_7
														.executeUpdate();
										nb_line_tDBOutput_7++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_7 = true;
										nb_line_tDBOutput_7++;

										System.err.print(e.getMessage());
									}
								}
								// ////////batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_7 {
									public int limitBytePart1(
											int counter,
											java.sql.PreparedStatement pstmt_tDBOutput_7)
											throws Exception {
										try {

											for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
													.executeBatch()) {
												if (countEach_tDBOutput_7 == -2
														|| countEach_tDBOutput_7 == -3) {
													break;
												}
												counter += countEach_tDBOutput_7;
											}

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tDBOutput_7 = 0;
											for (int countEach_tDBOutput_7 : e
													.getUpdateCounts()) {
												counter += (countEach_tDBOutput_7 < 0 ? 0
														: countEach_tDBOutput_7);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(
											int counter,
											java.sql.PreparedStatement pstmt_tDBOutput_7)
											throws Exception {
										try {

											for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
													.executeBatch()) {
												if (countEach_tDBOutput_7 == -2
														|| countEach_tDBOutput_7 == -3) {
													break;
												}
												counter += countEach_tDBOutput_7;
											}

										} catch (java.sql.BatchUpdateException e) {

											for (int countEach_tDBOutput_7 : e
													.getUpdateCounts()) {
												counter += (countEach_tDBOutput_7 < 0 ? 0
														: countEach_tDBOutput_7);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								// //////////commit every////////////

								commitCounter_tDBOutput_7++;
								if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {

									conn_tDBOutput_7.commit();

									commitCounter_tDBOutput_7 = 0;
								}

								tos_count_tDBOutput_7++;

								/**
								 * [tDBOutput_7 main ] stop
								 */

								/**
								 * [tDBOutput_7 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_7";

								/**
								 * [tDBOutput_7 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_7 process_data_end ] start
								 */

								currentComponent = "tDBOutput_7";

								/**
								 * [tDBOutput_7 process_data_end ] stop
								 */

							} // End of branch "lesFournisseurs"

							/**
							 * [tMap_7 process_data_end ] start
							 */

							currentComponent = "tMap_7";

							/**
							 * [tMap_7 process_data_end ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFilterRow_3 process_data_end ] start
						 */

						currentComponent = "tFilterRow_3";

						/**
						 * [tFilterRow_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.close();

					}

				}

				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK",
						nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				if (pstmtInsert_tDBOutput_7 != null) {
					pstmtInsert_tDBOutput_7.close();
					resourceMap.remove("pstmtInsert_tDBOutput_7");
				}
				if (pstmt_tDBOutput_7 != null) {
					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");
				}
				resourceMap.put("statementClosed_tDBOutput_7", true);
				conn_tDBOutput_7.commit();

				conn_tDBOutput_7.close();
				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7
						+ deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7
						+ updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7
						+ insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7
						+ rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lesFournisseurs"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
						if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_7")) != null) {
							pstmtToClose_tDBOutput_7.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_7") == null) {
						java.sql.Connection ctn_tDBOutput_7 = null;
						if ((ctn_tDBOutput_7 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_7")) != null) {
							try {
								ctn_tDBOutput_7.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
								String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
										+ sqlEx_tDBOutput_7.getMessage();
								System.err.println(errorMessage_tDBOutput_7);
							}
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class lesProduitsStruct implements
			routines.system.IPersistableRow<lesProduitsStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idproduits;

		public int getIdproduits() {
			return this.idproduits;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idproduits;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lesProduitsStruct other = (lesProduitsStruct) obj;

			if (this.idproduits != other.idproduits)
				return false;

			return true;
		}

		public void copyDataTo(lesProduitsStruct other) {

			other.idproduits = this.idproduits;
			other.libelle = this.libelle;

		}

		public void copyKeysDataTo(lesProduitsStruct other) {

			other.idproduits = this.idproduits;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idproduits = dis.readInt();

					this.libelle = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idproduits);

				// String

				writeString(this.libelle, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idproduits=" + String.valueOf(idproduits));
			sb.append(",libelle=" + libelle);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lesProduitsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idproduits,
					other.idproduits);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public int idproduits;

		public int getIdproduits() {
			return this.idproduits;
		}

		public String reference;

		public String getReference() {
			return this.reference;
		}

		public String libelle;

		public String getLibelle() {
			return this.libelle;
		}

		public Long seuil;

		public Long getSeuil() {
			return this.seuil;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public BigDecimal poids;

		public BigDecimal getPoids() {
			return this.poids;
		}

		public String unite_poids;

		public String getUnite_poids() {
			return this.unite_poids;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public BigDecimal prix_achat;

		public BigDecimal getPrix_achat() {
			return this.prix_achat;
		}

		public BigDecimal prix_vente;

		public BigDecimal getPrix_vente() {
			return this.prix_vente;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idproduits = dis.readInt();

					this.reference = readString(dis);

					this.libelle = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.seuil = null;
					} else {
						this.seuil = dis.readLong();
					}

					this.description = readString(dis);

					this.poids = (BigDecimal) dis.readObject();

					this.unite_poids = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.id_user = null;
					} else {
						this.id_user = dis.readLong();
					}

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.prix_achat = (BigDecimal) dis.readObject();

					this.prix_vente = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idproduits);

				// String

				writeString(this.reference, dos);

				// String

				writeString(this.libelle, dos);

				// Long

				if (this.seuil == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.seuil);
				}

				// String

				writeString(this.description, dos);

				// BigDecimal

				dos.writeObject(this.poids);

				// String

				writeString(this.unite_poids, dos);

				// Long

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// BigDecimal

				dos.writeObject(this.prix_achat);

				// BigDecimal

				dos.writeObject(this.prix_vente);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idproduits=" + String.valueOf(idproduits));
			sb.append(",reference=" + reference);
			sb.append(",libelle=" + libelle);
			sb.append(",seuil=" + String.valueOf(seuil));
			sb.append(",description=" + description);
			sb.append(",poids=" + String.valueOf(poids));
			sb.append(",unite_poids=" + unite_poids);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",prix_achat=" + String.valueOf(prix_achat));
			sb.append(",prix_vente=" + String.valueOf(prix_vente));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				lesProduitsStruct lesProduits = new lesProduitsStruct();

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				currentComponent = "tDBOutput_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lesProduits"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_8 = 0;

				int nb_line_tDBOutput_8 = 0;
				int nb_line_update_tDBOutput_8 = 0;
				int nb_line_inserted_tDBOutput_8 = 0;
				int nb_line_deleted_tDBOutput_8 = 0;
				int nb_line_rejected_tDBOutput_8 = 0;

				int deletedCount_tDBOutput_8 = 0;
				int updatedCount_tDBOutput_8 = 0;
				int insertedCount_tDBOutput_8 = 0;
				int rejectedCount_tDBOutput_8 = 0;
				String dbschema_tDBOutput_8 = null;
				String tableName_tDBOutput_8 = null;
				boolean whetherReject_tDBOutput_8 = false;

				java.util.Calendar calendar_tDBOutput_8 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_8 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_8 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_8 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_8;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_8 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_8 = 1;
				if (insertKeyCount_tDBOutput_8 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_8 = null;
				String dbUser_tDBOutput_8 = null;
				dbschema_tDBOutput_8 = "dbo";
				String driverClass_tDBOutput_8 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_8);
				String port_tDBOutput_8 = "1433";
				String dbname_tDBOutput_8 = "PROJET_DW";
				String url_tDBOutput_8 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_8)) {
					url_tDBOutput_8 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_8)) {
					url_tDBOutput_8 += "//" + "PROJET_DW";

				}
				url_tDBOutput_8 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_8 = "sa";

				final String decryptedPassword_tDBOutput_8 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;
				conn_tDBOutput_8 = java.sql.DriverManager.getConnection(
						url_tDBOutput_8, dbUser_tDBOutput_8, dbPwd_tDBOutput_8);

				resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);

				conn_tDBOutput_8.setAutoCommit(false);
				int commitEvery_tDBOutput_8 = 10000;
				int commitCounter_tDBOutput_8 = 0;

				if (dbschema_tDBOutput_8 == null
						|| dbschema_tDBOutput_8.trim().length() == 0) {
					tableName_tDBOutput_8 = "DIM_PRODUITS";
				} else {
					tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "].["
							+ "DIM_PRODUITS";
				}
				int count_tDBOutput_8 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_8
								+ "] WHERE [idproduits] = ?");
				resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);
				String insert_tDBOutput_8 = "INSERT INTO ["
						+ tableName_tDBOutput_8
						+ "] ([idproduits],[libelle]) VALUES (?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_8 = conn_tDBOutput_8
						.prepareStatement(insert_tDBOutput_8);
				resourceMap.put("pstmtInsert_tDBOutput_8",
						pstmtInsert_tDBOutput_8);

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_8 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lesProduitsStruct lesProduits_tmp = new lesProduitsStruct();
				// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				java.util.Calendar calendar_tDBInput_8 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_8.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_8 = calendar_tDBInput_8.getTime();
				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = "root";

				final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;

				String url_tDBInput_8 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_8 = java.sql.DriverManager.getConnection(
						url_tDBInput_8, dbUser_tDBInput_8, dbPwd_tDBInput_8);

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8
						.createStatement();

				String dbquery_tDBInput_8 = "SELECT \n  `produits`.`idproduits`, \n  `produits`.`reference`, \n  `produits`.`libelle`, \n  `produits`.`seuil`, \n  `produ"
						+ "its`.`description`, \n  `produits`.`poids`, \n  `produits`.`unite_poids`, \n  `produits`.`id_user`, \n  `produits`.`date_cre"
						+ "ation`, \n  `produits`.`date_last_modif`, \n  `produits`.`prix_achat`, \n  `produits`.`prix_vente`\nFROM `produits`";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8
							.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8
							.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8
							.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row11.idproduits = 0;
						} else {

							if (rs_tDBInput_8.getObject(1) != null) {
								row11.idproduits = rs_tDBInput_8.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row11.reference = null;
						} else {

							row11.reference = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 2, false);
						}
						if (colQtyInRs_tDBInput_8 < 3) {
							row11.libelle = null;
						} else {

							row11.libelle = routines.system.JDBCUtil.getString(
									rs_tDBInput_8, 3, false);
						}
						if (colQtyInRs_tDBInput_8 < 4) {
							row11.seuil = null;
						} else {

							if (rs_tDBInput_8.getObject(4) != null) {
								row11.seuil = rs_tDBInput_8.getLong(4);
							} else {
								row11.seuil = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 5) {
							row11.description = null;
						} else {

							row11.description = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 5, false);
						}
						if (colQtyInRs_tDBInput_8 < 6) {
							row11.poids = null;
						} else {

							if (rs_tDBInput_8.getObject(6) != null) {
								row11.poids = rs_tDBInput_8.getBigDecimal(6);
							} else {
								row11.poids = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 7) {
							row11.unite_poids = null;
						} else {

							row11.unite_poids = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 7, false);
						}
						if (colQtyInRs_tDBInput_8 < 8) {
							row11.id_user = null;
						} else {

							if (rs_tDBInput_8.getObject(8) != null) {
								row11.id_user = rs_tDBInput_8.getLong(8);
							} else {
								row11.id_user = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 9) {
							row11.date_creation = null;
						} else {

							if (rs_tDBInput_8.getString(9) != null) {
								String dateString_tDBInput_8 = rs_tDBInput_8
										.getString(9);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_8)) {
									row11.date_creation = rs_tDBInput_8
											.getTimestamp(9);
								} else {
									row11.date_creation = (java.util.Date) year0_tDBInput_8
											.clone();
								}
							} else {
								row11.date_creation = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 10) {
							row11.date_last_modif = null;
						} else {

							if (rs_tDBInput_8.getString(10) != null) {
								String dateString_tDBInput_8 = rs_tDBInput_8
										.getString(10);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_8)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_8)) {
									row11.date_last_modif = rs_tDBInput_8
											.getTimestamp(10);
								} else {
									row11.date_last_modif = (java.util.Date) year0_tDBInput_8
											.clone();
								}
							} else {
								row11.date_last_modif = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 11) {
							row11.prix_achat = null;
						} else {

							if (rs_tDBInput_8.getObject(11) != null) {
								row11.prix_achat = rs_tDBInput_8
										.getBigDecimal(11);
							} else {
								row11.prix_achat = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 12) {
							row11.prix_vente = null;
						} else {

							if (rs_tDBInput_8.getObject(12) != null) {
								row11.prix_vente = rs_tDBInput_8
										.getBigDecimal(12);
							} else {
								row11.prix_vente = null;
							}
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tMap_8 main ] start
						 */

						currentComponent = "tMap_8";

						// row11
						// row11

						if (execStat) {
							runStat.updateStatOnConnection("row11" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_8 = false;
						boolean mainRowRejected_tMap_8 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
							// ###############################
							// # Output tables

							lesProduits = null;

							// # Output table : 'lesProduits'
							lesProduits_tmp.idproduits = row11.idproduits;
							lesProduits_tmp.libelle = row11.libelle;
							lesProduits = lesProduits_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_8 = false;

						tos_count_tMap_8++;

						/**
						 * [tMap_8 main ] stop
						 */

						/**
						 * [tMap_8 process_data_begin ] start
						 */

						currentComponent = "tMap_8";

						/**
						 * [tMap_8 process_data_begin ] stop
						 */
						// Start of branch "lesProduits"
						if (lesProduits != null) {

							/**
							 * [tDBOutput_8 main ] start
							 */

							currentComponent = "tDBOutput_8";

							// lesProduits
							// lesProduits

							if (execStat) {
								runStat.updateStatOnConnection("lesProduits"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_8 = false;

							pstmt_tDBOutput_8.setInt(1, lesProduits.idproduits);

							java.sql.ResultSet rs_tDBOutput_8 = pstmt_tDBOutput_8
									.executeQuery();
							int checkCount_tDBOutput_8 = -1;
							while (rs_tDBOutput_8.next()) {
								checkCount_tDBOutput_8 = rs_tDBOutput_8
										.getInt(1);
							}

							if (checkCount_tDBOutput_8 < 1) {
								pstmtInsert_tDBOutput_8.setInt(1,
										lesProduits.idproduits);

								if (lesProduits.libelle == null) {
									pstmtInsert_tDBOutput_8.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_8.setString(2,
											lesProduits.libelle);
								}

								try {
									insertedCount_tDBOutput_8 = insertedCount_tDBOutput_8
											+ pstmtInsert_tDBOutput_8
													.executeUpdate();
									nb_line_tDBOutput_8++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_8 = true;
									nb_line_tDBOutput_8++;

									System.err.print(e.getMessage());
								}
							}
							// ////////batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_8 {
								public int limitBytePart1(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_8)
										throws Exception {
									try {

										for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
												.executeBatch()) {
											if (countEach_tDBOutput_8 == -2
													|| countEach_tDBOutput_8 == -3) {
												break;
											}
											counter += countEach_tDBOutput_8;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_8 = 0;
										for (int countEach_tDBOutput_8 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_8 < 0 ? 0
													: countEach_tDBOutput_8);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_8)
										throws Exception {
									try {

										for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
												.executeBatch()) {
											if (countEach_tDBOutput_8 == -2
													|| countEach_tDBOutput_8 == -3) {
												break;
											}
											counter += countEach_tDBOutput_8;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_8 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_8 < 0 ? 0
													: countEach_tDBOutput_8);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							// //////////commit every////////////

							commitCounter_tDBOutput_8++;
							if (commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {

								conn_tDBOutput_8.commit();

								commitCounter_tDBOutput_8 = 0;
							}

							tos_count_tDBOutput_8++;

							/**
							 * [tDBOutput_8 main ] stop
							 */

							/**
							 * [tDBOutput_8 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_8";

							/**
							 * [tDBOutput_8 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_8 process_data_end ] start
							 */

							currentComponent = "tDBOutput_8";

							/**
							 * [tDBOutput_8 process_data_end ] stop
							 */

						} // End of branch "lesProduits"

						/**
						 * [tMap_8 process_data_end ] start
						 */

						currentComponent = "tMap_8";

						/**
						 * [tMap_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
					if (conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {

						conn_tDBInput_8.close();

					}

				}

				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

				if (pstmtInsert_tDBOutput_8 != null) {
					pstmtInsert_tDBOutput_8.close();
					resourceMap.remove("pstmtInsert_tDBOutput_8");
				}
				if (pstmt_tDBOutput_8 != null) {
					pstmt_tDBOutput_8.close();
					resourceMap.remove("pstmt_tDBOutput_8");
				}
				resourceMap.put("statementClosed_tDBOutput_8", true);
				conn_tDBOutput_8.commit();

				conn_tDBOutput_8.close();
				resourceMap.put("finish_tDBOutput_8", true);

				nb_line_deleted_tDBOutput_8 = nb_line_deleted_tDBOutput_8
						+ deletedCount_tDBOutput_8;
				nb_line_update_tDBOutput_8 = nb_line_update_tDBOutput_8
						+ updatedCount_tDBOutput_8;
				nb_line_inserted_tDBOutput_8 = nb_line_inserted_tDBOutput_8
						+ insertedCount_tDBOutput_8;
				nb_line_rejected_tDBOutput_8 = nb_line_rejected_tDBOutput_8
						+ rejectedCount_tDBOutput_8;

				globalMap.put("tDBOutput_8_NB_LINE", nb_line_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_8);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lesProduits"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				/**
				 * [tDBOutput_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
						if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_8")) != null) {
							pstmtToClose_tDBOutput_8.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_8") == null) {
						java.sql.Connection ctn_tDBOutput_8 = null;
						if ((ctn_tDBOutput_8 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_8")) != null) {
							try {
								ctn_tDBOutput_8.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_8) {
								String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :"
										+ sqlEx_tDBOutput_8.getMessage();
								System.err.println(errorMessage_tDBOutput_8);
							}
						}
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public static class faitCommandeStruct implements
			routines.system.IPersistableRow<faitCommandeStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int DIM_PRODUITS_idproduits;

		public int getDIM_PRODUITS_idproduits() {
			return this.DIM_PRODUITS_idproduits;
		}

		public String DIM_DATE_COMMANDE_iddate;

		public String getDIM_DATE_COMMANDE_iddate() {
			return this.DIM_DATE_COMMANDE_iddate;
		}

		public int DIM_PAYS_idpays;

		public int getDIM_PAYS_idpays() {
			return this.DIM_PAYS_idpays;
		}

		public int DIM_FOURNISSEURS_idfournisseurs;

		public int getDIM_FOURNISSEURS_idfournisseurs() {
			return this.DIM_FOURNISSEURS_idfournisseurs;
		}

		public Double quantite;

		public Double getQuantite() {
			return this.quantite;
		}

		public Double pu_achat;

		public Double getPu_achat() {
			return this.pu_achat;
		}

		public Double remise;

		public Double getRemise() {
			return this.remise;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.DIM_PRODUITS_idproduits;

				result = prime
						* result
						+ ((this.DIM_DATE_COMMANDE_iddate == null) ? 0
								: this.DIM_DATE_COMMANDE_iddate.hashCode());

				result = prime * result + (int) this.DIM_PAYS_idpays;

				result = prime * result
						+ (int) this.DIM_FOURNISSEURS_idfournisseurs;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final faitCommandeStruct other = (faitCommandeStruct) obj;

			if (this.DIM_PRODUITS_idproduits != other.DIM_PRODUITS_idproduits)
				return false;

			if (this.DIM_DATE_COMMANDE_iddate == null) {
				if (other.DIM_DATE_COMMANDE_iddate != null)
					return false;

			} else if (!this.DIM_DATE_COMMANDE_iddate
					.equals(other.DIM_DATE_COMMANDE_iddate))

				return false;

			if (this.DIM_PAYS_idpays != other.DIM_PAYS_idpays)
				return false;

			if (this.DIM_FOURNISSEURS_idfournisseurs != other.DIM_FOURNISSEURS_idfournisseurs)
				return false;

			return true;
		}

		public void copyDataTo(faitCommandeStruct other) {

			other.DIM_PRODUITS_idproduits = this.DIM_PRODUITS_idproduits;
			other.DIM_DATE_COMMANDE_iddate = this.DIM_DATE_COMMANDE_iddate;
			other.DIM_PAYS_idpays = this.DIM_PAYS_idpays;
			other.DIM_FOURNISSEURS_idfournisseurs = this.DIM_FOURNISSEURS_idfournisseurs;
			other.quantite = this.quantite;
			other.pu_achat = this.pu_achat;
			other.remise = this.remise;

		}

		public void copyKeysDataTo(faitCommandeStruct other) {

			other.DIM_PRODUITS_idproduits = this.DIM_PRODUITS_idproduits;
			other.DIM_DATE_COMMANDE_iddate = this.DIM_DATE_COMMANDE_iddate;
			other.DIM_PAYS_idpays = this.DIM_PAYS_idpays;
			other.DIM_FOURNISSEURS_idfournisseurs = this.DIM_FOURNISSEURS_idfournisseurs;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.DIM_PRODUITS_idproduits = dis.readInt();

					this.DIM_DATE_COMMANDE_iddate = readString(dis);

					this.DIM_PAYS_idpays = dis.readInt();

					this.DIM_FOURNISSEURS_idfournisseurs = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.quantite = null;
					} else {
						this.quantite = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pu_achat = null;
					} else {
						this.pu_achat = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.remise = null;
					} else {
						this.remise = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.DIM_PRODUITS_idproduits);

				// String

				writeString(this.DIM_DATE_COMMANDE_iddate, dos);

				// int

				dos.writeInt(this.DIM_PAYS_idpays);

				// int

				dos.writeInt(this.DIM_FOURNISSEURS_idfournisseurs);

				// Double

				if (this.quantite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite);
				}

				// Double

				if (this.pu_achat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pu_achat);
				}

				// Double

				if (this.remise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.remise);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DIM_PRODUITS_idproduits="
					+ String.valueOf(DIM_PRODUITS_idproduits));
			sb.append(",DIM_DATE_COMMANDE_iddate=" + DIM_DATE_COMMANDE_iddate);
			sb.append(",DIM_PAYS_idpays=" + String.valueOf(DIM_PAYS_idpays));
			sb.append(",DIM_FOURNISSEURS_idfournisseurs="
					+ String.valueOf(DIM_FOURNISSEURS_idfournisseurs));
			sb.append(",quantite=" + String.valueOf(quantite));
			sb.append(",pu_achat=" + String.valueOf(pu_achat));
			sb.append(",remise=" + String.valueOf(remise));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(faitCommandeStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DIM_PRODUITS_idproduits,
					other.DIM_PRODUITS_idproduits);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.DIM_DATE_COMMANDE_iddate,
					other.DIM_DATE_COMMANDE_iddate);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.DIM_PAYS_idpays,
					other.DIM_PAYS_idpays);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(
					this.DIM_FOURNISSEURS_idfournisseurs,
					other.DIM_FOURNISSEURS_idfournisseurs);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public long idcommande;

		public long getIdcommande() {
			return this.idcommande;
		}

		public int idproduits;

		public int getIdproduits() {
			return this.idproduits;
		}

		public long idmonnaie;

		public long getIdmonnaie() {
			return this.idmonnaie;
		}

		public int idfournisseurs;

		public int getIdfournisseurs() {
			return this.idfournisseurs;
		}

		public String num_cmd;

		public String getNum_cmd() {
			return this.num_cmd;
		}

		public String date_cmd;

		public String getDate_cmd() {
			return this.date_cmd;
		}

		public Double quantite;

		public Double getQuantite() {
			return this.quantite;
		}

		public Double pu_achat;

		public Double getPu_achat() {
			return this.pu_achat;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public Integer id_pays_destination;

		public Integer getId_pays_destination() {
			return this.id_pays_destination;
		}

		public String observation;

		public String getObservation() {
			return this.observation;
		}

		public Double remise;

		public Double getRemise() {
			return this.remise;
		}

		public Long remboursement;

		public Long getRemboursement() {
			return this.remboursement;
		}

		public String numcheque;

		public String getNumcheque() {
			return this.numcheque;
		}

		public String banque;

		public String getBanque() {
			return this.banque;
		}

		public String cheque_encaisse;

		public String getCheque_encaisse() {
			return this.cheque_encaisse;
		}

		public String date_encaissement;

		public String getDate_encaissement() {
			return this.date_encaissement;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String autre_chauffeur;

		public String getAutre_chauffeur() {
			return this.autre_chauffeur;
		}

		public String autre_vehicule;

		public String getAutre_vehicule() {
			return this.autre_vehicule;
		}

		public Integer validation;

		public Integer getValidation() {
			return this.validation;
		}

		public Integer id_user_validation;

		public Integer getId_user_validation() {
			return this.id_user_validation;
		}

		public Integer identreprise;

		public Integer getIdentreprise() {
			return this.identreprise;
		}

		public BigDecimal restant_cmd_precedent;

		public BigDecimal getRestant_cmd_precedent() {
			return this.restant_cmd_precedent;
		}

		public Integer cloture;

		public Integer getCloture() {
			return this.cloture;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idcommande = dis.readLong();

					this.idproduits = dis.readInt();

					this.idmonnaie = dis.readLong();

					this.idfournisseurs = dis.readInt();

					this.num_cmd = readString(dis);

					this.date_cmd = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantite = null;
					} else {
						this.quantite = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pu_achat = null;
					} else {
						this.pu_achat = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.id_user = null;
					} else {
						this.id_user = dis.readLong();
					}

					this.id_pays_destination = readInteger(dis);

					this.observation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.remise = null;
					} else {
						this.remise = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.remboursement = null;
					} else {
						this.remboursement = dis.readLong();
					}

					this.numcheque = readString(dis);

					this.banque = readString(dis);

					this.cheque_encaisse = readString(dis);

					this.date_encaissement = readString(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.autre_chauffeur = readString(dis);

					this.autre_vehicule = readString(dis);

					this.validation = readInteger(dis);

					this.id_user_validation = readInteger(dis);

					this.identreprise = readInteger(dis);

					this.restant_cmd_precedent = (BigDecimal) dis.readObject();

					this.cloture = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.idcommande);

				// int

				dos.writeInt(this.idproduits);

				// long

				dos.writeLong(this.idmonnaie);

				// int

				dos.writeInt(this.idfournisseurs);

				// String

				writeString(this.num_cmd, dos);

				// String

				writeString(this.date_cmd, dos);

				// Double

				if (this.quantite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite);
				}

				// Double

				if (this.pu_achat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pu_achat);
				}

				// Long

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				// Integer

				writeInteger(this.id_pays_destination, dos);

				// String

				writeString(this.observation, dos);

				// Double

				if (this.remise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.remise);
				}

				// Long

				if (this.remboursement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.remboursement);
				}

				// String

				writeString(this.numcheque, dos);

				// String

				writeString(this.banque, dos);

				// String

				writeString(this.cheque_encaisse, dos);

				// String

				writeString(this.date_encaissement, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// String

				writeString(this.autre_chauffeur, dos);

				// String

				writeString(this.autre_vehicule, dos);

				// Integer

				writeInteger(this.validation, dos);

				// Integer

				writeInteger(this.id_user_validation, dos);

				// Integer

				writeInteger(this.identreprise, dos);

				// BigDecimal

				dos.writeObject(this.restant_cmd_precedent);

				// Integer

				writeInteger(this.cloture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcommande=" + String.valueOf(idcommande));
			sb.append(",idproduits=" + String.valueOf(idproduits));
			sb.append(",idmonnaie=" + String.valueOf(idmonnaie));
			sb.append(",idfournisseurs=" + String.valueOf(idfournisseurs));
			sb.append(",num_cmd=" + num_cmd);
			sb.append(",date_cmd=" + date_cmd);
			sb.append(",quantite=" + String.valueOf(quantite));
			sb.append(",pu_achat=" + String.valueOf(pu_achat));
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",id_pays_destination="
					+ String.valueOf(id_pays_destination));
			sb.append(",observation=" + observation);
			sb.append(",remise=" + String.valueOf(remise));
			sb.append(",remboursement=" + String.valueOf(remboursement));
			sb.append(",numcheque=" + numcheque);
			sb.append(",banque=" + banque);
			sb.append(",cheque_encaisse=" + cheque_encaisse);
			sb.append(",date_encaissement=" + date_encaissement);
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",autre_chauffeur=" + autre_chauffeur);
			sb.append(",autre_vehicule=" + autre_vehicule);
			sb.append(",validation=" + String.valueOf(validation));
			sb.append(",id_user_validation="
					+ String.valueOf(id_user_validation));
			sb.append(",identreprise=" + String.valueOf(identreprise));
			sb.append(",restant_cmd_precedent="
					+ String.valueOf(restant_cmd_precedent));
			sb.append(",cloture=" + String.valueOf(cloture));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_9Struct implements
			routines.system.IPersistableRow<after_tDBInput_9Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long idcommande;

		public long getIdcommande() {
			return this.idcommande;
		}

		public int idproduits;

		public int getIdproduits() {
			return this.idproduits;
		}

		public long idmonnaie;

		public long getIdmonnaie() {
			return this.idmonnaie;
		}

		public int idfournisseurs;

		public int getIdfournisseurs() {
			return this.idfournisseurs;
		}

		public String num_cmd;

		public String getNum_cmd() {
			return this.num_cmd;
		}

		public String date_cmd;

		public String getDate_cmd() {
			return this.date_cmd;
		}

		public Double quantite;

		public Double getQuantite() {
			return this.quantite;
		}

		public Double pu_achat;

		public Double getPu_achat() {
			return this.pu_achat;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public Integer id_pays_destination;

		public Integer getId_pays_destination() {
			return this.id_pays_destination;
		}

		public String observation;

		public String getObservation() {
			return this.observation;
		}

		public Double remise;

		public Double getRemise() {
			return this.remise;
		}

		public Long remboursement;

		public Long getRemboursement() {
			return this.remboursement;
		}

		public String numcheque;

		public String getNumcheque() {
			return this.numcheque;
		}

		public String banque;

		public String getBanque() {
			return this.banque;
		}

		public String cheque_encaisse;

		public String getCheque_encaisse() {
			return this.cheque_encaisse;
		}

		public String date_encaissement;

		public String getDate_encaissement() {
			return this.date_encaissement;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String autre_chauffeur;

		public String getAutre_chauffeur() {
			return this.autre_chauffeur;
		}

		public String autre_vehicule;

		public String getAutre_vehicule() {
			return this.autre_vehicule;
		}

		public Integer validation;

		public Integer getValidation() {
			return this.validation;
		}

		public Integer id_user_validation;

		public Integer getId_user_validation() {
			return this.id_user_validation;
		}

		public Integer identreprise;

		public Integer getIdentreprise() {
			return this.identreprise;
		}

		public BigDecimal restant_cmd_precedent;

		public BigDecimal getRestant_cmd_precedent() {
			return this.restant_cmd_precedent;
		}

		public Integer cloture;

		public Integer getCloture() {
			return this.cloture;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idcommande;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_9Struct other = (after_tDBInput_9Struct) obj;

			if (this.idcommande != other.idcommande)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_9Struct other) {

			other.idcommande = this.idcommande;
			other.idproduits = this.idproduits;
			other.idmonnaie = this.idmonnaie;
			other.idfournisseurs = this.idfournisseurs;
			other.num_cmd = this.num_cmd;
			other.date_cmd = this.date_cmd;
			other.quantite = this.quantite;
			other.pu_achat = this.pu_achat;
			other.id_user = this.id_user;
			other.id_pays_destination = this.id_pays_destination;
			other.observation = this.observation;
			other.remise = this.remise;
			other.remboursement = this.remboursement;
			other.numcheque = this.numcheque;
			other.banque = this.banque;
			other.cheque_encaisse = this.cheque_encaisse;
			other.date_encaissement = this.date_encaissement;
			other.date_creation = this.date_creation;
			other.date_last_modif = this.date_last_modif;
			other.est_supprime = this.est_supprime;
			other.autre_chauffeur = this.autre_chauffeur;
			other.autre_vehicule = this.autre_vehicule;
			other.validation = this.validation;
			other.id_user_validation = this.id_user_validation;
			other.identreprise = this.identreprise;
			other.restant_cmd_precedent = this.restant_cmd_precedent;
			other.cloture = this.cloture;

		}

		public void copyKeysDataTo(after_tDBInput_9Struct other) {

			other.idcommande = this.idcommande;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idcommande = dis.readLong();

					this.idproduits = dis.readInt();

					this.idmonnaie = dis.readLong();

					this.idfournisseurs = dis.readInt();

					this.num_cmd = readString(dis);

					this.date_cmd = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantite = null;
					} else {
						this.quantite = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pu_achat = null;
					} else {
						this.pu_achat = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.id_user = null;
					} else {
						this.id_user = dis.readLong();
					}

					this.id_pays_destination = readInteger(dis);

					this.observation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.remise = null;
					} else {
						this.remise = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.remboursement = null;
					} else {
						this.remboursement = dis.readLong();
					}

					this.numcheque = readString(dis);

					this.banque = readString(dis);

					this.cheque_encaisse = readString(dis);

					this.date_encaissement = readString(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.autre_chauffeur = readString(dis);

					this.autre_vehicule = readString(dis);

					this.validation = readInteger(dis);

					this.id_user_validation = readInteger(dis);

					this.identreprise = readInteger(dis);

					this.restant_cmd_precedent = (BigDecimal) dis.readObject();

					this.cloture = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.idcommande);

				// int

				dos.writeInt(this.idproduits);

				// long

				dos.writeLong(this.idmonnaie);

				// int

				dos.writeInt(this.idfournisseurs);

				// String

				writeString(this.num_cmd, dos);

				// String

				writeString(this.date_cmd, dos);

				// Double

				if (this.quantite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite);
				}

				// Double

				if (this.pu_achat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pu_achat);
				}

				// Long

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				// Integer

				writeInteger(this.id_pays_destination, dos);

				// String

				writeString(this.observation, dos);

				// Double

				if (this.remise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.remise);
				}

				// Long

				if (this.remboursement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.remboursement);
				}

				// String

				writeString(this.numcheque, dos);

				// String

				writeString(this.banque, dos);

				// String

				writeString(this.cheque_encaisse, dos);

				// String

				writeString(this.date_encaissement, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// String

				writeString(this.autre_chauffeur, dos);

				// String

				writeString(this.autre_vehicule, dos);

				// Integer

				writeInteger(this.validation, dos);

				// Integer

				writeInteger(this.id_user_validation, dos);

				// Integer

				writeInteger(this.identreprise, dos);

				// BigDecimal

				dos.writeObject(this.restant_cmd_precedent);

				// Integer

				writeInteger(this.cloture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcommande=" + String.valueOf(idcommande));
			sb.append(",idproduits=" + String.valueOf(idproduits));
			sb.append(",idmonnaie=" + String.valueOf(idmonnaie));
			sb.append(",idfournisseurs=" + String.valueOf(idfournisseurs));
			sb.append(",num_cmd=" + num_cmd);
			sb.append(",date_cmd=" + date_cmd);
			sb.append(",quantite=" + String.valueOf(quantite));
			sb.append(",pu_achat=" + String.valueOf(pu_achat));
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",id_pays_destination="
					+ String.valueOf(id_pays_destination));
			sb.append(",observation=" + observation);
			sb.append(",remise=" + String.valueOf(remise));
			sb.append(",remboursement=" + String.valueOf(remboursement));
			sb.append(",numcheque=" + numcheque);
			sb.append(",banque=" + banque);
			sb.append(",cheque_encaisse=" + cheque_encaisse);
			sb.append(",date_encaissement=" + date_encaissement);
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",autre_chauffeur=" + autre_chauffeur);
			sb.append(",autre_vehicule=" + autre_vehicule);
			sb.append(",validation=" + String.valueOf(validation));
			sb.append(",id_user_validation="
					+ String.valueOf(id_user_validation));
			sb.append(",identreprise=" + String.valueOf(identreprise));
			sb.append(",restant_cmd_precedent="
					+ String.valueOf(restant_cmd_precedent));
			sb.append(",cloture=" + String.valueOf(cloture));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcommande,
					other.idcommande);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_10Process(globalMap);

				row12Struct row12 = new row12Struct();
				faitCommandeStruct faitCommande = new faitCommandeStruct();

				/**
				 * [tDBOutput_9 begin ] start
				 */

				ok_Hash.put("tDBOutput_9", false);
				start_Hash.put("tDBOutput_9", System.currentTimeMillis());

				currentComponent = "tDBOutput_9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("faitCommande"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_9 = 0;

				int nb_line_tDBOutput_9 = 0;
				int nb_line_update_tDBOutput_9 = 0;
				int nb_line_inserted_tDBOutput_9 = 0;
				int nb_line_deleted_tDBOutput_9 = 0;
				int nb_line_rejected_tDBOutput_9 = 0;

				int deletedCount_tDBOutput_9 = 0;
				int updatedCount_tDBOutput_9 = 0;
				int insertedCount_tDBOutput_9 = 0;
				int rejectedCount_tDBOutput_9 = 0;
				String dbschema_tDBOutput_9 = null;
				String tableName_tDBOutput_9 = null;
				boolean whetherReject_tDBOutput_9 = false;

				java.util.Calendar calendar_tDBOutput_9 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_9 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_9 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_9 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_9;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_9 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int updateKeyCount_tDBOutput_9 = 4;
				if (updateKeyCount_tDBOutput_9 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_9 = null;
				String dbUser_tDBOutput_9 = null;
				dbschema_tDBOutput_9 = "dbo";
				String driverClass_tDBOutput_9 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_9);
				String port_tDBOutput_9 = "1433";
				String dbname_tDBOutput_9 = "PROJET_DW";
				String url_tDBOutput_9 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_9)) {
					url_tDBOutput_9 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_9)) {
					url_tDBOutput_9 += "//" + "PROJET_DW";

				}
				url_tDBOutput_9 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_9 = "sa";

				final String decryptedPassword_tDBOutput_9 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_9 = decryptedPassword_tDBOutput_9;
				conn_tDBOutput_9 = java.sql.DriverManager.getConnection(
						url_tDBOutput_9, dbUser_tDBOutput_9, dbPwd_tDBOutput_9);

				resourceMap.put("conn_tDBOutput_9", conn_tDBOutput_9);

				conn_tDBOutput_9.setAutoCommit(false);
				int commitEvery_tDBOutput_9 = 10000;
				int commitCounter_tDBOutput_9 = 0;

				int batchSize_tDBOutput_9 = 10000;
				int batchSizeCounter_tDBOutput_9 = 0;

				if (dbschema_tDBOutput_9 == null
						|| dbschema_tDBOutput_9.trim().length() == 0) {
					tableName_tDBOutput_9 = "FAIT_COMMANDE";
				} else {
					tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "].["
							+ "FAIT_COMMANDE";
				}
				int count_tDBOutput_9 = 0;

				String update_tDBOutput_9 = "UPDATE ["
						+ tableName_tDBOutput_9
						+ "] SET [quantite] = ?,[pu_achat] = ?,[remise] = ? WHERE [DIM_PRODUITS_idproduits] = ? AND [DIM_DATE_COMMANDE_iddate] = ? AND [DIM_PAYS_idpays] = ? AND [DIM_FOURNISSEURS_idfournisseurs] = ?";
				java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9
						.prepareStatement(update_tDBOutput_9);
				resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);

				/**
				 * [tDBOutput_9 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_9 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
						.get("tHash_Lookup_row14"));

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				faitCommandeStruct faitCommande_tmp = new faitCommandeStruct();
				// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				java.util.Calendar calendar_tDBInput_9 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_9.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_9 = calendar_tDBInput_9.getTime();
				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = "root";

				final String decryptedPassword_tDBInput_9 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;

				String url_tDBInput_9 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_9 = java.sql.DriverManager.getConnection(
						url_tDBInput_9, dbUser_tDBInput_9, dbPwd_tDBInput_9);

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9
						.createStatement();

				String dbquery_tDBInput_9 = "SELECT \n  `commande`.`idcommande`, \n  `commande`.`idproduits`, \n  `commande`.`idmonnaie`, \n  `commande`.`idfournisseurs"
						+ "`, \n  `commande`.`num_cmd`, \n DATE_FORMAT(STR_TO_DATE(REPLACE(date_cmd,'-','/'), '%d/%m/%Y' ), '%d/%m/%Y')  as date_cmd,"
						+ " \n  `commande`.`quantite`, \n  `commande`.`pu_achat`, \n  `commande`.`id_user`, \n  `commande`.`id_pays_destination`, \n  `c"
						+ "ommande`.`observation`, \n ifnull( `commande`.`remise`,0), \n  `commande`.`remboursement`, \n  `commande`.`numcheque`, \n  `"
						+ "commande`.`banque`, \n  `commande`.`cheque_encaisse`, \n  `commande`.`date_encaissement`, \n  `commande`.`date_creation`, \n"
						+ "  `commande`.`date_last_modif`, \n  `commande`.`est_supprime`, \n  `commande`.`autre_chauffeur`, \n  `commande`.`autre_vehi"
						+ "cule`, \n  `commande`.`validation`, \n  `commande`.`id_user_validation`, \n  `commande`.`identreprise`, \n  `commande`.`rest"
						+ "ant_cmd_precedent`, \n  `commande`.`cloture`\nFROM `commande`";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9
							.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9
							.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9
							.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row12.idcommande = 0;
						} else {

							if (rs_tDBInput_9.getObject(1) != null) {
								row12.idcommande = rs_tDBInput_9.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row12.idproduits = 0;
						} else {

							if (rs_tDBInput_9.getObject(2) != null) {
								row12.idproduits = rs_tDBInput_9.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 3) {
							row12.idmonnaie = 0;
						} else {

							if (rs_tDBInput_9.getObject(3) != null) {
								row12.idmonnaie = rs_tDBInput_9.getLong(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 4) {
							row12.idfournisseurs = 0;
						} else {

							if (rs_tDBInput_9.getObject(4) != null) {
								row12.idfournisseurs = rs_tDBInput_9.getInt(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 5) {
							row12.num_cmd = null;
						} else {

							row12.num_cmd = routines.system.JDBCUtil.getString(
									rs_tDBInput_9, 5, false);
						}
						if (colQtyInRs_tDBInput_9 < 6) {
							row12.date_cmd = null;
						} else {

							row12.date_cmd = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 6, false);
						}
						if (colQtyInRs_tDBInput_9 < 7) {
							row12.quantite = null;
						} else {

							if (rs_tDBInput_9.getObject(7) != null) {
								row12.quantite = rs_tDBInput_9.getDouble(7);
							} else {
								row12.quantite = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 8) {
							row12.pu_achat = null;
						} else {

							if (rs_tDBInput_9.getObject(8) != null) {
								row12.pu_achat = rs_tDBInput_9.getDouble(8);
							} else {
								row12.pu_achat = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 9) {
							row12.id_user = null;
						} else {

							if (rs_tDBInput_9.getObject(9) != null) {
								row12.id_user = rs_tDBInput_9.getLong(9);
							} else {
								row12.id_user = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 10) {
							row12.id_pays_destination = null;
						} else {

							if (rs_tDBInput_9.getObject(10) != null) {
								row12.id_pays_destination = rs_tDBInput_9
										.getInt(10);
							} else {
								row12.id_pays_destination = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 11) {
							row12.observation = null;
						} else {

							row12.observation = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 11, false);
						}
						if (colQtyInRs_tDBInput_9 < 12) {
							row12.remise = null;
						} else {

							if (rs_tDBInput_9.getObject(12) != null) {
								row12.remise = rs_tDBInput_9.getDouble(12);
							} else {
								row12.remise = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 13) {
							row12.remboursement = null;
						} else {

							if (rs_tDBInput_9.getObject(13) != null) {
								row12.remboursement = rs_tDBInput_9.getLong(13);
							} else {
								row12.remboursement = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 14) {
							row12.numcheque = null;
						} else {

							row12.numcheque = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 14, false);
						}
						if (colQtyInRs_tDBInput_9 < 15) {
							row12.banque = null;
						} else {

							row12.banque = routines.system.JDBCUtil.getString(
									rs_tDBInput_9, 15, false);
						}
						if (colQtyInRs_tDBInput_9 < 16) {
							row12.cheque_encaisse = null;
						} else {

							row12.cheque_encaisse = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 16, false);
						}
						if (colQtyInRs_tDBInput_9 < 17) {
							row12.date_encaissement = null;
						} else {

							row12.date_encaissement = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 17, false);
						}
						if (colQtyInRs_tDBInput_9 < 18) {
							row12.date_creation = null;
						} else {

							if (rs_tDBInput_9.getString(18) != null) {
								String dateString_tDBInput_9 = rs_tDBInput_9
										.getString(18);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_9)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_9)) {
									row12.date_creation = rs_tDBInput_9
											.getTimestamp(18);
								} else {
									row12.date_creation = (java.util.Date) year0_tDBInput_9
											.clone();
								}
							} else {
								row12.date_creation = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 19) {
							row12.date_last_modif = null;
						} else {

							if (rs_tDBInput_9.getString(19) != null) {
								String dateString_tDBInput_9 = rs_tDBInput_9
										.getString(19);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_9)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_9)) {
									row12.date_last_modif = rs_tDBInput_9
											.getTimestamp(19);
								} else {
									row12.date_last_modif = (java.util.Date) year0_tDBInput_9
											.clone();
								}
							} else {
								row12.date_last_modif = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 20) {
							row12.est_supprime = null;
						} else {

							if (rs_tDBInput_9.getObject(20) != null) {
								row12.est_supprime = rs_tDBInput_9.getInt(20);
							} else {
								row12.est_supprime = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 21) {
							row12.autre_chauffeur = null;
						} else {

							row12.autre_chauffeur = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 21, false);
						}
						if (colQtyInRs_tDBInput_9 < 22) {
							row12.autre_vehicule = null;
						} else {

							row12.autre_vehicule = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 22, false);
						}
						if (colQtyInRs_tDBInput_9 < 23) {
							row12.validation = null;
						} else {

							if (rs_tDBInput_9.getObject(23) != null) {
								row12.validation = rs_tDBInput_9.getInt(23);
							} else {
								row12.validation = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 24) {
							row12.id_user_validation = null;
						} else {

							if (rs_tDBInput_9.getObject(24) != null) {
								row12.id_user_validation = rs_tDBInput_9
										.getInt(24);
							} else {
								row12.id_user_validation = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 25) {
							row12.identreprise = null;
						} else {

							if (rs_tDBInput_9.getObject(25) != null) {
								row12.identreprise = rs_tDBInput_9.getInt(25);
							} else {
								row12.identreprise = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 26) {
							row12.restant_cmd_precedent = null;
						} else {

							if (rs_tDBInput_9.getObject(26) != null) {
								row12.restant_cmd_precedent = rs_tDBInput_9
										.getBigDecimal(26);
							} else {
								row12.restant_cmd_precedent = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 27) {
							row12.cloture = null;
						} else {

							if (rs_tDBInput_9.getObject(27) != null) {
								row12.cloture = rs_tDBInput_9.getInt(27);
							} else {
								row12.cloture = null;
							}
						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tMap_9 main ] start
						 */

						currentComponent = "tMap_9";

						// row12
						// row12

						if (execStat) {
							runStat.updateStatOnConnection("row12" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_9 = false;
						boolean mainRowRejected_tMap_9 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row14"
						// /////////////////////////////////////////////

						boolean forceLooprow14 = false;

						row14Struct row14ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_9 = false;

							Object exprKeyValue_row14__idfournisseurs = row12.idfournisseurs;
							if (exprKeyValue_row14__idfournisseurs == null) {
								hasCasePrimitiveKeyWithNull_tMap_9 = true;
							} else {
								row14HashKey.idfournisseurs = (int) (Integer) exprKeyValue_row14__idfournisseurs;
							}

							row14HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_9) { // G_TM_M_091

								tHash_Lookup_row14.lookup(row14HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_9
									|| !tHash_Lookup_row14.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_9 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row14 != null
								&& tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.idfournisseurs = '"
							// + row14HashKey.idfournisseurs + "'");
						} // G 071

						row14Struct row14 = null;

						row14Struct fromLookup_row14 = null;
						row14 = row14Default;

						if (tHash_Lookup_row14 != null
								&& tHash_Lookup_row14.hasNext()) { // G 099

							fromLookup_row14 = tHash_Lookup_row14.next();

						} // G 099

						if (fromLookup_row14 != null) {
							row14 = fromLookup_row14;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
							// ###############################
							// # Output tables

							faitCommande = null;

							if (!rejectedInnerJoin_tMap_9) {

								// # Output table : 'faitCommande'
								faitCommande_tmp.DIM_PRODUITS_idproduits = row12.idproduits;
								faitCommande_tmp.DIM_DATE_COMMANDE_iddate = row12.date_cmd;
								faitCommande_tmp.DIM_PAYS_idpays = row14.idpays;
								faitCommande_tmp.DIM_FOURNISSEURS_idfournisseurs = row12.idfournisseurs;
								faitCommande_tmp.quantite = row12.quantite;
								faitCommande_tmp.pu_achat = row12.pu_achat;
								faitCommande_tmp.remise = row12.remise;
								faitCommande = faitCommande_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_9 = false;

						tos_count_tMap_9++;

						/**
						 * [tMap_9 main ] stop
						 */

						/**
						 * [tMap_9 process_data_begin ] start
						 */

						currentComponent = "tMap_9";

						/**
						 * [tMap_9 process_data_begin ] stop
						 */
						// Start of branch "faitCommande"
						if (faitCommande != null) {

							/**
							 * [tDBOutput_9 main ] start
							 */

							currentComponent = "tDBOutput_9";

							// faitCommande
							// faitCommande

							if (execStat) {
								runStat.updateStatOnConnection("faitCommande"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_9 = false;
							if (faitCommande.quantite == null) {
								pstmt_tDBOutput_9.setNull(1,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_9.setDouble(1,
										faitCommande.quantite);
							}

							if (faitCommande.pu_achat == null) {
								pstmt_tDBOutput_9.setNull(2,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_9.setDouble(2,
										faitCommande.pu_achat);
							}

							if (faitCommande.remise == null) {
								pstmt_tDBOutput_9.setNull(3,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_9.setDouble(3,
										faitCommande.remise);
							}

							pstmt_tDBOutput_9.setInt(4 + count_tDBOutput_9,
									faitCommande.DIM_PRODUITS_idproduits);

							if (faitCommande.DIM_DATE_COMMANDE_iddate == null) {
								pstmt_tDBOutput_9.setNull(
										5 + count_tDBOutput_9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_9.setString(
										5 + count_tDBOutput_9,
										faitCommande.DIM_DATE_COMMANDE_iddate);
							}

							pstmt_tDBOutput_9.setInt(6 + count_tDBOutput_9,
									faitCommande.DIM_PAYS_idpays);

							pstmt_tDBOutput_9
									.setInt(7 + count_tDBOutput_9,
											faitCommande.DIM_FOURNISSEURS_idfournisseurs);

							pstmt_tDBOutput_9.addBatch();
							nb_line_tDBOutput_9++;

							batchSizeCounter_tDBOutput_9++;

							// ////////batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_9 {
								public int limitBytePart1(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_9)
										throws Exception {
									try {

										for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9
												.executeBatch()) {
											if (countEach_tDBOutput_9 == -2
													|| countEach_tDBOutput_9 == -3) {
												break;
											}
											counter += countEach_tDBOutput_9;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_9 = 0;
										for (int countEach_tDBOutput_9 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_9 < 0 ? 0
													: countEach_tDBOutput_9);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_9)
										throws Exception {
									try {

										for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9
												.executeBatch()) {
											if (countEach_tDBOutput_9 == -2
													|| countEach_tDBOutput_9 == -3) {
												break;
											}
											counter += countEach_tDBOutput_9;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_9 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_9 < 0 ? 0
													: countEach_tDBOutput_9);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}
							if ((batchSize_tDBOutput_9 > 0)
									&& (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {

								updatedCount_tDBOutput_9 = new LimitBytesHelper_tDBOutput_9()
										.limitBytePart1(
												updatedCount_tDBOutput_9,
												pstmt_tDBOutput_9);

								batchSizeCounter_tDBOutput_9 = 0;
							}

							// //////////commit every////////////

							commitCounter_tDBOutput_9++;
							if (commitEvery_tDBOutput_9 <= commitCounter_tDBOutput_9) {
								if ((batchSize_tDBOutput_9 > 0)
										&& (batchSizeCounter_tDBOutput_9 > 0)) {

									updatedCount_tDBOutput_9 = new LimitBytesHelper_tDBOutput_9()
											.limitBytePart1(
													updatedCount_tDBOutput_9,
													pstmt_tDBOutput_9);

									batchSizeCounter_tDBOutput_9 = 0;
								}

								conn_tDBOutput_9.commit();

								commitCounter_tDBOutput_9 = 0;
							}

							tos_count_tDBOutput_9++;

							/**
							 * [tDBOutput_9 main ] stop
							 */

							/**
							 * [tDBOutput_9 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_9";

							/**
							 * [tDBOutput_9 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_9 process_data_end ] start
							 */

							currentComponent = "tDBOutput_9";

							/**
							 * [tDBOutput_9 process_data_end ] stop
							 */

						} // End of branch "faitCommande"

						/**
						 * [tMap_9 process_data_end ] start
						 */

						currentComponent = "tMap_9";

						/**
						 * [tMap_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
					if (conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {

						conn_tDBInput_9.close();

					}

				}

				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tDBOutput_9 end ] start
				 */

				currentComponent = "tDBOutput_9";

				try {
					int countSum_tDBOutput_9 = 0;
					if (pstmt_tDBOutput_9 != null
							&& batchSizeCounter_tDBOutput_9 > 0) {

						for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9
								.executeBatch()) {
							if (countEach_tDBOutput_9 == -2
									|| countEach_tDBOutput_9 == -3) {
								break;
							}
							countSum_tDBOutput_9 += countEach_tDBOutput_9;
						}

					}

					updatedCount_tDBOutput_9 += countSum_tDBOutput_9;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_9 = 0;
					for (int countEach_tDBOutput_9 : e.getUpdateCounts()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
								: countEach_tDBOutput_9);
					}

					updatedCount_tDBOutput_9 += countSum_tDBOutput_9;

					System.err.println(e.getMessage());

				}
				if (pstmt_tDBOutput_9 != null) {

					pstmt_tDBOutput_9.close();
					resourceMap.remove("pstmt_tDBOutput_9");

				}
				resourceMap.put("statementClosed_tDBOutput_9", true);
				conn_tDBOutput_9.commit();

				conn_tDBOutput_9.close();
				resourceMap.put("finish_tDBOutput_9", true);

				nb_line_deleted_tDBOutput_9 = nb_line_deleted_tDBOutput_9
						+ deletedCount_tDBOutput_9;
				nb_line_update_tDBOutput_9 = nb_line_update_tDBOutput_9
						+ updatedCount_tDBOutput_9;
				nb_line_inserted_tDBOutput_9 = nb_line_inserted_tDBOutput_9
						+ insertedCount_tDBOutput_9;
				nb_line_rejected_tDBOutput_9 = nb_line_rejected_tDBOutput_9
						+ rejectedCount_tDBOutput_9;

				globalMap.put("tDBOutput_9_NB_LINE", nb_line_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_9);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("faitCommande"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_9", true);
				end_Hash.put("tDBOutput_9", System.currentTimeMillis());

				/**
				 * [tDBOutput_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row14");

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tDBOutput_9 finally ] start
				 */

				currentComponent = "tDBOutput_9";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
						if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_9")) != null) {
							pstmtToClose_tDBOutput_9.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_9") == null) {
						java.sql.Connection ctn_tDBOutput_9 = null;
						if ((ctn_tDBOutput_9 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_9")) != null) {
							try {
								ctn_tDBOutput_9.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_9) {
								String errorMessage_tDBOutput_9 = "failed to close the connection in tDBOutput_9 :"
										+ sqlEx_tDBOutput_9.getMessage();
								System.err.println(errorMessage_tDBOutput_9);
							}
						}
					}
				}

				/**
				 * [tDBOutput_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idfournisseurs;

		public int getIdfournisseurs() {
			return this.idfournisseurs;
		}

		public int idpays;

		public int getIdpays() {
			return this.idpays;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idfournisseurs;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.idfournisseurs != other.idfournisseurs)
				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.idfournisseurs = this.idfournisseurs;
			other.idpays = this.idpays;
			other.nom = this.nom;
			other.adresse = this.adresse;
			other.telephone = this.telephone;
			other.id_user = this.id_user;
			other.est_supprime = this.est_supprime;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.idfournisseurs = this.idfournisseurs;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idfournisseurs = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idfournisseurs);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.idpays = dis.readInt();

				this.nom = readString(dis, ois);

				this.adresse = readString(dis, ois);

				this.telephone = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.id_user = null;
				} else {
					this.id_user = dis.readLong();
				}

				this.est_supprime = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.idpays);

				writeString(this.nom, dos, oos);

				writeString(this.adresse, dos, oos);

				writeString(this.telephone, dos, oos);

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				writeInteger(this.est_supprime, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfournisseurs=" + String.valueOf(idfournisseurs));
			sb.append(",idpays=" + String.valueOf(idpays));
			sb.append(",nom=" + nom);
			sb.append(",adresse=" + adresse);
			sb.append(",telephone=" + telephone);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfournisseurs,
					other.idfournisseurs);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idfournisseurs;

		public int getIdfournisseurs() {
			return this.idfournisseurs;
		}

		public int idpays;

		public int getIdpays() {
			return this.idpays;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idfournisseurs;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.idfournisseurs != other.idfournisseurs)
				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.idfournisseurs = this.idfournisseurs;
			other.idpays = this.idpays;
			other.nom = this.nom;
			other.adresse = this.adresse;
			other.telephone = this.telephone;
			other.id_user = this.id_user;
			other.est_supprime = this.est_supprime;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.idfournisseurs = this.idfournisseurs;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idfournisseurs = dis.readInt();

					this.idpays = dis.readInt();

					this.nom = readString(dis);

					this.adresse = readString(dis);

					this.telephone = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.id_user = null;
					} else {
						this.id_user = dis.readLong();
					}

					this.est_supprime = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idfournisseurs);

				// int

				dos.writeInt(this.idpays);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.adresse, dos);

				// String

				writeString(this.telephone, dos);

				// Long

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				// Integer

				writeInteger(this.est_supprime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfournisseurs=" + String.valueOf(idfournisseurs));
			sb.append(",idpays=" + String.valueOf(idpays));
			sb.append(",nom=" + nom);
			sb.append(",adresse=" + adresse);
			sb.append(",telephone=" + telephone);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfournisseurs,
					other.idfournisseurs);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();
				row14Struct row14 = new row14Struct();

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row14";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row14" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tFilterRow_4 - inputs:(row13)
				// outputs:(row14,row14) | target node:tAdvancedHash_row14 -
				// inputs:(row14) outputs:()
				// linked node: tMap_9 - inputs:(row12,row14)
				// outputs:(faitCommande)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct> getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tFilterRow_4 begin ] start
				 */

				ok_Hash.put("tFilterRow_4", false);
				start_Hash.put("tFilterRow_4", System.currentTimeMillis());

				currentComponent = "tFilterRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row13" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFilterRow_4 = 0;

				int nb_line_tFilterRow_4 = 0;
				int nb_line_ok_tFilterRow_4 = 0;
				int nb_line_reject_tFilterRow_4 = 0;

				class Operator_tFilterRow_4 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_4(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_4 begin ] stop
				 */

				/**
				 * [tDBInput_10 begin ] start
				 */

				ok_Hash.put("tDBInput_10", false);
				start_Hash.put("tDBInput_10", System.currentTimeMillis());

				currentComponent = "tDBInput_10";

				int tos_count_tDBInput_10 = 0;

				java.util.Calendar calendar_tDBInput_10 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_10.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_10 = calendar_tDBInput_10
						.getTime();
				int nb_line_tDBInput_10 = 0;
				java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = "root";

				final String decryptedPassword_tDBInput_10 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;

				String url_tDBInput_10 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_10 = java.sql.DriverManager.getConnection(
						url_tDBInput_10, dbUser_tDBInput_10, dbPwd_tDBInput_10);

				java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10
						.createStatement();

				String dbquery_tDBInput_10 = "SELECT \n  `fournisseurs`.`idfournisseurs`, \n  `fournisseurs`.`idpays`, \n  `fournisseurs`.`nom`, \n  `fournisseurs`.`adre"
						+ "sse`, \n  `fournisseurs`.`telephone`, \n  `fournisseurs`.`id_user`, \n  `fournisseurs`.`est_supprime`\nFROM `fournisseurs`";

				globalMap.put("tDBInput_10_QUERY", dbquery_tDBInput_10);
				java.sql.ResultSet rs_tDBInput_10 = null;

				try {
					rs_tDBInput_10 = stmt_tDBInput_10
							.executeQuery(dbquery_tDBInput_10);
					java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10
							.getMetaData();
					int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10
							.getColumnCount();

					String tmpContent_tDBInput_10 = null;

					while (rs_tDBInput_10.next()) {
						nb_line_tDBInput_10++;

						if (colQtyInRs_tDBInput_10 < 1) {
							row13.idfournisseurs = 0;
						} else {

							if (rs_tDBInput_10.getObject(1) != null) {
								row13.idfournisseurs = rs_tDBInput_10.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_10 < 2) {
							row13.idpays = 0;
						} else {

							if (rs_tDBInput_10.getObject(2) != null) {
								row13.idpays = rs_tDBInput_10.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_10 < 3) {
							row13.nom = null;
						} else {

							row13.nom = routines.system.JDBCUtil.getString(
									rs_tDBInput_10, 3, false);
						}
						if (colQtyInRs_tDBInput_10 < 4) {
							row13.adresse = null;
						} else {

							row13.adresse = routines.system.JDBCUtil.getString(
									rs_tDBInput_10, 4, false);
						}
						if (colQtyInRs_tDBInput_10 < 5) {
							row13.telephone = null;
						} else {

							row13.telephone = routines.system.JDBCUtil
									.getString(rs_tDBInput_10, 5, false);
						}
						if (colQtyInRs_tDBInput_10 < 6) {
							row13.id_user = null;
						} else {

							if (rs_tDBInput_10.getObject(6) != null) {
								row13.id_user = rs_tDBInput_10.getLong(6);
							} else {
								row13.id_user = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 7) {
							row13.est_supprime = null;
						} else {

							if (rs_tDBInput_10.getObject(7) != null) {
								row13.est_supprime = rs_tDBInput_10.getInt(7);
							} else {
								row13.est_supprime = null;
							}
						}

						/**
						 * [tDBInput_10 begin ] stop
						 */

						/**
						 * [tDBInput_10 main ] start
						 */

						currentComponent = "tDBInput_10";

						tos_count_tDBInput_10++;

						/**
						 * [tDBInput_10 main ] stop
						 */

						/**
						 * [tDBInput_10 process_data_begin ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_4 main ] start
						 */

						currentComponent = "tFilterRow_4";

						// row13
						// row13

						if (execStat) {
							runStat.updateStatOnConnection("row13" + iterateId,
									1, 1);
						}

						row14 = null;
						row14 = null;
						Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4(
								"&&");
						ope_tFilterRow_4.matches((row13.est_supprime == null),
								"est_supprime==null failed");

						if (ope_tFilterRow_4.getMatchFlag()) {
							if (row14 == null) {
								row14 = new row14Struct();
							}
							row14.idfournisseurs = row13.idfournisseurs;
							row14.idpays = row13.idpays;
							row14.nom = row13.nom;
							row14.adresse = row13.adresse;
							row14.telephone = row13.telephone;
							row14.id_user = row13.id_user;
							row14.est_supprime = row13.est_supprime;
							if (row14 == null) {
								row14 = new row14Struct();
							}
							row14.idfournisseurs = row13.idfournisseurs;
							row14.idpays = row13.idpays;
							row14.nom = row13.nom;
							row14.adresse = row13.adresse;
							row14.telephone = row13.telephone;
							row14.id_user = row13.id_user;
							row14.est_supprime = row13.est_supprime;
							nb_line_ok_tFilterRow_4++;
						} else {
							nb_line_reject_tFilterRow_4++;
						}

						nb_line_tFilterRow_4++;

						tos_count_tFilterRow_4++;

						/**
						 * [tFilterRow_4 main ] stop
						 */

						/**
						 * [tFilterRow_4 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_4";

						/**
						 * [tFilterRow_4 process_data_begin ] stop
						 */
						// Start of branch "row14"
						if (row14 != null) {

							/**
							 * [tAdvancedHash_row14 main ] start
							 */

							currentComponent = "tAdvancedHash_row14";

							// row14
							// row14

							if (execStat) {
								runStat.updateStatOnConnection("row14"
										+ iterateId, 1, 1);
							}

							row14Struct row14_HashRow = new row14Struct();

							row14_HashRow.idfournisseurs = row14.idfournisseurs;

							row14_HashRow.idpays = row14.idpays;

							row14_HashRow.nom = row14.nom;

							row14_HashRow.adresse = row14.adresse;

							row14_HashRow.telephone = row14.telephone;

							row14_HashRow.id_user = row14.id_user;

							row14_HashRow.est_supprime = row14.est_supprime;

							tHash_Lookup_row14.put(row14_HashRow);

							tos_count_tAdvancedHash_row14++;

							/**
							 * [tAdvancedHash_row14 main ] stop
							 */

							/**
							 * [tAdvancedHash_row14 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row14";

							/**
							 * [tAdvancedHash_row14 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row14 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row14";

							/**
							 * [tAdvancedHash_row14 process_data_end ] stop
							 */

						} // End of branch "row14"

						/**
						 * [tFilterRow_4 process_data_end ] start
						 */

						currentComponent = "tFilterRow_4";

						/**
						 * [tFilterRow_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 process_data_end ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 end ] start
						 */

						currentComponent = "tDBInput_10";

					}
				} finally {
					if (rs_tDBInput_10 != null) {
						rs_tDBInput_10.close();
					}
					if (stmt_tDBInput_10 != null) {
						stmt_tDBInput_10.close();
					}
					if (conn_tDBInput_10 != null
							&& !conn_tDBInput_10.isClosed()) {

						conn_tDBInput_10.close();

					}

				}

				globalMap.put("tDBInput_10_NB_LINE", nb_line_tDBInput_10);

				ok_Hash.put("tDBInput_10", true);
				end_Hash.put("tDBInput_10", System.currentTimeMillis());

				/**
				 * [tDBInput_10 end ] stop
				 */

				/**
				 * [tFilterRow_4 end ] start
				 */

				currentComponent = "tFilterRow_4";

				globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_OK",
						nb_line_ok_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row13" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFilterRow_4", true);
				end_Hash.put("tFilterRow_4", System.currentTimeMillis());

				/**
				 * [tFilterRow_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row14" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_10 finally ] start
				 */

				currentComponent = "tDBInput_10";

				/**
				 * [tDBInput_10 finally ] stop
				 */

				/**
				 * [tFilterRow_4 finally ] start
				 */

				currentComponent = "tFilterRow_4";

				/**
				 * [tFilterRow_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row14 finally ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				/**
				 * [tAdvancedHash_row14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}

	public static class lesLivraisonsStruct implements
			routines.system.IPersistableRow<lesLivraisonsStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idfaitlivraison;

		public int getIdfaitlivraison() {
			return this.idfaitlivraison;
		}

		public String DIM_DATE_LIVRAISON_iddate;

		public String getDIM_DATE_LIVRAISON_iddate() {
			return this.DIM_DATE_LIVRAISON_iddate;
		}

		public int DIM_PRODUITS_idproduits;

		public int getDIM_PRODUITS_idproduits() {
			return this.DIM_PRODUITS_idproduits;
		}

		public int DIM_CLIENTS_idclients;

		public int getDIM_CLIENTS_idclients() {
			return this.DIM_CLIENTS_idclients;
		}

		public Double quantite;

		public Double getQuantite() {
			return this.quantite;
		}

		public Double pu_vente;

		public Double getPu_vente() {
			return this.pu_vente;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idfaitlivraison;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lesLivraisonsStruct other = (lesLivraisonsStruct) obj;

			if (this.idfaitlivraison != other.idfaitlivraison)
				return false;

			return true;
		}

		public void copyDataTo(lesLivraisonsStruct other) {

			other.idfaitlivraison = this.idfaitlivraison;
			other.DIM_DATE_LIVRAISON_iddate = this.DIM_DATE_LIVRAISON_iddate;
			other.DIM_PRODUITS_idproduits = this.DIM_PRODUITS_idproduits;
			other.DIM_CLIENTS_idclients = this.DIM_CLIENTS_idclients;
			other.quantite = this.quantite;
			other.pu_vente = this.pu_vente;

		}

		public void copyKeysDataTo(lesLivraisonsStruct other) {

			other.idfaitlivraison = this.idfaitlivraison;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idfaitlivraison = dis.readInt();

					this.DIM_DATE_LIVRAISON_iddate = readString(dis);

					this.DIM_PRODUITS_idproduits = dis.readInt();

					this.DIM_CLIENTS_idclients = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.quantite = null;
					} else {
						this.quantite = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pu_vente = null;
					} else {
						this.pu_vente = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idfaitlivraison);

				// String

				writeString(this.DIM_DATE_LIVRAISON_iddate, dos);

				// int

				dos.writeInt(this.DIM_PRODUITS_idproduits);

				// int

				dos.writeInt(this.DIM_CLIENTS_idclients);

				// Double

				if (this.quantite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite);
				}

				// Double

				if (this.pu_vente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pu_vente);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfaitlivraison=" + String.valueOf(idfaitlivraison));
			sb.append(",DIM_DATE_LIVRAISON_iddate=" + DIM_DATE_LIVRAISON_iddate);
			sb.append(",DIM_PRODUITS_idproduits="
					+ String.valueOf(DIM_PRODUITS_idproduits));
			sb.append(",DIM_CLIENTS_idclients="
					+ String.valueOf(DIM_CLIENTS_idclients));
			sb.append(",quantite=" + String.valueOf(quantite));
			sb.append(",pu_vente=" + String.valueOf(pu_vente));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lesLivraisonsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfaitlivraison,
					other.idfaitlivraison);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public int idlivraison;

		public int getIdlivraison() {
			return this.idlivraison;
		}

		public long idmonnaie;

		public long getIdmonnaie() {
			return this.idmonnaie;
		}

		public int idproduits;

		public int getIdproduits() {
			return this.idproduits;
		}

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public long idvehicule;

		public long getIdvehicule() {
			return this.idvehicule;
		}

		public long idchauffeurs;

		public long getIdchauffeurs() {
			return this.idchauffeurs;
		}

		public String date_livrai;

		public String getDate_livrai() {
			return this.date_livrai;
		}

		public Double quantite;

		public Double getQuantite() {
			return this.quantite;
		}

		public Double pu_vente;

		public Double getPu_vente() {
			return this.pu_vente;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public Integer idencaisseur;

		public Integer getIdencaisseur() {
			return this.idencaisseur;
		}

		public String destination_livrai;

		public String getDestination_livrai() {
			return this.destination_livrai;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String autre_chauffeur;

		public String getAutre_chauffeur() {
			return this.autre_chauffeur;
		}

		public String autre_vehicule;

		public String getAutre_vehicule() {
			return this.autre_vehicule;
		}

		public Integer validation;

		public Integer getValidation() {
			return this.validation;
		}

		public Integer id_user_validation;

		public Integer getId_user_validation() {
			return this.id_user_validation;
		}

		public Integer id_conversion;

		public Integer getId_conversion() {
			return this.id_conversion;
		}

		public BigDecimal taux_1;

		public BigDecimal getTaux_1() {
			return this.taux_1;
		}

		public BigDecimal taux_2;

		public BigDecimal getTaux_2() {
			return this.taux_2;
		}

		public Integer idfournisseurs;

		public Integer getIdfournisseurs() {
			return this.idfournisseurs;
		}

		public Integer identreprise;

		public Integer getIdentreprise() {
			return this.identreprise;
		}

		public String date_chargement;

		public String getDate_chargement() {
			return this.date_chargement;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idlivraison = dis.readInt();

					this.idmonnaie = dis.readLong();

					this.idproduits = dis.readInt();

					this.idclients = dis.readInt();

					this.idvehicule = dis.readLong();

					this.idchauffeurs = dis.readLong();

					this.date_livrai = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantite = null;
					} else {
						this.quantite = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pu_vente = null;
					} else {
						this.pu_vente = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.id_user = null;
					} else {
						this.id_user = dis.readLong();
					}

					this.idencaisseur = readInteger(dis);

					this.destination_livrai = readString(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.autre_chauffeur = readString(dis);

					this.autre_vehicule = readString(dis);

					this.validation = readInteger(dis);

					this.id_user_validation = readInteger(dis);

					this.id_conversion = readInteger(dis);

					this.taux_1 = (BigDecimal) dis.readObject();

					this.taux_2 = (BigDecimal) dis.readObject();

					this.idfournisseurs = readInteger(dis);

					this.identreprise = readInteger(dis);

					this.date_chargement = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idlivraison);

				// long

				dos.writeLong(this.idmonnaie);

				// int

				dos.writeInt(this.idproduits);

				// int

				dos.writeInt(this.idclients);

				// long

				dos.writeLong(this.idvehicule);

				// long

				dos.writeLong(this.idchauffeurs);

				// String

				writeString(this.date_livrai, dos);

				// Double

				if (this.quantite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite);
				}

				// Double

				if (this.pu_vente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pu_vente);
				}

				// Long

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				// Integer

				writeInteger(this.idencaisseur, dos);

				// String

				writeString(this.destination_livrai, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// String

				writeString(this.autre_chauffeur, dos);

				// String

				writeString(this.autre_vehicule, dos);

				// Integer

				writeInteger(this.validation, dos);

				// Integer

				writeInteger(this.id_user_validation, dos);

				// Integer

				writeInteger(this.id_conversion, dos);

				// BigDecimal

				dos.writeObject(this.taux_1);

				// BigDecimal

				dos.writeObject(this.taux_2);

				// Integer

				writeInteger(this.idfournisseurs, dos);

				// Integer

				writeInteger(this.identreprise, dos);

				// String

				writeString(this.date_chargement, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idlivraison=" + String.valueOf(idlivraison));
			sb.append(",idmonnaie=" + String.valueOf(idmonnaie));
			sb.append(",idproduits=" + String.valueOf(idproduits));
			sb.append(",idclients=" + String.valueOf(idclients));
			sb.append(",idvehicule=" + String.valueOf(idvehicule));
			sb.append(",idchauffeurs=" + String.valueOf(idchauffeurs));
			sb.append(",date_livrai=" + date_livrai);
			sb.append(",quantite=" + String.valueOf(quantite));
			sb.append(",pu_vente=" + String.valueOf(pu_vente));
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",idencaisseur=" + String.valueOf(idencaisseur));
			sb.append(",destination_livrai=" + destination_livrai);
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",autre_chauffeur=" + autre_chauffeur);
			sb.append(",autre_vehicule=" + autre_vehicule);
			sb.append(",validation=" + String.valueOf(validation));
			sb.append(",id_user_validation="
					+ String.valueOf(id_user_validation));
			sb.append(",id_conversion=" + String.valueOf(id_conversion));
			sb.append(",taux_1=" + String.valueOf(taux_1));
			sb.append(",taux_2=" + String.valueOf(taux_2));
			sb.append(",idfournisseurs=" + String.valueOf(idfournisseurs));
			sb.append(",identreprise=" + String.valueOf(identreprise));
			sb.append(",date_chargement=" + date_chargement);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idlivraison;

		public int getIdlivraison() {
			return this.idlivraison;
		}

		public long idmonnaie;

		public long getIdmonnaie() {
			return this.idmonnaie;
		}

		public int idproduits;

		public int getIdproduits() {
			return this.idproduits;
		}

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public long idvehicule;

		public long getIdvehicule() {
			return this.idvehicule;
		}

		public long idchauffeurs;

		public long getIdchauffeurs() {
			return this.idchauffeurs;
		}

		public String date_livrai;

		public String getDate_livrai() {
			return this.date_livrai;
		}

		public Double quantite;

		public Double getQuantite() {
			return this.quantite;
		}

		public Double pu_vente;

		public Double getPu_vente() {
			return this.pu_vente;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public Integer idencaisseur;

		public Integer getIdencaisseur() {
			return this.idencaisseur;
		}

		public String destination_livrai;

		public String getDestination_livrai() {
			return this.destination_livrai;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String autre_chauffeur;

		public String getAutre_chauffeur() {
			return this.autre_chauffeur;
		}

		public String autre_vehicule;

		public String getAutre_vehicule() {
			return this.autre_vehicule;
		}

		public Integer validation;

		public Integer getValidation() {
			return this.validation;
		}

		public Integer id_user_validation;

		public Integer getId_user_validation() {
			return this.id_user_validation;
		}

		public Integer id_conversion;

		public Integer getId_conversion() {
			return this.id_conversion;
		}

		public BigDecimal taux_1;

		public BigDecimal getTaux_1() {
			return this.taux_1;
		}

		public BigDecimal taux_2;

		public BigDecimal getTaux_2() {
			return this.taux_2;
		}

		public Integer idfournisseurs;

		public Integer getIdfournisseurs() {
			return this.idfournisseurs;
		}

		public Integer identreprise;

		public Integer getIdentreprise() {
			return this.identreprise;
		}

		public String date_chargement;

		public String getDate_chargement() {
			return this.date_chargement;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idlivraison;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.idlivraison != other.idlivraison)
				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.idlivraison = this.idlivraison;
			other.idmonnaie = this.idmonnaie;
			other.idproduits = this.idproduits;
			other.idclients = this.idclients;
			other.idvehicule = this.idvehicule;
			other.idchauffeurs = this.idchauffeurs;
			other.date_livrai = this.date_livrai;
			other.quantite = this.quantite;
			other.pu_vente = this.pu_vente;
			other.id_user = this.id_user;
			other.idencaisseur = this.idencaisseur;
			other.destination_livrai = this.destination_livrai;
			other.date_creation = this.date_creation;
			other.date_last_modif = this.date_last_modif;
			other.est_supprime = this.est_supprime;
			other.autre_chauffeur = this.autre_chauffeur;
			other.autre_vehicule = this.autre_vehicule;
			other.validation = this.validation;
			other.id_user_validation = this.id_user_validation;
			other.id_conversion = this.id_conversion;
			other.taux_1 = this.taux_1;
			other.taux_2 = this.taux_2;
			other.idfournisseurs = this.idfournisseurs;
			other.identreprise = this.identreprise;
			other.date_chargement = this.date_chargement;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.idlivraison = this.idlivraison;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idlivraison = dis.readInt();

					this.idmonnaie = dis.readLong();

					this.idproduits = dis.readInt();

					this.idclients = dis.readInt();

					this.idvehicule = dis.readLong();

					this.idchauffeurs = dis.readLong();

					this.date_livrai = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantite = null;
					} else {
						this.quantite = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pu_vente = null;
					} else {
						this.pu_vente = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.id_user = null;
					} else {
						this.id_user = dis.readLong();
					}

					this.idencaisseur = readInteger(dis);

					this.destination_livrai = readString(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.autre_chauffeur = readString(dis);

					this.autre_vehicule = readString(dis);

					this.validation = readInteger(dis);

					this.id_user_validation = readInteger(dis);

					this.id_conversion = readInteger(dis);

					this.taux_1 = (BigDecimal) dis.readObject();

					this.taux_2 = (BigDecimal) dis.readObject();

					this.idfournisseurs = readInteger(dis);

					this.identreprise = readInteger(dis);

					this.date_chargement = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idlivraison);

				// long

				dos.writeLong(this.idmonnaie);

				// int

				dos.writeInt(this.idproduits);

				// int

				dos.writeInt(this.idclients);

				// long

				dos.writeLong(this.idvehicule);

				// long

				dos.writeLong(this.idchauffeurs);

				// String

				writeString(this.date_livrai, dos);

				// Double

				if (this.quantite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite);
				}

				// Double

				if (this.pu_vente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pu_vente);
				}

				// Long

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				// Integer

				writeInteger(this.idencaisseur, dos);

				// String

				writeString(this.destination_livrai, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// String

				writeString(this.autre_chauffeur, dos);

				// String

				writeString(this.autre_vehicule, dos);

				// Integer

				writeInteger(this.validation, dos);

				// Integer

				writeInteger(this.id_user_validation, dos);

				// Integer

				writeInteger(this.id_conversion, dos);

				// BigDecimal

				dos.writeObject(this.taux_1);

				// BigDecimal

				dos.writeObject(this.taux_2);

				// Integer

				writeInteger(this.idfournisseurs, dos);

				// Integer

				writeInteger(this.identreprise, dos);

				// String

				writeString(this.date_chargement, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idlivraison=" + String.valueOf(idlivraison));
			sb.append(",idmonnaie=" + String.valueOf(idmonnaie));
			sb.append(",idproduits=" + String.valueOf(idproduits));
			sb.append(",idclients=" + String.valueOf(idclients));
			sb.append(",idvehicule=" + String.valueOf(idvehicule));
			sb.append(",idchauffeurs=" + String.valueOf(idchauffeurs));
			sb.append(",date_livrai=" + date_livrai);
			sb.append(",quantite=" + String.valueOf(quantite));
			sb.append(",pu_vente=" + String.valueOf(pu_vente));
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",idencaisseur=" + String.valueOf(idencaisseur));
			sb.append(",destination_livrai=" + destination_livrai);
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",autre_chauffeur=" + autre_chauffeur);
			sb.append(",autre_vehicule=" + autre_vehicule);
			sb.append(",validation=" + String.valueOf(validation));
			sb.append(",id_user_validation="
					+ String.valueOf(id_user_validation));
			sb.append(",id_conversion=" + String.valueOf(id_conversion));
			sb.append(",taux_1=" + String.valueOf(taux_1));
			sb.append(",taux_2=" + String.valueOf(taux_2));
			sb.append(",idfournisseurs=" + String.valueOf(idfournisseurs));
			sb.append(",identreprise=" + String.valueOf(identreprise));
			sb.append(",date_chargement=" + date_chargement);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idlivraison,
					other.idlivraison);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_11Struct implements
			routines.system.IPersistableRow<after_tDBInput_11Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idlivraison;

		public int getIdlivraison() {
			return this.idlivraison;
		}

		public long idmonnaie;

		public long getIdmonnaie() {
			return this.idmonnaie;
		}

		public int idproduits;

		public int getIdproduits() {
			return this.idproduits;
		}

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public long idvehicule;

		public long getIdvehicule() {
			return this.idvehicule;
		}

		public long idchauffeurs;

		public long getIdchauffeurs() {
			return this.idchauffeurs;
		}

		public String date_livrai;

		public String getDate_livrai() {
			return this.date_livrai;
		}

		public Double quantite;

		public Double getQuantite() {
			return this.quantite;
		}

		public Double pu_vente;

		public Double getPu_vente() {
			return this.pu_vente;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public Integer idencaisseur;

		public Integer getIdencaisseur() {
			return this.idencaisseur;
		}

		public String destination_livrai;

		public String getDestination_livrai() {
			return this.destination_livrai;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String autre_chauffeur;

		public String getAutre_chauffeur() {
			return this.autre_chauffeur;
		}

		public String autre_vehicule;

		public String getAutre_vehicule() {
			return this.autre_vehicule;
		}

		public Integer validation;

		public Integer getValidation() {
			return this.validation;
		}

		public Integer id_user_validation;

		public Integer getId_user_validation() {
			return this.id_user_validation;
		}

		public Integer id_conversion;

		public Integer getId_conversion() {
			return this.id_conversion;
		}

		public BigDecimal taux_1;

		public BigDecimal getTaux_1() {
			return this.taux_1;
		}

		public BigDecimal taux_2;

		public BigDecimal getTaux_2() {
			return this.taux_2;
		}

		public Integer idfournisseurs;

		public Integer getIdfournisseurs() {
			return this.idfournisseurs;
		}

		public Integer identreprise;

		public Integer getIdentreprise() {
			return this.identreprise;
		}

		public String date_chargement;

		public String getDate_chargement() {
			return this.date_chargement;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idlivraison;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_11Struct other = (after_tDBInput_11Struct) obj;

			if (this.idlivraison != other.idlivraison)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_11Struct other) {

			other.idlivraison = this.idlivraison;
			other.idmonnaie = this.idmonnaie;
			other.idproduits = this.idproduits;
			other.idclients = this.idclients;
			other.idvehicule = this.idvehicule;
			other.idchauffeurs = this.idchauffeurs;
			other.date_livrai = this.date_livrai;
			other.quantite = this.quantite;
			other.pu_vente = this.pu_vente;
			other.id_user = this.id_user;
			other.idencaisseur = this.idencaisseur;
			other.destination_livrai = this.destination_livrai;
			other.date_creation = this.date_creation;
			other.date_last_modif = this.date_last_modif;
			other.est_supprime = this.est_supprime;
			other.autre_chauffeur = this.autre_chauffeur;
			other.autre_vehicule = this.autre_vehicule;
			other.validation = this.validation;
			other.id_user_validation = this.id_user_validation;
			other.id_conversion = this.id_conversion;
			other.taux_1 = this.taux_1;
			other.taux_2 = this.taux_2;
			other.idfournisseurs = this.idfournisseurs;
			other.identreprise = this.identreprise;
			other.date_chargement = this.date_chargement;

		}

		public void copyKeysDataTo(after_tDBInput_11Struct other) {

			other.idlivraison = this.idlivraison;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idlivraison = dis.readInt();

					this.idmonnaie = dis.readLong();

					this.idproduits = dis.readInt();

					this.idclients = dis.readInt();

					this.idvehicule = dis.readLong();

					this.idchauffeurs = dis.readLong();

					this.date_livrai = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantite = null;
					} else {
						this.quantite = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pu_vente = null;
					} else {
						this.pu_vente = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.id_user = null;
					} else {
						this.id_user = dis.readLong();
					}

					this.idencaisseur = readInteger(dis);

					this.destination_livrai = readString(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.autre_chauffeur = readString(dis);

					this.autre_vehicule = readString(dis);

					this.validation = readInteger(dis);

					this.id_user_validation = readInteger(dis);

					this.id_conversion = readInteger(dis);

					this.taux_1 = (BigDecimal) dis.readObject();

					this.taux_2 = (BigDecimal) dis.readObject();

					this.idfournisseurs = readInteger(dis);

					this.identreprise = readInteger(dis);

					this.date_chargement = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idlivraison);

				// long

				dos.writeLong(this.idmonnaie);

				// int

				dos.writeInt(this.idproduits);

				// int

				dos.writeInt(this.idclients);

				// long

				dos.writeLong(this.idvehicule);

				// long

				dos.writeLong(this.idchauffeurs);

				// String

				writeString(this.date_livrai, dos);

				// Double

				if (this.quantite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite);
				}

				// Double

				if (this.pu_vente == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.pu_vente);
				}

				// Long

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				// Integer

				writeInteger(this.idencaisseur, dos);

				// String

				writeString(this.destination_livrai, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// String

				writeString(this.autre_chauffeur, dos);

				// String

				writeString(this.autre_vehicule, dos);

				// Integer

				writeInteger(this.validation, dos);

				// Integer

				writeInteger(this.id_user_validation, dos);

				// Integer

				writeInteger(this.id_conversion, dos);

				// BigDecimal

				dos.writeObject(this.taux_1);

				// BigDecimal

				dos.writeObject(this.taux_2);

				// Integer

				writeInteger(this.idfournisseurs, dos);

				// Integer

				writeInteger(this.identreprise, dos);

				// String

				writeString(this.date_chargement, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idlivraison=" + String.valueOf(idlivraison));
			sb.append(",idmonnaie=" + String.valueOf(idmonnaie));
			sb.append(",idproduits=" + String.valueOf(idproduits));
			sb.append(",idclients=" + String.valueOf(idclients));
			sb.append(",idvehicule=" + String.valueOf(idvehicule));
			sb.append(",idchauffeurs=" + String.valueOf(idchauffeurs));
			sb.append(",date_livrai=" + date_livrai);
			sb.append(",quantite=" + String.valueOf(quantite));
			sb.append(",pu_vente=" + String.valueOf(pu_vente));
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",idencaisseur=" + String.valueOf(idencaisseur));
			sb.append(",destination_livrai=" + destination_livrai);
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",autre_chauffeur=" + autre_chauffeur);
			sb.append(",autre_vehicule=" + autre_vehicule);
			sb.append(",validation=" + String.valueOf(validation));
			sb.append(",id_user_validation="
					+ String.valueOf(id_user_validation));
			sb.append(",id_conversion=" + String.valueOf(id_conversion));
			sb.append(",taux_1=" + String.valueOf(taux_1));
			sb.append(",taux_2=" + String.valueOf(taux_2));
			sb.append(",idfournisseurs=" + String.valueOf(idfournisseurs));
			sb.append(",identreprise=" + String.valueOf(identreprise));
			sb.append(",date_chargement=" + date_chargement);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idlivraison,
					other.idlivraison);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_13Process(globalMap);

				row15Struct row15 = new row15Struct();
				row17Struct row17 = new row17Struct();
				lesLivraisonsStruct lesLivraisons = new lesLivraisonsStruct();

				/**
				 * [tDBOutput_10 begin ] start
				 */

				ok_Hash.put("tDBOutput_10", false);
				start_Hash.put("tDBOutput_10", System.currentTimeMillis());

				currentComponent = "tDBOutput_10";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lesLivraisons"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_10 = 0;

				int nb_line_tDBOutput_10 = 0;
				int nb_line_update_tDBOutput_10 = 0;
				int nb_line_inserted_tDBOutput_10 = 0;
				int nb_line_deleted_tDBOutput_10 = 0;
				int nb_line_rejected_tDBOutput_10 = 0;

				int deletedCount_tDBOutput_10 = 0;
				int updatedCount_tDBOutput_10 = 0;
				int insertedCount_tDBOutput_10 = 0;
				int rejectedCount_tDBOutput_10 = 0;
				String dbschema_tDBOutput_10 = null;
				String tableName_tDBOutput_10 = null;
				boolean whetherReject_tDBOutput_10 = false;

				java.util.Calendar calendar_tDBOutput_10 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_10 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_10 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_10 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_10;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_10 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_10 = 1;
				if (insertKeyCount_tDBOutput_10 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_10 = null;
				String dbUser_tDBOutput_10 = null;
				dbschema_tDBOutput_10 = "dbo";
				String driverClass_tDBOutput_10 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_10);
				String port_tDBOutput_10 = "1433";
				String dbname_tDBOutput_10 = "PROJET_DW";
				String url_tDBOutput_10 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_10)) {
					url_tDBOutput_10 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_10)) {
					url_tDBOutput_10 += "//" + "PROJET_DW";

				}
				url_tDBOutput_10 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_10 = "sa";

				final String decryptedPassword_tDBOutput_10 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_10 = decryptedPassword_tDBOutput_10;
				conn_tDBOutput_10 = java.sql.DriverManager.getConnection(
						url_tDBOutput_10, dbUser_tDBOutput_10,
						dbPwd_tDBOutput_10);

				resourceMap.put("conn_tDBOutput_10", conn_tDBOutput_10);

				conn_tDBOutput_10.setAutoCommit(false);
				int commitEvery_tDBOutput_10 = 10000;
				int commitCounter_tDBOutput_10 = 0;

				if (dbschema_tDBOutput_10 == null
						|| dbschema_tDBOutput_10.trim().length() == 0) {
					tableName_tDBOutput_10 = "FAIT_LIVRAISON";
				} else {
					tableName_tDBOutput_10 = dbschema_tDBOutput_10 + "].["
							+ "FAIT_LIVRAISON";
				}
				int count_tDBOutput_10 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_10
								+ "] WHERE [idfaitlivraison] = ?");
				resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);
				String insert_tDBOutput_10 = "INSERT INTO ["
						+ tableName_tDBOutput_10
						+ "] ([idfaitlivraison],[DIM_DATE_LIVRAISON_iddate],[DIM_PRODUITS_idproduits],[DIM_CLIENTS_idclients],[quantite],[pu_vente]) VALUES (?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_10 = conn_tDBOutput_10
						.prepareStatement(insert_tDBOutput_10);
				resourceMap.put("pstmtInsert_tDBOutput_10",
						pstmtInsert_tDBOutput_10);

				/**
				 * [tDBOutput_10 begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row17" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_10 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) globalMap
						.get("tHash_Lookup_row19"));

				row19Struct row19HashKey = new row19Struct();
				row19Struct row19Default = new row19Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lesLivraisonsStruct lesLivraisons_tmp = new lesLivraisonsStruct();
				// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tFilterRow_5 begin ] start
				 */

				ok_Hash.put("tFilterRow_5", false);
				start_Hash.put("tFilterRow_5", System.currentTimeMillis());

				currentComponent = "tFilterRow_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row15" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFilterRow_5 = 0;

				int nb_line_tFilterRow_5 = 0;
				int nb_line_ok_tFilterRow_5 = 0;
				int nb_line_reject_tFilterRow_5 = 0;

				class Operator_tFilterRow_5 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_5(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_5 begin ] stop
				 */

				/**
				 * [tDBInput_11 begin ] start
				 */

				ok_Hash.put("tDBInput_11", false);
				start_Hash.put("tDBInput_11", System.currentTimeMillis());

				currentComponent = "tDBInput_11";

				int tos_count_tDBInput_11 = 0;

				java.util.Calendar calendar_tDBInput_11 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_11.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_11 = calendar_tDBInput_11
						.getTime();
				int nb_line_tDBInput_11 = 0;
				java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = "root";

				final String decryptedPassword_tDBInput_11 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;

				String url_tDBInput_11 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_11 = java.sql.DriverManager.getConnection(
						url_tDBInput_11, dbUser_tDBInput_11, dbPwd_tDBInput_11);

				java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11
						.createStatement();

				String dbquery_tDBInput_11 = "SELECT \n  `livraison`.`idlivraison`, \n  `livraison`.`idmonnaie`, \n  `livraison`.`idproduits`, \n  `livraison`.`idclients"
						+ "`, \n  `livraison`.`idvehicule`, \n  `livraison`.`idchauffeurs`, \n DATE_FORMAT(STR_TO_DATE(REPLACE(date_livrai,'-','/'), '"
						+ "%d/%m/%Y' ), '%d/%m/%Y')  as date_livrai, \n  `livraison`.`quantite`, \n  `livraison`.`pu_vente`, \n  `livraison`.`id_user`"
						+ ", \n  `livraison`.`idencaisseur`, \n  `livraison`.`destination_livrai`, \n  `livraison`.`date_creation`, \n  `livraison`.`da"
						+ "te_last_modif`, \n  `livraison`.`est_supprime`, \n  `livraison`.`autre_chauffeur`, \n  `livraison`.`autre_vehicule`, \n  `li"
						+ "vraison`.`validation`, \n  `livraison`.`id_user_validation`, \n  `livraison`.`id_conversion`, \n  `livraison`.`taux_1`, \n  "
						+ "`livraison`.`taux_2`, \n  `livraison`.`idfournisseurs`, \n  `livraison`.`identreprise`, \n  `livraison`.`date_chargement`\nF"
						+ "ROM `livraison`";

				globalMap.put("tDBInput_11_QUERY", dbquery_tDBInput_11);
				java.sql.ResultSet rs_tDBInput_11 = null;

				try {
					rs_tDBInput_11 = stmt_tDBInput_11
							.executeQuery(dbquery_tDBInput_11);
					java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11
							.getMetaData();
					int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11
							.getColumnCount();

					String tmpContent_tDBInput_11 = null;

					while (rs_tDBInput_11.next()) {
						nb_line_tDBInput_11++;

						if (colQtyInRs_tDBInput_11 < 1) {
							row15.idlivraison = 0;
						} else {

							if (rs_tDBInput_11.getObject(1) != null) {
								row15.idlivraison = rs_tDBInput_11.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 2) {
							row15.idmonnaie = 0;
						} else {

							if (rs_tDBInput_11.getObject(2) != null) {
								row15.idmonnaie = rs_tDBInput_11.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 3) {
							row15.idproduits = 0;
						} else {

							if (rs_tDBInput_11.getObject(3) != null) {
								row15.idproduits = rs_tDBInput_11.getInt(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 4) {
							row15.idclients = 0;
						} else {

							if (rs_tDBInput_11.getObject(4) != null) {
								row15.idclients = rs_tDBInput_11.getInt(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 5) {
							row15.idvehicule = 0;
						} else {

							if (rs_tDBInput_11.getObject(5) != null) {
								row15.idvehicule = rs_tDBInput_11.getLong(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 6) {
							row15.idchauffeurs = 0;
						} else {

							if (rs_tDBInput_11.getObject(6) != null) {
								row15.idchauffeurs = rs_tDBInput_11.getLong(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 7) {
							row15.date_livrai = null;
						} else {

							row15.date_livrai = routines.system.JDBCUtil
									.getString(rs_tDBInput_11, 7, false);
						}
						if (colQtyInRs_tDBInput_11 < 8) {
							row15.quantite = null;
						} else {

							if (rs_tDBInput_11.getObject(8) != null) {
								row15.quantite = rs_tDBInput_11.getDouble(8);
							} else {
								row15.quantite = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 9) {
							row15.pu_vente = null;
						} else {

							if (rs_tDBInput_11.getObject(9) != null) {
								row15.pu_vente = rs_tDBInput_11.getDouble(9);
							} else {
								row15.pu_vente = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 10) {
							row15.id_user = null;
						} else {

							if (rs_tDBInput_11.getObject(10) != null) {
								row15.id_user = rs_tDBInput_11.getLong(10);
							} else {
								row15.id_user = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 11) {
							row15.idencaisseur = null;
						} else {

							if (rs_tDBInput_11.getObject(11) != null) {
								row15.idencaisseur = rs_tDBInput_11.getInt(11);
							} else {
								row15.idencaisseur = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 12) {
							row15.destination_livrai = null;
						} else {

							row15.destination_livrai = routines.system.JDBCUtil
									.getString(rs_tDBInput_11, 12, false);
						}
						if (colQtyInRs_tDBInput_11 < 13) {
							row15.date_creation = null;
						} else {

							if (rs_tDBInput_11.getString(13) != null) {
								String dateString_tDBInput_11 = rs_tDBInput_11
										.getString(13);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_11)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_11)) {
									row15.date_creation = rs_tDBInput_11
											.getTimestamp(13);
								} else {
									row15.date_creation = (java.util.Date) year0_tDBInput_11
											.clone();
								}
							} else {
								row15.date_creation = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 14) {
							row15.date_last_modif = null;
						} else {

							if (rs_tDBInput_11.getString(14) != null) {
								String dateString_tDBInput_11 = rs_tDBInput_11
										.getString(14);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_11)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_11)) {
									row15.date_last_modif = rs_tDBInput_11
											.getTimestamp(14);
								} else {
									row15.date_last_modif = (java.util.Date) year0_tDBInput_11
											.clone();
								}
							} else {
								row15.date_last_modif = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 15) {
							row15.est_supprime = null;
						} else {

							if (rs_tDBInput_11.getObject(15) != null) {
								row15.est_supprime = rs_tDBInput_11.getInt(15);
							} else {
								row15.est_supprime = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 16) {
							row15.autre_chauffeur = null;
						} else {

							row15.autre_chauffeur = routines.system.JDBCUtil
									.getString(rs_tDBInput_11, 16, false);
						}
						if (colQtyInRs_tDBInput_11 < 17) {
							row15.autre_vehicule = null;
						} else {

							row15.autre_vehicule = routines.system.JDBCUtil
									.getString(rs_tDBInput_11, 17, false);
						}
						if (colQtyInRs_tDBInput_11 < 18) {
							row15.validation = null;
						} else {

							if (rs_tDBInput_11.getObject(18) != null) {
								row15.validation = rs_tDBInput_11.getInt(18);
							} else {
								row15.validation = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 19) {
							row15.id_user_validation = null;
						} else {

							if (rs_tDBInput_11.getObject(19) != null) {
								row15.id_user_validation = rs_tDBInput_11
										.getInt(19);
							} else {
								row15.id_user_validation = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 20) {
							row15.id_conversion = null;
						} else {

							if (rs_tDBInput_11.getObject(20) != null) {
								row15.id_conversion = rs_tDBInput_11.getInt(20);
							} else {
								row15.id_conversion = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 21) {
							row15.taux_1 = null;
						} else {

							if (rs_tDBInput_11.getObject(21) != null) {
								row15.taux_1 = rs_tDBInput_11.getBigDecimal(21);
							} else {
								row15.taux_1 = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 22) {
							row15.taux_2 = null;
						} else {

							if (rs_tDBInput_11.getObject(22) != null) {
								row15.taux_2 = rs_tDBInput_11.getBigDecimal(22);
							} else {
								row15.taux_2 = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 23) {
							row15.idfournisseurs = null;
						} else {

							if (rs_tDBInput_11.getObject(23) != null) {
								row15.idfournisseurs = rs_tDBInput_11
										.getInt(23);
							} else {
								row15.idfournisseurs = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 24) {
							row15.identreprise = null;
						} else {

							if (rs_tDBInput_11.getObject(24) != null) {
								row15.identreprise = rs_tDBInput_11.getInt(24);
							} else {
								row15.identreprise = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 25) {
							row15.date_chargement = null;
						} else {

							row15.date_chargement = routines.system.JDBCUtil
									.getString(rs_tDBInput_11, 25, false);
						}

						/**
						 * [tDBInput_11 begin ] stop
						 */

						/**
						 * [tDBInput_11 main ] start
						 */

						currentComponent = "tDBInput_11";

						tos_count_tDBInput_11++;

						/**
						 * [tDBInput_11 main ] stop
						 */

						/**
						 * [tDBInput_11 process_data_begin ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_5 main ] start
						 */

						currentComponent = "tFilterRow_5";

						// row15
						// row15

						if (execStat) {
							runStat.updateStatOnConnection("row15" + iterateId,
									1, 1);
						}

						row17 = null;
						Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5(
								"&&");
						ope_tFilterRow_5.matches((row15.est_supprime == null),
								"est_supprime==null failed");

						if (ope_tFilterRow_5.getMatchFlag()) {
							if (row17 == null) {
								row17 = new row17Struct();
							}
							row17.idlivraison = row15.idlivraison;
							row17.idmonnaie = row15.idmonnaie;
							row17.idproduits = row15.idproduits;
							row17.idclients = row15.idclients;
							row17.idvehicule = row15.idvehicule;
							row17.idchauffeurs = row15.idchauffeurs;
							row17.date_livrai = row15.date_livrai;
							row17.quantite = row15.quantite;
							row17.pu_vente = row15.pu_vente;
							row17.id_user = row15.id_user;
							row17.idencaisseur = row15.idencaisseur;
							row17.destination_livrai = row15.destination_livrai;
							row17.date_creation = row15.date_creation;
							row17.date_last_modif = row15.date_last_modif;
							row17.est_supprime = row15.est_supprime;
							row17.autre_chauffeur = row15.autre_chauffeur;
							row17.autre_vehicule = row15.autre_vehicule;
							row17.validation = row15.validation;
							row17.id_user_validation = row15.id_user_validation;
							row17.id_conversion = row15.id_conversion;
							row17.taux_1 = row15.taux_1;
							row17.taux_2 = row15.taux_2;
							row17.idfournisseurs = row15.idfournisseurs;
							row17.identreprise = row15.identreprise;
							row17.date_chargement = row15.date_chargement;
							nb_line_ok_tFilterRow_5++;
						} else {
							nb_line_reject_tFilterRow_5++;
						}

						nb_line_tFilterRow_5++;

						tos_count_tFilterRow_5++;

						/**
						 * [tFilterRow_5 main ] stop
						 */

						/**
						 * [tFilterRow_5 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_5";

						/**
						 * [tFilterRow_5 process_data_begin ] stop
						 */
						// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tMap_10 main ] start
							 */

							currentComponent = "tMap_10";

							// row17
							// row17

							if (execStat) {
								runStat.updateStatOnConnection("row17"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_10 = false;
							boolean mainRowRejected_tMap_10 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row19"
							// /////////////////////////////////////////////

							boolean forceLooprow19 = false;

							row19Struct row19ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								tHash_Lookup_row19.lookup(row19HashKey);

								if (!tHash_Lookup_row19.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_10 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row19 != null
									&& tHash_Lookup_row19
											.getCount(row19HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys : ");
							} // G 071

							row19Struct row19 = null;

							row19Struct fromLookup_row19 = null;
							row19 = row19Default;

							if (tHash_Lookup_row19 != null
									&& tHash_Lookup_row19.hasNext()) { // G 099

								fromLookup_row19 = tHash_Lookup_row19.next();

							} // G 099

							if (fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
								// ###############################
								// # Output tables

								lesLivraisons = null;

								if (!rejectedInnerJoin_tMap_10) {

									// # Output table : 'lesLivraisons'
									lesLivraisons_tmp.idfaitlivraison = row17.idlivraison;
									lesLivraisons_tmp.DIM_DATE_LIVRAISON_iddate = row17.date_livrai;
									lesLivraisons_tmp.DIM_PRODUITS_idproduits = row17.idproduits;
									lesLivraisons_tmp.DIM_CLIENTS_idclients = row17.idclients;
									lesLivraisons_tmp.quantite = row17.quantite;
									lesLivraisons_tmp.pu_vente = row17.pu_vente;
									lesLivraisons = lesLivraisons_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_10 = false;

							tos_count_tMap_10++;

							/**
							 * [tMap_10 main ] stop
							 */

							/**
							 * [tMap_10 process_data_begin ] start
							 */

							currentComponent = "tMap_10";

							/**
							 * [tMap_10 process_data_begin ] stop
							 */
							// Start of branch "lesLivraisons"
							if (lesLivraisons != null) {

								/**
								 * [tDBOutput_10 main ] start
								 */

								currentComponent = "tDBOutput_10";

								// lesLivraisons
								// lesLivraisons

								if (execStat) {
									runStat.updateStatOnConnection(
											"lesLivraisons" + iterateId, 1, 1);
								}

								whetherReject_tDBOutput_10 = false;

								pstmt_tDBOutput_10.setInt(1,
										lesLivraisons.idfaitlivraison);

								java.sql.ResultSet rs_tDBOutput_10 = pstmt_tDBOutput_10
										.executeQuery();
								int checkCount_tDBOutput_10 = -1;
								while (rs_tDBOutput_10.next()) {
									checkCount_tDBOutput_10 = rs_tDBOutput_10
											.getInt(1);
								}

								if (checkCount_tDBOutput_10 < 1) {
									pstmtInsert_tDBOutput_10.setInt(1,
											lesLivraisons.idfaitlivraison);

									if (lesLivraisons.DIM_DATE_LIVRAISON_iddate == null) {
										pstmtInsert_tDBOutput_10.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_10
												.setString(
														2,
														lesLivraisons.DIM_DATE_LIVRAISON_iddate);
									}

									pstmtInsert_tDBOutput_10
											.setInt(3,
													lesLivraisons.DIM_PRODUITS_idproduits);

									pstmtInsert_tDBOutput_10
											.setInt(4,
													lesLivraisons.DIM_CLIENTS_idclients);

									if (lesLivraisons.quantite == null) {
										pstmtInsert_tDBOutput_10.setNull(5,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_10.setDouble(5,
												lesLivraisons.quantite);
									}

									if (lesLivraisons.pu_vente == null) {
										pstmtInsert_tDBOutput_10.setNull(6,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_10.setDouble(6,
												lesLivraisons.pu_vente);
									}

									try {
										insertedCount_tDBOutput_10 = insertedCount_tDBOutput_10
												+ pstmtInsert_tDBOutput_10
														.executeUpdate();
										nb_line_tDBOutput_10++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_10 = true;
										nb_line_tDBOutput_10++;

										System.err.print(e.getMessage());
									}
								}
								// ////////batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_10 {
									public int limitBytePart1(
											int counter,
											java.sql.PreparedStatement pstmt_tDBOutput_10)
											throws Exception {
										try {

											for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10
													.executeBatch()) {
												if (countEach_tDBOutput_10 == -2
														|| countEach_tDBOutput_10 == -3) {
													break;
												}
												counter += countEach_tDBOutput_10;
											}

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tDBOutput_10 = 0;
											for (int countEach_tDBOutput_10 : e
													.getUpdateCounts()) {
												counter += (countEach_tDBOutput_10 < 0 ? 0
														: countEach_tDBOutput_10);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(
											int counter,
											java.sql.PreparedStatement pstmt_tDBOutput_10)
											throws Exception {
										try {

											for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10
													.executeBatch()) {
												if (countEach_tDBOutput_10 == -2
														|| countEach_tDBOutput_10 == -3) {
													break;
												}
												counter += countEach_tDBOutput_10;
											}

										} catch (java.sql.BatchUpdateException e) {

											for (int countEach_tDBOutput_10 : e
													.getUpdateCounts()) {
												counter += (countEach_tDBOutput_10 < 0 ? 0
														: countEach_tDBOutput_10);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								// //////////commit every////////////

								commitCounter_tDBOutput_10++;
								if (commitEvery_tDBOutput_10 <= commitCounter_tDBOutput_10) {

									conn_tDBOutput_10.commit();

									commitCounter_tDBOutput_10 = 0;
								}

								tos_count_tDBOutput_10++;

								/**
								 * [tDBOutput_10 main ] stop
								 */

								/**
								 * [tDBOutput_10 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_10";

								/**
								 * [tDBOutput_10 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_10 process_data_end ] start
								 */

								currentComponent = "tDBOutput_10";

								/**
								 * [tDBOutput_10 process_data_end ] stop
								 */

							} // End of branch "lesLivraisons"

							/**
							 * [tMap_10 process_data_end ] start
							 */

							currentComponent = "tMap_10";

							/**
							 * [tMap_10 process_data_end ] stop
							 */

						} // End of branch "row17"

						/**
						 * [tFilterRow_5 process_data_end ] start
						 */

						currentComponent = "tFilterRow_5";

						/**
						 * [tFilterRow_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 process_data_end ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 end ] start
						 */

						currentComponent = "tDBInput_11";

					}
				} finally {
					if (rs_tDBInput_11 != null) {
						rs_tDBInput_11.close();
					}
					if (stmt_tDBInput_11 != null) {
						stmt_tDBInput_11.close();
					}
					if (conn_tDBInput_11 != null
							&& !conn_tDBInput_11.isClosed()) {

						conn_tDBInput_11.close();

					}

				}

				globalMap.put("tDBInput_11_NB_LINE", nb_line_tDBInput_11);

				ok_Hash.put("tDBInput_11", true);
				end_Hash.put("tDBInput_11", System.currentTimeMillis());

				/**
				 * [tDBInput_11 end ] stop
				 */

				/**
				 * [tFilterRow_5 end ] start
				 */

				currentComponent = "tFilterRow_5";

				globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
				globalMap.put("tFilterRow_5_NB_LINE_OK",
						nb_line_ok_tFilterRow_5);
				globalMap.put("tFilterRow_5_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row15" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFilterRow_5", true);
				end_Hash.put("tFilterRow_5", System.currentTimeMillis());

				/**
				 * [tFilterRow_5 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row19 != null) {
					tHash_Lookup_row19.endGet();
				}
				globalMap.remove("tHash_Lookup_row19");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row17" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tDBOutput_10 end ] start
				 */

				currentComponent = "tDBOutput_10";

				if (pstmtInsert_tDBOutput_10 != null) {
					pstmtInsert_tDBOutput_10.close();
					resourceMap.remove("pstmtInsert_tDBOutput_10");
				}
				if (pstmt_tDBOutput_10 != null) {
					pstmt_tDBOutput_10.close();
					resourceMap.remove("pstmt_tDBOutput_10");
				}
				resourceMap.put("statementClosed_tDBOutput_10", true);
				conn_tDBOutput_10.commit();

				conn_tDBOutput_10.close();
				resourceMap.put("finish_tDBOutput_10", true);

				nb_line_deleted_tDBOutput_10 = nb_line_deleted_tDBOutput_10
						+ deletedCount_tDBOutput_10;
				nb_line_update_tDBOutput_10 = nb_line_update_tDBOutput_10
						+ updatedCount_tDBOutput_10;
				nb_line_inserted_tDBOutput_10 = nb_line_inserted_tDBOutput_10
						+ insertedCount_tDBOutput_10;
				nb_line_rejected_tDBOutput_10 = nb_line_rejected_tDBOutput_10
						+ rejectedCount_tDBOutput_10;

				globalMap.put("tDBOutput_10_NB_LINE", nb_line_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_10);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lesLivraisons"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_10", true);
				end_Hash.put("tDBOutput_10", System.currentTimeMillis());

				/**
				 * [tDBOutput_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_10"
			globalMap.remove("tHash_Lookup_row19");

			try {

				/**
				 * [tDBInput_11 finally ] start
				 */

				currentComponent = "tDBInput_11";

				/**
				 * [tDBInput_11 finally ] stop
				 */

				/**
				 * [tFilterRow_5 finally ] start
				 */

				currentComponent = "tFilterRow_5";

				/**
				 * [tFilterRow_5 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tDBOutput_10 finally ] start
				 */

				currentComponent = "tDBOutput_10";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
						if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_10")) != null) {
							pstmtToClose_tDBOutput_10.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_10") == null) {
						java.sql.Connection ctn_tDBOutput_10 = null;
						if ((ctn_tDBOutput_10 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_10")) != null) {
							try {
								ctn_tDBOutput_10.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_10) {
								String errorMessage_tDBOutput_10 = "failed to close the connection in tDBOutput_10 :"
										+ sqlEx_tDBOutput_10.getMessage();
								System.err.println(errorMessage_tDBOutput_10);
							}
						}
					}
				}

				/**
				 * [tDBOutput_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}

	public static class lesVersementsStruct implements
			routines.system.IPersistableRow<lesVersementsStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idfaitversement;

		public int getIdfaitversement() {
			return this.idfaitversement;
		}

		public int DIM_CLIENTS_idclients;

		public int getDIM_CLIENTS_idclients() {
			return this.DIM_CLIENTS_idclients;
		}

		public String DIM_DATE_VERSEMENT_iddate;

		public String getDIM_DATE_VERSEMENT_iddate() {
			return this.DIM_DATE_VERSEMENT_iddate;
		}

		public Double montant_total_v;

		public Double getMontant_total_v() {
			return this.montant_total_v;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idfaitversement;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lesVersementsStruct other = (lesVersementsStruct) obj;

			if (this.idfaitversement != other.idfaitversement)
				return false;

			return true;
		}

		public void copyDataTo(lesVersementsStruct other) {

			other.idfaitversement = this.idfaitversement;
			other.DIM_CLIENTS_idclients = this.DIM_CLIENTS_idclients;
			other.DIM_DATE_VERSEMENT_iddate = this.DIM_DATE_VERSEMENT_iddate;
			other.montant_total_v = this.montant_total_v;

		}

		public void copyKeysDataTo(lesVersementsStruct other) {

			other.idfaitversement = this.idfaitversement;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idfaitversement = dis.readInt();

					this.DIM_CLIENTS_idclients = dis.readInt();

					this.DIM_DATE_VERSEMENT_iddate = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.montant_total_v = null;
					} else {
						this.montant_total_v = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idfaitversement);

				// int

				dos.writeInt(this.DIM_CLIENTS_idclients);

				// String

				writeString(this.DIM_DATE_VERSEMENT_iddate, dos);

				// Double

				if (this.montant_total_v == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_total_v);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idfaitversement=" + String.valueOf(idfaitversement));
			sb.append(",DIM_CLIENTS_idclients="
					+ String.valueOf(DIM_CLIENTS_idclients));
			sb.append(",DIM_DATE_VERSEMENT_iddate=" + DIM_DATE_VERSEMENT_iddate);
			sb.append(",montant_total_v=" + String.valueOf(montant_total_v));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lesVersementsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idfaitversement,
					other.idfaitversement);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public int idversement;

		public int getIdversement() {
			return this.idversement;
		}

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public String date_versement;

		public String getDate_versement() {
			return this.date_versement;
		}

		public Double montant_v;

		public Double getMontant_v() {
			return this.montant_v;
		}

		public String type_v;

		public String getType_v() {
			return this.type_v;
		}

		public String num_cheque;

		public String getNum_cheque() {
			return this.num_cheque;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public String observation;

		public String getObservation() {
			return this.observation;
		}

		public Integer idencaisseur;

		public Integer getIdencaisseur() {
			return this.idencaisseur;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public Integer id_chauffeur;

		public Integer getId_chauffeur() {
			return this.id_chauffeur;
		}

		public Integer validation;

		public Integer getValidation() {
			return this.validation;
		}

		public Integer id_user_validation;

		public Integer getId_user_validation() {
			return this.id_user_validation;
		}

		public Integer idmonnaie;

		public Integer getIdmonnaie() {
			return this.idmonnaie;
		}

		public Integer id_conversion;

		public Integer getId_conversion() {
			return this.id_conversion;
		}

		public BigDecimal taux_1;

		public BigDecimal getTaux_1() {
			return this.taux_1;
		}

		public BigDecimal taux_2;

		public BigDecimal getTaux_2() {
			return this.taux_2;
		}

		public Integer identreprise;

		public Integer getIdentreprise() {
			return this.identreprise;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idversement = dis.readInt();

					this.idclients = dis.readInt();

					this.date_versement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.montant_v = null;
					} else {
						this.montant_v = dis.readDouble();
					}

					this.type_v = readString(dis);

					this.num_cheque = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.id_user = null;
					} else {
						this.id_user = dis.readLong();
					}

					this.observation = readString(dis);

					this.idencaisseur = readInteger(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.id_chauffeur = readInteger(dis);

					this.validation = readInteger(dis);

					this.id_user_validation = readInteger(dis);

					this.idmonnaie = readInteger(dis);

					this.id_conversion = readInteger(dis);

					this.taux_1 = (BigDecimal) dis.readObject();

					this.taux_2 = (BigDecimal) dis.readObject();

					this.identreprise = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idversement);

				// int

				dos.writeInt(this.idclients);

				// String

				writeString(this.date_versement, dos);

				// Double

				if (this.montant_v == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_v);
				}

				// String

				writeString(this.type_v, dos);

				// String

				writeString(this.num_cheque, dos);

				// Long

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				// String

				writeString(this.observation, dos);

				// Integer

				writeInteger(this.idencaisseur, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// Integer

				writeInteger(this.id_chauffeur, dos);

				// Integer

				writeInteger(this.validation, dos);

				// Integer

				writeInteger(this.id_user_validation, dos);

				// Integer

				writeInteger(this.idmonnaie, dos);

				// Integer

				writeInteger(this.id_conversion, dos);

				// BigDecimal

				dos.writeObject(this.taux_1);

				// BigDecimal

				dos.writeObject(this.taux_2);

				// Integer

				writeInteger(this.identreprise, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idversement=" + String.valueOf(idversement));
			sb.append(",idclients=" + String.valueOf(idclients));
			sb.append(",date_versement=" + date_versement);
			sb.append(",montant_v=" + String.valueOf(montant_v));
			sb.append(",type_v=" + type_v);
			sb.append(",num_cheque=" + num_cheque);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",observation=" + observation);
			sb.append(",idencaisseur=" + String.valueOf(idencaisseur));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",id_chauffeur=" + String.valueOf(id_chauffeur));
			sb.append(",validation=" + String.valueOf(validation));
			sb.append(",id_user_validation="
					+ String.valueOf(id_user_validation));
			sb.append(",idmonnaie=" + String.valueOf(idmonnaie));
			sb.append(",id_conversion=" + String.valueOf(id_conversion));
			sb.append(",taux_1=" + String.valueOf(taux_1));
			sb.append(",taux_2=" + String.valueOf(taux_2));
			sb.append(",identreprise=" + String.valueOf(identreprise));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idversement;

		public int getIdversement() {
			return this.idversement;
		}

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public String date_versement;

		public String getDate_versement() {
			return this.date_versement;
		}

		public Double montant_v;

		public Double getMontant_v() {
			return this.montant_v;
		}

		public String type_v;

		public String getType_v() {
			return this.type_v;
		}

		public String num_cheque;

		public String getNum_cheque() {
			return this.num_cheque;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public String observation;

		public String getObservation() {
			return this.observation;
		}

		public Integer idencaisseur;

		public Integer getIdencaisseur() {
			return this.idencaisseur;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public Integer id_chauffeur;

		public Integer getId_chauffeur() {
			return this.id_chauffeur;
		}

		public Integer validation;

		public Integer getValidation() {
			return this.validation;
		}

		public Integer id_user_validation;

		public Integer getId_user_validation() {
			return this.id_user_validation;
		}

		public Integer idmonnaie;

		public Integer getIdmonnaie() {
			return this.idmonnaie;
		}

		public Integer id_conversion;

		public Integer getId_conversion() {
			return this.id_conversion;
		}

		public BigDecimal taux_1;

		public BigDecimal getTaux_1() {
			return this.taux_1;
		}

		public BigDecimal taux_2;

		public BigDecimal getTaux_2() {
			return this.taux_2;
		}

		public Integer identreprise;

		public Integer getIdentreprise() {
			return this.identreprise;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idversement;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.idversement != other.idversement)
				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.idversement = this.idversement;
			other.idclients = this.idclients;
			other.date_versement = this.date_versement;
			other.montant_v = this.montant_v;
			other.type_v = this.type_v;
			other.num_cheque = this.num_cheque;
			other.id_user = this.id_user;
			other.observation = this.observation;
			other.idencaisseur = this.idencaisseur;
			other.date_creation = this.date_creation;
			other.date_last_modif = this.date_last_modif;
			other.est_supprime = this.est_supprime;
			other.id_chauffeur = this.id_chauffeur;
			other.validation = this.validation;
			other.id_user_validation = this.id_user_validation;
			other.idmonnaie = this.idmonnaie;
			other.id_conversion = this.id_conversion;
			other.taux_1 = this.taux_1;
			other.taux_2 = this.taux_2;
			other.identreprise = this.identreprise;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.idversement = this.idversement;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idversement = dis.readInt();

					this.idclients = dis.readInt();

					this.date_versement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.montant_v = null;
					} else {
						this.montant_v = dis.readDouble();
					}

					this.type_v = readString(dis);

					this.num_cheque = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.id_user = null;
					} else {
						this.id_user = dis.readLong();
					}

					this.observation = readString(dis);

					this.idencaisseur = readInteger(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.id_chauffeur = readInteger(dis);

					this.validation = readInteger(dis);

					this.id_user_validation = readInteger(dis);

					this.idmonnaie = readInteger(dis);

					this.id_conversion = readInteger(dis);

					this.taux_1 = (BigDecimal) dis.readObject();

					this.taux_2 = (BigDecimal) dis.readObject();

					this.identreprise = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idversement);

				// int

				dos.writeInt(this.idclients);

				// String

				writeString(this.date_versement, dos);

				// Double

				if (this.montant_v == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_v);
				}

				// String

				writeString(this.type_v, dos);

				// String

				writeString(this.num_cheque, dos);

				// Long

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				// String

				writeString(this.observation, dos);

				// Integer

				writeInteger(this.idencaisseur, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// Integer

				writeInteger(this.id_chauffeur, dos);

				// Integer

				writeInteger(this.validation, dos);

				// Integer

				writeInteger(this.id_user_validation, dos);

				// Integer

				writeInteger(this.idmonnaie, dos);

				// Integer

				writeInteger(this.id_conversion, dos);

				// BigDecimal

				dos.writeObject(this.taux_1);

				// BigDecimal

				dos.writeObject(this.taux_2);

				// Integer

				writeInteger(this.identreprise, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idversement=" + String.valueOf(idversement));
			sb.append(",idclients=" + String.valueOf(idclients));
			sb.append(",date_versement=" + date_versement);
			sb.append(",montant_v=" + String.valueOf(montant_v));
			sb.append(",type_v=" + type_v);
			sb.append(",num_cheque=" + num_cheque);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",observation=" + observation);
			sb.append(",idencaisseur=" + String.valueOf(idencaisseur));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",id_chauffeur=" + String.valueOf(id_chauffeur));
			sb.append(",validation=" + String.valueOf(validation));
			sb.append(",id_user_validation="
					+ String.valueOf(id_user_validation));
			sb.append(",idmonnaie=" + String.valueOf(idmonnaie));
			sb.append(",id_conversion=" + String.valueOf(id_conversion));
			sb.append(",taux_1=" + String.valueOf(taux_1));
			sb.append(",taux_2=" + String.valueOf(taux_2));
			sb.append(",identreprise=" + String.valueOf(identreprise));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idversement,
					other.idversement);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_12Struct implements
			routines.system.IPersistableRow<after_tDBInput_12Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idversement;

		public int getIdversement() {
			return this.idversement;
		}

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public String date_versement;

		public String getDate_versement() {
			return this.date_versement;
		}

		public Double montant_v;

		public Double getMontant_v() {
			return this.montant_v;
		}

		public String type_v;

		public String getType_v() {
			return this.type_v;
		}

		public String num_cheque;

		public String getNum_cheque() {
			return this.num_cheque;
		}

		public Long id_user;

		public Long getId_user() {
			return this.id_user;
		}

		public String observation;

		public String getObservation() {
			return this.observation;
		}

		public Integer idencaisseur;

		public Integer getIdencaisseur() {
			return this.idencaisseur;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public Integer id_chauffeur;

		public Integer getId_chauffeur() {
			return this.id_chauffeur;
		}

		public Integer validation;

		public Integer getValidation() {
			return this.validation;
		}

		public Integer id_user_validation;

		public Integer getId_user_validation() {
			return this.id_user_validation;
		}

		public Integer idmonnaie;

		public Integer getIdmonnaie() {
			return this.idmonnaie;
		}

		public Integer id_conversion;

		public Integer getId_conversion() {
			return this.id_conversion;
		}

		public BigDecimal taux_1;

		public BigDecimal getTaux_1() {
			return this.taux_1;
		}

		public BigDecimal taux_2;

		public BigDecimal getTaux_2() {
			return this.taux_2;
		}

		public Integer identreprise;

		public Integer getIdentreprise() {
			return this.identreprise;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idversement;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_12Struct other = (after_tDBInput_12Struct) obj;

			if (this.idversement != other.idversement)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_12Struct other) {

			other.idversement = this.idversement;
			other.idclients = this.idclients;
			other.date_versement = this.date_versement;
			other.montant_v = this.montant_v;
			other.type_v = this.type_v;
			other.num_cheque = this.num_cheque;
			other.id_user = this.id_user;
			other.observation = this.observation;
			other.idencaisseur = this.idencaisseur;
			other.date_creation = this.date_creation;
			other.date_last_modif = this.date_last_modif;
			other.est_supprime = this.est_supprime;
			other.id_chauffeur = this.id_chauffeur;
			other.validation = this.validation;
			other.id_user_validation = this.id_user_validation;
			other.idmonnaie = this.idmonnaie;
			other.id_conversion = this.id_conversion;
			other.taux_1 = this.taux_1;
			other.taux_2 = this.taux_2;
			other.identreprise = this.identreprise;

		}

		public void copyKeysDataTo(after_tDBInput_12Struct other) {

			other.idversement = this.idversement;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idversement = dis.readInt();

					this.idclients = dis.readInt();

					this.date_versement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.montant_v = null;
					} else {
						this.montant_v = dis.readDouble();
					}

					this.type_v = readString(dis);

					this.num_cheque = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.id_user = null;
					} else {
						this.id_user = dis.readLong();
					}

					this.observation = readString(dis);

					this.idencaisseur = readInteger(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.id_chauffeur = readInteger(dis);

					this.validation = readInteger(dis);

					this.id_user_validation = readInteger(dis);

					this.idmonnaie = readInteger(dis);

					this.id_conversion = readInteger(dis);

					this.taux_1 = (BigDecimal) dis.readObject();

					this.taux_2 = (BigDecimal) dis.readObject();

					this.identreprise = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idversement);

				// int

				dos.writeInt(this.idclients);

				// String

				writeString(this.date_versement, dos);

				// Double

				if (this.montant_v == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_v);
				}

				// String

				writeString(this.type_v, dos);

				// String

				writeString(this.num_cheque, dos);

				// Long

				if (this.id_user == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id_user);
				}

				// String

				writeString(this.observation, dos);

				// Integer

				writeInteger(this.idencaisseur, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// Integer

				writeInteger(this.id_chauffeur, dos);

				// Integer

				writeInteger(this.validation, dos);

				// Integer

				writeInteger(this.id_user_validation, dos);

				// Integer

				writeInteger(this.idmonnaie, dos);

				// Integer

				writeInteger(this.id_conversion, dos);

				// BigDecimal

				dos.writeObject(this.taux_1);

				// BigDecimal

				dos.writeObject(this.taux_2);

				// Integer

				writeInteger(this.identreprise, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idversement=" + String.valueOf(idversement));
			sb.append(",idclients=" + String.valueOf(idclients));
			sb.append(",date_versement=" + date_versement);
			sb.append(",montant_v=" + String.valueOf(montant_v));
			sb.append(",type_v=" + type_v);
			sb.append(",num_cheque=" + num_cheque);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",observation=" + observation);
			sb.append(",idencaisseur=" + String.valueOf(idencaisseur));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",id_chauffeur=" + String.valueOf(id_chauffeur));
			sb.append(",validation=" + String.valueOf(validation));
			sb.append(",id_user_validation="
					+ String.valueOf(id_user_validation));
			sb.append(",idmonnaie=" + String.valueOf(idmonnaie));
			sb.append(",id_conversion=" + String.valueOf(id_conversion));
			sb.append(",taux_1=" + String.valueOf(taux_1));
			sb.append(",taux_2=" + String.valueOf(taux_2));
			sb.append(",identreprise=" + String.valueOf(identreprise));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idversement,
					other.idversement);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_14Process(globalMap);

				row16Struct row16 = new row16Struct();
				row20Struct row20 = new row20Struct();
				lesVersementsStruct lesVersements = new lesVersementsStruct();

				/**
				 * [tDBOutput_11 begin ] start
				 */

				ok_Hash.put("tDBOutput_11", false);
				start_Hash.put("tDBOutput_11", System.currentTimeMillis());

				currentComponent = "tDBOutput_11";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lesVersements"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_11 = 0;

				int nb_line_tDBOutput_11 = 0;
				int nb_line_update_tDBOutput_11 = 0;
				int nb_line_inserted_tDBOutput_11 = 0;
				int nb_line_deleted_tDBOutput_11 = 0;
				int nb_line_rejected_tDBOutput_11 = 0;

				int deletedCount_tDBOutput_11 = 0;
				int updatedCount_tDBOutput_11 = 0;
				int insertedCount_tDBOutput_11 = 0;
				int rejectedCount_tDBOutput_11 = 0;
				String dbschema_tDBOutput_11 = null;
				String tableName_tDBOutput_11 = null;
				boolean whetherReject_tDBOutput_11 = false;

				java.util.Calendar calendar_tDBOutput_11 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_11 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_11 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_11 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_11;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_11 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_11 = 1;
				if (insertKeyCount_tDBOutput_11 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_11 = null;
				String dbUser_tDBOutput_11 = null;
				dbschema_tDBOutput_11 = "dbo";
				String driverClass_tDBOutput_11 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_11);
				String port_tDBOutput_11 = "1433";
				String dbname_tDBOutput_11 = "PROJET_DW";
				String url_tDBOutput_11 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_11)) {
					url_tDBOutput_11 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_11)) {
					url_tDBOutput_11 += "//" + "PROJET_DW";

				}
				url_tDBOutput_11 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_11 = "sa";

				final String decryptedPassword_tDBOutput_11 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_11 = decryptedPassword_tDBOutput_11;
				conn_tDBOutput_11 = java.sql.DriverManager.getConnection(
						url_tDBOutput_11, dbUser_tDBOutput_11,
						dbPwd_tDBOutput_11);

				resourceMap.put("conn_tDBOutput_11", conn_tDBOutput_11);

				conn_tDBOutput_11.setAutoCommit(false);
				int commitEvery_tDBOutput_11 = 10000;
				int commitCounter_tDBOutput_11 = 0;

				if (dbschema_tDBOutput_11 == null
						|| dbschema_tDBOutput_11.trim().length() == 0) {
					tableName_tDBOutput_11 = "FAIT_VERSEMENT";
				} else {
					tableName_tDBOutput_11 = dbschema_tDBOutput_11 + "].["
							+ "FAIT_VERSEMENT";
				}
				int count_tDBOutput_11 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_11
								+ "] WHERE [idfaitversement] = ?");
				resourceMap.put("pstmt_tDBOutput_11", pstmt_tDBOutput_11);
				String insert_tDBOutput_11 = "INSERT INTO ["
						+ tableName_tDBOutput_11
						+ "] ([idfaitversement],[DIM_CLIENTS_idclients],[DIM_DATE_VERSEMENT_iddate],[montant_total_v]) VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_11 = conn_tDBOutput_11
						.prepareStatement(insert_tDBOutput_11);
				resourceMap.put("pstmtInsert_tDBOutput_11",
						pstmtInsert_tDBOutput_11);

				/**
				 * [tDBOutput_11 begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());

				currentComponent = "tMap_11";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row20" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_11 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) globalMap
						.get("tHash_Lookup_row22"));

				row22Struct row22HashKey = new row22Struct();
				row22Struct row22Default = new row22Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lesVersementsStruct lesVersements_tmp = new lesVersementsStruct();
				// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tFilterRow_7 begin ] start
				 */

				ok_Hash.put("tFilterRow_7", false);
				start_Hash.put("tFilterRow_7", System.currentTimeMillis());

				currentComponent = "tFilterRow_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row16" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFilterRow_7 = 0;

				int nb_line_tFilterRow_7 = 0;
				int nb_line_ok_tFilterRow_7 = 0;
				int nb_line_reject_tFilterRow_7 = 0;

				class Operator_tFilterRow_7 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_7(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_7 begin ] stop
				 */

				/**
				 * [tDBInput_12 begin ] start
				 */

				ok_Hash.put("tDBInput_12", false);
				start_Hash.put("tDBInput_12", System.currentTimeMillis());

				currentComponent = "tDBInput_12";

				int tos_count_tDBInput_12 = 0;

				java.util.Calendar calendar_tDBInput_12 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_12.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_12 = calendar_tDBInput_12
						.getTime();
				int nb_line_tDBInput_12 = 0;
				java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_12);
				String dbUser_tDBInput_12 = "root";

				final String decryptedPassword_tDBInput_12 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;

				String url_tDBInput_12 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_12 = java.sql.DriverManager.getConnection(
						url_tDBInput_12, dbUser_tDBInput_12, dbPwd_tDBInput_12);

				java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12
						.createStatement();

				String dbquery_tDBInput_12 = "SELECT \n  `versement`.`idversement`, \n  `versement`.`idclients`, \n  `versement`.`date_versement`, \n  `versement`.`monta"
						+ "nt_v`, \n  `versement`.`type_v`, \n  `versement`.`num_cheque`, \n  `versement`.`id_user`, \n  `versement`.`observation`, \n  "
						+ "`versement`.`idencaisseur`, \n  `versement`.`date_creation`, \n  `versement`.`date_last_modif`, \n  `versement`.`est_suppri"
						+ "me`, \n  `versement`.`id_chauffeur`, \n  `versement`.`validation`, \n  `versement`.`id_user_validation`, \n  `versement`.`id"
						+ "monnaie`, \n  `versement`.`id_conversion`, \n  `versement`.`taux_1`, \n  `versement`.`taux_2`, \n  `versement`.`identreprise"
						+ "`\nFROM `versement`";

				globalMap.put("tDBInput_12_QUERY", dbquery_tDBInput_12);
				java.sql.ResultSet rs_tDBInput_12 = null;

				try {
					rs_tDBInput_12 = stmt_tDBInput_12
							.executeQuery(dbquery_tDBInput_12);
					java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12
							.getMetaData();
					int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12
							.getColumnCount();

					String tmpContent_tDBInput_12 = null;

					while (rs_tDBInput_12.next()) {
						nb_line_tDBInput_12++;

						if (colQtyInRs_tDBInput_12 < 1) {
							row16.idversement = 0;
						} else {

							if (rs_tDBInput_12.getObject(1) != null) {
								row16.idversement = rs_tDBInput_12.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_12 < 2) {
							row16.idclients = 0;
						} else {

							if (rs_tDBInput_12.getObject(2) != null) {
								row16.idclients = rs_tDBInput_12.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_12 < 3) {
							row16.date_versement = null;
						} else {

							row16.date_versement = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 3, false);
						}
						if (colQtyInRs_tDBInput_12 < 4) {
							row16.montant_v = null;
						} else {

							if (rs_tDBInput_12.getObject(4) != null) {
								row16.montant_v = rs_tDBInput_12.getDouble(4);
							} else {
								row16.montant_v = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 5) {
							row16.type_v = null;
						} else {

							row16.type_v = routines.system.JDBCUtil.getString(
									rs_tDBInput_12, 5, false);
						}
						if (colQtyInRs_tDBInput_12 < 6) {
							row16.num_cheque = null;
						} else {

							row16.num_cheque = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 6, false);
						}
						if (colQtyInRs_tDBInput_12 < 7) {
							row16.id_user = null;
						} else {

							if (rs_tDBInput_12.getObject(7) != null) {
								row16.id_user = rs_tDBInput_12.getLong(7);
							} else {
								row16.id_user = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 8) {
							row16.observation = null;
						} else {

							row16.observation = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 8, false);
						}
						if (colQtyInRs_tDBInput_12 < 9) {
							row16.idencaisseur = null;
						} else {

							if (rs_tDBInput_12.getObject(9) != null) {
								row16.idencaisseur = rs_tDBInput_12.getInt(9);
							} else {
								row16.idencaisseur = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 10) {
							row16.date_creation = null;
						} else {

							if (rs_tDBInput_12.getString(10) != null) {
								String dateString_tDBInput_12 = rs_tDBInput_12
										.getString(10);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_12)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_12)) {
									row16.date_creation = rs_tDBInput_12
											.getTimestamp(10);
								} else {
									row16.date_creation = (java.util.Date) year0_tDBInput_12
											.clone();
								}
							} else {
								row16.date_creation = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 11) {
							row16.date_last_modif = null;
						} else {

							if (rs_tDBInput_12.getString(11) != null) {
								String dateString_tDBInput_12 = rs_tDBInput_12
										.getString(11);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_12)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_12)) {
									row16.date_last_modif = rs_tDBInput_12
											.getTimestamp(11);
								} else {
									row16.date_last_modif = (java.util.Date) year0_tDBInput_12
											.clone();
								}
							} else {
								row16.date_last_modif = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 12) {
							row16.est_supprime = null;
						} else {

							if (rs_tDBInput_12.getObject(12) != null) {
								row16.est_supprime = rs_tDBInput_12.getInt(12);
							} else {
								row16.est_supprime = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 13) {
							row16.id_chauffeur = null;
						} else {

							if (rs_tDBInput_12.getObject(13) != null) {
								row16.id_chauffeur = rs_tDBInput_12.getInt(13);
							} else {
								row16.id_chauffeur = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 14) {
							row16.validation = null;
						} else {

							if (rs_tDBInput_12.getObject(14) != null) {
								row16.validation = rs_tDBInput_12.getInt(14);
							} else {
								row16.validation = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 15) {
							row16.id_user_validation = null;
						} else {

							if (rs_tDBInput_12.getObject(15) != null) {
								row16.id_user_validation = rs_tDBInput_12
										.getInt(15);
							} else {
								row16.id_user_validation = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 16) {
							row16.idmonnaie = null;
						} else {

							if (rs_tDBInput_12.getObject(16) != null) {
								row16.idmonnaie = rs_tDBInput_12.getInt(16);
							} else {
								row16.idmonnaie = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 17) {
							row16.id_conversion = null;
						} else {

							if (rs_tDBInput_12.getObject(17) != null) {
								row16.id_conversion = rs_tDBInput_12.getInt(17);
							} else {
								row16.id_conversion = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 18) {
							row16.taux_1 = null;
						} else {

							if (rs_tDBInput_12.getObject(18) != null) {
								row16.taux_1 = rs_tDBInput_12.getBigDecimal(18);
							} else {
								row16.taux_1 = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 19) {
							row16.taux_2 = null;
						} else {

							if (rs_tDBInput_12.getObject(19) != null) {
								row16.taux_2 = rs_tDBInput_12.getBigDecimal(19);
							} else {
								row16.taux_2 = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 20) {
							row16.identreprise = null;
						} else {

							if (rs_tDBInput_12.getObject(20) != null) {
								row16.identreprise = rs_tDBInput_12.getInt(20);
							} else {
								row16.identreprise = null;
							}
						}

						/**
						 * [tDBInput_12 begin ] stop
						 */

						/**
						 * [tDBInput_12 main ] start
						 */

						currentComponent = "tDBInput_12";

						tos_count_tDBInput_12++;

						/**
						 * [tDBInput_12 main ] stop
						 */

						/**
						 * [tDBInput_12 process_data_begin ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_7 main ] start
						 */

						currentComponent = "tFilterRow_7";

						// row16
						// row16

						if (execStat) {
							runStat.updateStatOnConnection("row16" + iterateId,
									1, 1);
						}

						row20 = null;
						Operator_tFilterRow_7 ope_tFilterRow_7 = new Operator_tFilterRow_7(
								"&&");
						ope_tFilterRow_7.matches((row16.est_supprime == null),
								"est_supprime==null failed");

						if (ope_tFilterRow_7.getMatchFlag()) {
							if (row20 == null) {
								row20 = new row20Struct();
							}
							row20.idversement = row16.idversement;
							row20.idclients = row16.idclients;
							row20.date_versement = row16.date_versement;
							row20.montant_v = row16.montant_v;
							row20.type_v = row16.type_v;
							row20.num_cheque = row16.num_cheque;
							row20.id_user = row16.id_user;
							row20.observation = row16.observation;
							row20.idencaisseur = row16.idencaisseur;
							row20.date_creation = row16.date_creation;
							row20.date_last_modif = row16.date_last_modif;
							row20.est_supprime = row16.est_supprime;
							row20.id_chauffeur = row16.id_chauffeur;
							row20.validation = row16.validation;
							row20.id_user_validation = row16.id_user_validation;
							row20.idmonnaie = row16.idmonnaie;
							row20.id_conversion = row16.id_conversion;
							row20.taux_1 = row16.taux_1;
							row20.taux_2 = row16.taux_2;
							row20.identreprise = row16.identreprise;
							nb_line_ok_tFilterRow_7++;
						} else {
							nb_line_reject_tFilterRow_7++;
						}

						nb_line_tFilterRow_7++;

						tos_count_tFilterRow_7++;

						/**
						 * [tFilterRow_7 main ] stop
						 */

						/**
						 * [tFilterRow_7 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_7";

						/**
						 * [tFilterRow_7 process_data_begin ] stop
						 */
						// Start of branch "row20"
						if (row20 != null) {

							/**
							 * [tMap_11 main ] start
							 */

							currentComponent = "tMap_11";

							// row20
							// row20

							if (execStat) {
								runStat.updateStatOnConnection("row20"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_11 = false;
							boolean mainRowRejected_tMap_11 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row22"
							// /////////////////////////////////////////////

							boolean forceLooprow22 = false;

							row22Struct row22ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								tHash_Lookup_row22.lookup(row22HashKey);

								if (!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_11 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row22 != null
									&& tHash_Lookup_row22
											.getCount(row22HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys : ");
							} // G 071

							row22Struct row22 = null;

							row22Struct fromLookup_row22 = null;
							row22 = row22Default;

							if (tHash_Lookup_row22 != null
									&& tHash_Lookup_row22.hasNext()) { // G 099

								fromLookup_row22 = tHash_Lookup_row22.next();

							} // G 099

							if (fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
								// ###############################
								// # Output tables

								lesVersements = null;

								if (!rejectedInnerJoin_tMap_11) {

									// # Output table : 'lesVersements'
									lesVersements_tmp.idfaitversement = row20.idversement;
									lesVersements_tmp.DIM_CLIENTS_idclients = row20.idclients;
									lesVersements_tmp.DIM_DATE_VERSEMENT_iddate = row20.date_versement;
									lesVersements_tmp.montant_total_v = row20.montant_v;
									lesVersements = lesVersements_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_11 = false;

							tos_count_tMap_11++;

							/**
							 * [tMap_11 main ] stop
							 */

							/**
							 * [tMap_11 process_data_begin ] start
							 */

							currentComponent = "tMap_11";

							/**
							 * [tMap_11 process_data_begin ] stop
							 */
							// Start of branch "lesVersements"
							if (lesVersements != null) {

								/**
								 * [tDBOutput_11 main ] start
								 */

								currentComponent = "tDBOutput_11";

								// lesVersements
								// lesVersements

								if (execStat) {
									runStat.updateStatOnConnection(
											"lesVersements" + iterateId, 1, 1);
								}

								whetherReject_tDBOutput_11 = false;

								pstmt_tDBOutput_11.setInt(1,
										lesVersements.idfaitversement);

								java.sql.ResultSet rs_tDBOutput_11 = pstmt_tDBOutput_11
										.executeQuery();
								int checkCount_tDBOutput_11 = -1;
								while (rs_tDBOutput_11.next()) {
									checkCount_tDBOutput_11 = rs_tDBOutput_11
											.getInt(1);
								}

								if (checkCount_tDBOutput_11 < 1) {
									pstmtInsert_tDBOutput_11.setInt(1,
											lesVersements.idfaitversement);

									pstmtInsert_tDBOutput_11
											.setInt(2,
													lesVersements.DIM_CLIENTS_idclients);

									if (lesVersements.DIM_DATE_VERSEMENT_iddate == null) {
										pstmtInsert_tDBOutput_11.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_11
												.setString(
														3,
														lesVersements.DIM_DATE_VERSEMENT_iddate);
									}

									if (lesVersements.montant_total_v == null) {
										pstmtInsert_tDBOutput_11.setNull(4,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_11.setDouble(4,
												lesVersements.montant_total_v);
									}

									try {
										insertedCount_tDBOutput_11 = insertedCount_tDBOutput_11
												+ pstmtInsert_tDBOutput_11
														.executeUpdate();
										nb_line_tDBOutput_11++;
									} catch (java.lang.Exception e) {
										whetherReject_tDBOutput_11 = true;
										nb_line_tDBOutput_11++;

										System.err.print(e.getMessage());
									}
								}
								// ////////batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_11 {
									public int limitBytePart1(
											int counter,
											java.sql.PreparedStatement pstmt_tDBOutput_11)
											throws Exception {
										try {

											for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11
													.executeBatch()) {
												if (countEach_tDBOutput_11 == -2
														|| countEach_tDBOutput_11 == -3) {
													break;
												}
												counter += countEach_tDBOutput_11;
											}

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tDBOutput_11 = 0;
											for (int countEach_tDBOutput_11 : e
													.getUpdateCounts()) {
												counter += (countEach_tDBOutput_11 < 0 ? 0
														: countEach_tDBOutput_11);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(
											int counter,
											java.sql.PreparedStatement pstmt_tDBOutput_11)
											throws Exception {
										try {

											for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11
													.executeBatch()) {
												if (countEach_tDBOutput_11 == -2
														|| countEach_tDBOutput_11 == -3) {
													break;
												}
												counter += countEach_tDBOutput_11;
											}

										} catch (java.sql.BatchUpdateException e) {

											for (int countEach_tDBOutput_11 : e
													.getUpdateCounts()) {
												counter += (countEach_tDBOutput_11 < 0 ? 0
														: countEach_tDBOutput_11);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}

								// //////////commit every////////////

								commitCounter_tDBOutput_11++;
								if (commitEvery_tDBOutput_11 <= commitCounter_tDBOutput_11) {

									conn_tDBOutput_11.commit();

									commitCounter_tDBOutput_11 = 0;
								}

								tos_count_tDBOutput_11++;

								/**
								 * [tDBOutput_11 main ] stop
								 */

								/**
								 * [tDBOutput_11 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_11";

								/**
								 * [tDBOutput_11 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_11 process_data_end ] start
								 */

								currentComponent = "tDBOutput_11";

								/**
								 * [tDBOutput_11 process_data_end ] stop
								 */

							} // End of branch "lesVersements"

							/**
							 * [tMap_11 process_data_end ] start
							 */

							currentComponent = "tMap_11";

							/**
							 * [tMap_11 process_data_end ] stop
							 */

						} // End of branch "row20"

						/**
						 * [tFilterRow_7 process_data_end ] start
						 */

						currentComponent = "tFilterRow_7";

						/**
						 * [tFilterRow_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 process_data_end ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 end ] start
						 */

						currentComponent = "tDBInput_12";

					}
				} finally {
					if (rs_tDBInput_12 != null) {
						rs_tDBInput_12.close();
					}
					if (stmt_tDBInput_12 != null) {
						stmt_tDBInput_12.close();
					}
					if (conn_tDBInput_12 != null
							&& !conn_tDBInput_12.isClosed()) {

						conn_tDBInput_12.close();

					}

				}

				globalMap.put("tDBInput_12_NB_LINE", nb_line_tDBInput_12);

				ok_Hash.put("tDBInput_12", true);
				end_Hash.put("tDBInput_12", System.currentTimeMillis());

				/**
				 * [tDBInput_12 end ] stop
				 */

				/**
				 * [tFilterRow_7 end ] start
				 */

				currentComponent = "tFilterRow_7";

				globalMap.put("tFilterRow_7_NB_LINE", nb_line_tFilterRow_7);
				globalMap.put("tFilterRow_7_NB_LINE_OK",
						nb_line_ok_tFilterRow_7);
				globalMap.put("tFilterRow_7_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row16" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFilterRow_7", true);
				end_Hash.put("tFilterRow_7", System.currentTimeMillis());

				/**
				 * [tFilterRow_7 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row22 != null) {
					tHash_Lookup_row22.endGet();
				}
				globalMap.remove("tHash_Lookup_row22");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row20" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tDBOutput_11 end ] start
				 */

				currentComponent = "tDBOutput_11";

				if (pstmtInsert_tDBOutput_11 != null) {
					pstmtInsert_tDBOutput_11.close();
					resourceMap.remove("pstmtInsert_tDBOutput_11");
				}
				if (pstmt_tDBOutput_11 != null) {
					pstmt_tDBOutput_11.close();
					resourceMap.remove("pstmt_tDBOutput_11");
				}
				resourceMap.put("statementClosed_tDBOutput_11", true);
				conn_tDBOutput_11.commit();

				conn_tDBOutput_11.close();
				resourceMap.put("finish_tDBOutput_11", true);

				nb_line_deleted_tDBOutput_11 = nb_line_deleted_tDBOutput_11
						+ deletedCount_tDBOutput_11;
				nb_line_update_tDBOutput_11 = nb_line_update_tDBOutput_11
						+ updatedCount_tDBOutput_11;
				nb_line_inserted_tDBOutput_11 = nb_line_inserted_tDBOutput_11
						+ insertedCount_tDBOutput_11;
				nb_line_rejected_tDBOutput_11 = nb_line_rejected_tDBOutput_11
						+ rejectedCount_tDBOutput_11;

				globalMap.put("tDBOutput_11_NB_LINE", nb_line_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_11);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lesVersements"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_11", true);
				end_Hash.put("tDBOutput_11", System.currentTimeMillis());

				/**
				 * [tDBOutput_11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_11"
			globalMap.remove("tHash_Lookup_row22");

			try {

				/**
				 * [tDBInput_12 finally ] start
				 */

				currentComponent = "tDBInput_12";

				/**
				 * [tDBInput_12 finally ] stop
				 */

				/**
				 * [tFilterRow_7 finally ] start
				 */

				currentComponent = "tFilterRow_7";

				/**
				 * [tFilterRow_7 finally ] stop
				 */

				/**
				 * [tMap_11 finally ] start
				 */

				currentComponent = "tMap_11";

				/**
				 * [tMap_11 finally ] stop
				 */

				/**
				 * [tDBOutput_11 finally ] start
				 */

				currentComponent = "tDBOutput_11";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_11") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_11 = null;
						if ((pstmtToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_11")) != null) {
							pstmtToClose_tDBOutput_11.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_11") == null) {
						java.sql.Connection ctn_tDBOutput_11 = null;
						if ((ctn_tDBOutput_11 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_11")) != null) {
							try {
								ctn_tDBOutput_11.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_11) {
								String errorMessage_tDBOutput_11 = "failed to close the connection in tDBOutput_11 :"
										+ sqlEx_tDBOutput_11.getMessage();
								System.err.println(errorMessage_tDBOutput_11);
							}
						}
					}
				}

				/**
				 * [tDBOutput_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public long idpays;

		public long getIdpays() {
			return this.idpays;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public Integer id_user;

		public Integer getId_user() {
			return this.id_user;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String bloque;

		public String getBloque() {
			return this.bloque;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idclients = dis.readInt();

					this.idpays = dis.readLong();

					this.prenom = readString(dis);

					this.nom = readString(dis);

					this.telephone = readString(dis);

					this.adresse = readString(dis);

					this.id_user = readInteger(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.bloque = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idclients);

				// long

				dos.writeLong(this.idpays);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.adresse, dos);

				// Integer

				writeInteger(this.id_user, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// String

				writeString(this.bloque, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idclients=" + String.valueOf(idclients));
			sb.append(",idpays=" + String.valueOf(idpays));
			sb.append(",prenom=" + prenom);
			sb.append(",nom=" + nom);
			sb.append(",telephone=" + telephone);
			sb.append(",adresse=" + adresse);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",bloque=" + bloque);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public long idpays;

		public long getIdpays() {
			return this.idpays;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public Integer id_user;

		public Integer getId_user() {
			return this.id_user;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String bloque;

		public String getBloque() {
			return this.bloque;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idclients;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.idclients != other.idclients)
				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.idclients = this.idclients;
			other.idpays = this.idpays;
			other.prenom = this.prenom;
			other.nom = this.nom;
			other.telephone = this.telephone;
			other.adresse = this.adresse;
			other.id_user = this.id_user;
			other.date_creation = this.date_creation;
			other.date_last_modif = this.date_last_modif;
			other.est_supprime = this.est_supprime;
			other.bloque = this.bloque;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.idclients = this.idclients;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idclients = dis.readInt();

					this.idpays = dis.readLong();

					this.prenom = readString(dis);

					this.nom = readString(dis);

					this.telephone = readString(dis);

					this.adresse = readString(dis);

					this.id_user = readInteger(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.bloque = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idclients);

				// long

				dos.writeLong(this.idpays);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.adresse, dos);

				// Integer

				writeInteger(this.id_user, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// String

				writeString(this.bloque, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idclients=" + String.valueOf(idclients));
			sb.append(",idpays=" + String.valueOf(idpays));
			sb.append(",prenom=" + prenom);
			sb.append(",nom=" + nom);
			sb.append(",telephone=" + telephone);
			sb.append(",adresse=" + adresse);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",bloque=" + bloque);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idclients, other.idclients);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();
				row19Struct row19 = new row19Struct();

				/**
				 * [tAdvancedHash_row19 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row19", false);
				start_Hash.put("tAdvancedHash_row19",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row19";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row19" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row19 = 0;

				// connection name:row19
				// source node:tFilterRow_6 - inputs:(row18)
				// outputs:(row19,row19) | target node:tAdvancedHash_row19 -
				// inputs:(row19) outputs:()
				// linked node: tMap_10 - inputs:(row17,row19)
				// outputs:(lesLivraisons)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row19Struct> getLookup(matchingModeEnum_row19);

				globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);

				/**
				 * [tAdvancedHash_row19 begin ] stop
				 */

				/**
				 * [tFilterRow_6 begin ] start
				 */

				ok_Hash.put("tFilterRow_6", false);
				start_Hash.put("tFilterRow_6", System.currentTimeMillis());

				currentComponent = "tFilterRow_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row18" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFilterRow_6 = 0;

				int nb_line_tFilterRow_6 = 0;
				int nb_line_ok_tFilterRow_6 = 0;
				int nb_line_reject_tFilterRow_6 = 0;

				class Operator_tFilterRow_6 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_6(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_6 begin ] stop
				 */

				/**
				 * [tDBInput_13 begin ] start
				 */

				ok_Hash.put("tDBInput_13", false);
				start_Hash.put("tDBInput_13", System.currentTimeMillis());

				currentComponent = "tDBInput_13";

				int tos_count_tDBInput_13 = 0;

				java.util.Calendar calendar_tDBInput_13 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_13.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_13 = calendar_tDBInput_13
						.getTime();
				int nb_line_tDBInput_13 = 0;
				java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = "root";

				final String decryptedPassword_tDBInput_13 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;

				String url_tDBInput_13 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_13 = java.sql.DriverManager.getConnection(
						url_tDBInput_13, dbUser_tDBInput_13, dbPwd_tDBInput_13);

				java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13
						.createStatement();

				String dbquery_tDBInput_13 = "SELECT \n  `clients`.`idclients`, \n  `clients`.`idpays`, \n  `clients`.`prenom`, \n  `clients`.`nom`, \n  `clients`.`teleph"
						+ "one`, \n  `clients`.`adresse`, \n  `clients`.`id_user`, \n  `clients`.`date_creation`, \n  `clients`.`date_last_modif`, \n  `"
						+ "clients`.`est_supprime`, \n  `clients`.`bloque`\nFROM `clients`";

				globalMap.put("tDBInput_13_QUERY", dbquery_tDBInput_13);
				java.sql.ResultSet rs_tDBInput_13 = null;

				try {
					rs_tDBInput_13 = stmt_tDBInput_13
							.executeQuery(dbquery_tDBInput_13);
					java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13
							.getMetaData();
					int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13
							.getColumnCount();

					String tmpContent_tDBInput_13 = null;

					while (rs_tDBInput_13.next()) {
						nb_line_tDBInput_13++;

						if (colQtyInRs_tDBInput_13 < 1) {
							row18.idclients = 0;
						} else {

							if (rs_tDBInput_13.getObject(1) != null) {
								row18.idclients = rs_tDBInput_13.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_13 < 2) {
							row18.idpays = 0;
						} else {

							if (rs_tDBInput_13.getObject(2) != null) {
								row18.idpays = rs_tDBInput_13.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_13 < 3) {
							row18.prenom = null;
						} else {

							row18.prenom = routines.system.JDBCUtil.getString(
									rs_tDBInput_13, 3, false);
						}
						if (colQtyInRs_tDBInput_13 < 4) {
							row18.nom = null;
						} else {

							row18.nom = routines.system.JDBCUtil.getString(
									rs_tDBInput_13, 4, false);
						}
						if (colQtyInRs_tDBInput_13 < 5) {
							row18.telephone = null;
						} else {

							row18.telephone = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 5, false);
						}
						if (colQtyInRs_tDBInput_13 < 6) {
							row18.adresse = null;
						} else {

							row18.adresse = routines.system.JDBCUtil.getString(
									rs_tDBInput_13, 6, false);
						}
						if (colQtyInRs_tDBInput_13 < 7) {
							row18.id_user = null;
						} else {

							if (rs_tDBInput_13.getObject(7) != null) {
								row18.id_user = rs_tDBInput_13.getInt(7);
							} else {
								row18.id_user = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 8) {
							row18.date_creation = null;
						} else {

							if (rs_tDBInput_13.getString(8) != null) {
								String dateString_tDBInput_13 = rs_tDBInput_13
										.getString(8);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_13)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_13)) {
									row18.date_creation = rs_tDBInput_13
											.getTimestamp(8);
								} else {
									row18.date_creation = (java.util.Date) year0_tDBInput_13
											.clone();
								}
							} else {
								row18.date_creation = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 9) {
							row18.date_last_modif = null;
						} else {

							if (rs_tDBInput_13.getString(9) != null) {
								String dateString_tDBInput_13 = rs_tDBInput_13
										.getString(9);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_13)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_13)) {
									row18.date_last_modif = rs_tDBInput_13
											.getTimestamp(9);
								} else {
									row18.date_last_modif = (java.util.Date) year0_tDBInput_13
											.clone();
								}
							} else {
								row18.date_last_modif = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 10) {
							row18.est_supprime = null;
						} else {

							if (rs_tDBInput_13.getObject(10) != null) {
								row18.est_supprime = rs_tDBInput_13.getInt(10);
							} else {
								row18.est_supprime = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 11) {
							row18.bloque = null;
						} else {

							row18.bloque = routines.system.JDBCUtil.getString(
									rs_tDBInput_13, 11, false);
						}

						/**
						 * [tDBInput_13 begin ] stop
						 */

						/**
						 * [tDBInput_13 main ] start
						 */

						currentComponent = "tDBInput_13";

						tos_count_tDBInput_13++;

						/**
						 * [tDBInput_13 main ] stop
						 */

						/**
						 * [tDBInput_13 process_data_begin ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_6 main ] start
						 */

						currentComponent = "tFilterRow_6";

						// row18
						// row18

						if (execStat) {
							runStat.updateStatOnConnection("row18" + iterateId,
									1, 1);
						}

						row19 = null;
						row19 = null;
						Operator_tFilterRow_6 ope_tFilterRow_6 = new Operator_tFilterRow_6(
								"&&");
						ope_tFilterRow_6.matches((row18.est_supprime == null),
								"est_supprime==null failed");

						if (ope_tFilterRow_6.getMatchFlag()) {
							if (row19 == null) {
								row19 = new row19Struct();
							}
							row19.idclients = row18.idclients;
							row19.idpays = row18.idpays;
							row19.prenom = row18.prenom;
							row19.nom = row18.nom;
							row19.telephone = row18.telephone;
							row19.adresse = row18.adresse;
							row19.id_user = row18.id_user;
							row19.date_creation = row18.date_creation;
							row19.date_last_modif = row18.date_last_modif;
							row19.est_supprime = row18.est_supprime;
							row19.bloque = row18.bloque;
							if (row19 == null) {
								row19 = new row19Struct();
							}
							row19.idclients = row18.idclients;
							row19.idpays = row18.idpays;
							row19.prenom = row18.prenom;
							row19.nom = row18.nom;
							row19.telephone = row18.telephone;
							row19.adresse = row18.adresse;
							row19.id_user = row18.id_user;
							row19.date_creation = row18.date_creation;
							row19.date_last_modif = row18.date_last_modif;
							row19.est_supprime = row18.est_supprime;
							row19.bloque = row18.bloque;
							nb_line_ok_tFilterRow_6++;
						} else {
							nb_line_reject_tFilterRow_6++;
						}

						nb_line_tFilterRow_6++;

						tos_count_tFilterRow_6++;

						/**
						 * [tFilterRow_6 main ] stop
						 */

						/**
						 * [tFilterRow_6 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_6";

						/**
						 * [tFilterRow_6 process_data_begin ] stop
						 */
						// Start of branch "row19"
						if (row19 != null) {

							/**
							 * [tAdvancedHash_row19 main ] start
							 */

							currentComponent = "tAdvancedHash_row19";

							// row19
							// row19

							if (execStat) {
								runStat.updateStatOnConnection("row19"
										+ iterateId, 1, 1);
							}

							row19Struct row19_HashRow = new row19Struct();

							row19_HashRow.idclients = row19.idclients;

							row19_HashRow.idpays = row19.idpays;

							row19_HashRow.prenom = row19.prenom;

							row19_HashRow.nom = row19.nom;

							row19_HashRow.telephone = row19.telephone;

							row19_HashRow.adresse = row19.adresse;

							row19_HashRow.id_user = row19.id_user;

							row19_HashRow.date_creation = row19.date_creation;

							row19_HashRow.date_last_modif = row19.date_last_modif;

							row19_HashRow.est_supprime = row19.est_supprime;

							row19_HashRow.bloque = row19.bloque;

							tHash_Lookup_row19.put(row19_HashRow);

							tos_count_tAdvancedHash_row19++;

							/**
							 * [tAdvancedHash_row19 main ] stop
							 */

							/**
							 * [tAdvancedHash_row19 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row19";

							/**
							 * [tAdvancedHash_row19 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row19 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row19";

							/**
							 * [tAdvancedHash_row19 process_data_end ] stop
							 */

						} // End of branch "row19"

						/**
						 * [tFilterRow_6 process_data_end ] start
						 */

						currentComponent = "tFilterRow_6";

						/**
						 * [tFilterRow_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 process_data_end ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 end ] start
						 */

						currentComponent = "tDBInput_13";

					}
				} finally {
					if (rs_tDBInput_13 != null) {
						rs_tDBInput_13.close();
					}
					if (stmt_tDBInput_13 != null) {
						stmt_tDBInput_13.close();
					}
					if (conn_tDBInput_13 != null
							&& !conn_tDBInput_13.isClosed()) {

						conn_tDBInput_13.close();

					}

				}

				globalMap.put("tDBInput_13_NB_LINE", nb_line_tDBInput_13);

				ok_Hash.put("tDBInput_13", true);
				end_Hash.put("tDBInput_13", System.currentTimeMillis());

				/**
				 * [tDBInput_13 end ] stop
				 */

				/**
				 * [tFilterRow_6 end ] start
				 */

				currentComponent = "tFilterRow_6";

				globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
				globalMap.put("tFilterRow_6_NB_LINE_OK",
						nb_line_ok_tFilterRow_6);
				globalMap.put("tFilterRow_6_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row18" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFilterRow_6", true);
				end_Hash.put("tFilterRow_6", System.currentTimeMillis());

				/**
				 * [tFilterRow_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row19 end ] start
				 */

				currentComponent = "tAdvancedHash_row19";

				tHash_Lookup_row19.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row19" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row19", true);
				end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row19 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_13 finally ] start
				 */

				currentComponent = "tDBInput_13";

				/**
				 * [tDBInput_13 finally ] stop
				 */

				/**
				 * [tFilterRow_6 finally ] start
				 */

				currentComponent = "tFilterRow_6";

				/**
				 * [tFilterRow_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row19 finally ] start
				 */

				currentComponent = "tAdvancedHash_row19";

				/**
				 * [tAdvancedHash_row19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public long idpays;

		public long getIdpays() {
			return this.idpays;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public Integer id_user;

		public Integer getId_user() {
			return this.id_user;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String bloque;

		public String getBloque() {
			return this.bloque;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idclients = dis.readInt();

					this.idpays = dis.readLong();

					this.prenom = readString(dis);

					this.nom = readString(dis);

					this.telephone = readString(dis);

					this.adresse = readString(dis);

					this.id_user = readInteger(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.bloque = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idclients);

				// long

				dos.writeLong(this.idpays);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.adresse, dos);

				// Integer

				writeInteger(this.id_user, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// String

				writeString(this.bloque, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idclients=" + String.valueOf(idclients));
			sb.append(",idpays=" + String.valueOf(idpays));
			sb.append(",prenom=" + prenom);
			sb.append(",nom=" + nom);
			sb.append(",telephone=" + telephone);
			sb.append(",adresse=" + adresse);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",bloque=" + bloque);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public long idpays;

		public long getIdpays() {
			return this.idpays;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public Integer id_user;

		public Integer getId_user() {
			return this.id_user;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String bloque;

		public String getBloque() {
			return this.bloque;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idclients;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row21Struct other = (row21Struct) obj;

			if (this.idclients != other.idclients)
				return false;

			return true;
		}

		public void copyDataTo(row21Struct other) {

			other.idclients = this.idclients;
			other.idpays = this.idpays;
			other.prenom = this.prenom;
			other.nom = this.nom;
			other.telephone = this.telephone;
			other.adresse = this.adresse;
			other.id_user = this.id_user;
			other.date_creation = this.date_creation;
			other.date_last_modif = this.date_last_modif;
			other.est_supprime = this.est_supprime;
			other.bloque = this.bloque;

		}

		public void copyKeysDataTo(row21Struct other) {

			other.idclients = this.idclients;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idclients = dis.readInt();

					this.idpays = dis.readLong();

					this.prenom = readString(dis);

					this.nom = readString(dis);

					this.telephone = readString(dis);

					this.adresse = readString(dis);

					this.id_user = readInteger(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.bloque = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idclients);

				// long

				dos.writeLong(this.idpays);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.adresse, dos);

				// Integer

				writeInteger(this.id_user, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// String

				writeString(this.bloque, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idclients=" + String.valueOf(idclients));
			sb.append(",idpays=" + String.valueOf(idpays));
			sb.append(",prenom=" + prenom);
			sb.append(",nom=" + nom);
			sb.append(",telephone=" + telephone);
			sb.append(",adresse=" + adresse);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",bloque=" + bloque);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idclients, other.idclients);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();
				row22Struct row22 = new row22Struct();

				/**
				 * [tAdvancedHash_row22 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row22", false);
				start_Hash.put("tAdvancedHash_row22",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row22";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row22" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row22 = 0;

				// connection name:row22
				// source node:tFilterRow_8 - inputs:(row21)
				// outputs:(row22,row22) | target node:tAdvancedHash_row22 -
				// inputs:(row22) outputs:()
				// linked node: tMap_11 - inputs:(row20,row22)
				// outputs:(lesVersements)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row22Struct> getLookup(matchingModeEnum_row22);

				globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);

				/**
				 * [tAdvancedHash_row22 begin ] stop
				 */

				/**
				 * [tFilterRow_8 begin ] start
				 */

				ok_Hash.put("tFilterRow_8", false);
				start_Hash.put("tFilterRow_8", System.currentTimeMillis());

				currentComponent = "tFilterRow_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row21" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFilterRow_8 = 0;

				int nb_line_tFilterRow_8 = 0;
				int nb_line_ok_tFilterRow_8 = 0;
				int nb_line_reject_tFilterRow_8 = 0;

				class Operator_tFilterRow_8 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_8(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_8 begin ] stop
				 */

				/**
				 * [tDBInput_14 begin ] start
				 */

				ok_Hash.put("tDBInput_14", false);
				start_Hash.put("tDBInput_14", System.currentTimeMillis());

				currentComponent = "tDBInput_14";

				int tos_count_tDBInput_14 = 0;

				java.util.Calendar calendar_tDBInput_14 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_14.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_14 = calendar_tDBInput_14
						.getTime();
				int nb_line_tDBInput_14 = 0;
				java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_14);
				String dbUser_tDBInput_14 = "root";

				final String decryptedPassword_tDBInput_14 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;

				String url_tDBInput_14 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_14 = java.sql.DriverManager.getConnection(
						url_tDBInput_14, dbUser_tDBInput_14, dbPwd_tDBInput_14);

				java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14
						.createStatement();

				String dbquery_tDBInput_14 = "SELECT \n  `clients`.`idclients`, \n  `clients`.`idpays`, \n  `clients`.`prenom`, \n  `clients`.`nom`, \n  `clients`.`teleph"
						+ "one`, \n  `clients`.`adresse`, \n  `clients`.`id_user`, \n  `clients`.`date_creation`, \n  `clients`.`date_last_modif`, \n  `"
						+ "clients`.`est_supprime`, \n  `clients`.`bloque`\nFROM `clients`";

				globalMap.put("tDBInput_14_QUERY", dbquery_tDBInput_14);
				java.sql.ResultSet rs_tDBInput_14 = null;

				try {
					rs_tDBInput_14 = stmt_tDBInput_14
							.executeQuery(dbquery_tDBInput_14);
					java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14
							.getMetaData();
					int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14
							.getColumnCount();

					String tmpContent_tDBInput_14 = null;

					while (rs_tDBInput_14.next()) {
						nb_line_tDBInput_14++;

						if (colQtyInRs_tDBInput_14 < 1) {
							row21.idclients = 0;
						} else {

							if (rs_tDBInput_14.getObject(1) != null) {
								row21.idclients = rs_tDBInput_14.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_14 < 2) {
							row21.idpays = 0;
						} else {

							if (rs_tDBInput_14.getObject(2) != null) {
								row21.idpays = rs_tDBInput_14.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_14 < 3) {
							row21.prenom = null;
						} else {

							row21.prenom = routines.system.JDBCUtil.getString(
									rs_tDBInput_14, 3, false);
						}
						if (colQtyInRs_tDBInput_14 < 4) {
							row21.nom = null;
						} else {

							row21.nom = routines.system.JDBCUtil.getString(
									rs_tDBInput_14, 4, false);
						}
						if (colQtyInRs_tDBInput_14 < 5) {
							row21.telephone = null;
						} else {

							row21.telephone = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 5, false);
						}
						if (colQtyInRs_tDBInput_14 < 6) {
							row21.adresse = null;
						} else {

							row21.adresse = routines.system.JDBCUtil.getString(
									rs_tDBInput_14, 6, false);
						}
						if (colQtyInRs_tDBInput_14 < 7) {
							row21.id_user = null;
						} else {

							if (rs_tDBInput_14.getObject(7) != null) {
								row21.id_user = rs_tDBInput_14.getInt(7);
							} else {
								row21.id_user = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 8) {
							row21.date_creation = null;
						} else {

							if (rs_tDBInput_14.getString(8) != null) {
								String dateString_tDBInput_14 = rs_tDBInput_14
										.getString(8);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_14)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_14)) {
									row21.date_creation = rs_tDBInput_14
											.getTimestamp(8);
								} else {
									row21.date_creation = (java.util.Date) year0_tDBInput_14
											.clone();
								}
							} else {
								row21.date_creation = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 9) {
							row21.date_last_modif = null;
						} else {

							if (rs_tDBInput_14.getString(9) != null) {
								String dateString_tDBInput_14 = rs_tDBInput_14
										.getString(9);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_14)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_14)) {
									row21.date_last_modif = rs_tDBInput_14
											.getTimestamp(9);
								} else {
									row21.date_last_modif = (java.util.Date) year0_tDBInput_14
											.clone();
								}
							} else {
								row21.date_last_modif = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 10) {
							row21.est_supprime = null;
						} else {

							if (rs_tDBInput_14.getObject(10) != null) {
								row21.est_supprime = rs_tDBInput_14.getInt(10);
							} else {
								row21.est_supprime = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 11) {
							row21.bloque = null;
						} else {

							row21.bloque = routines.system.JDBCUtil.getString(
									rs_tDBInput_14, 11, false);
						}

						/**
						 * [tDBInput_14 begin ] stop
						 */

						/**
						 * [tDBInput_14 main ] start
						 */

						currentComponent = "tDBInput_14";

						tos_count_tDBInput_14++;

						/**
						 * [tDBInput_14 main ] stop
						 */

						/**
						 * [tDBInput_14 process_data_begin ] start
						 */

						currentComponent = "tDBInput_14";

						/**
						 * [tDBInput_14 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_8 main ] start
						 */

						currentComponent = "tFilterRow_8";

						// row21
						// row21

						if (execStat) {
							runStat.updateStatOnConnection("row21" + iterateId,
									1, 1);
						}

						row22 = null;
						row22 = null;
						Operator_tFilterRow_8 ope_tFilterRow_8 = new Operator_tFilterRow_8(
								"&&");
						ope_tFilterRow_8.matches((row21.est_supprime == null),
								"est_supprime==null failed");

						if (ope_tFilterRow_8.getMatchFlag()) {
							if (row22 == null) {
								row22 = new row22Struct();
							}
							row22.idclients = row21.idclients;
							row22.idpays = row21.idpays;
							row22.prenom = row21.prenom;
							row22.nom = row21.nom;
							row22.telephone = row21.telephone;
							row22.adresse = row21.adresse;
							row22.id_user = row21.id_user;
							row22.date_creation = row21.date_creation;
							row22.date_last_modif = row21.date_last_modif;
							row22.est_supprime = row21.est_supprime;
							row22.bloque = row21.bloque;
							if (row22 == null) {
								row22 = new row22Struct();
							}
							row22.idclients = row21.idclients;
							row22.idpays = row21.idpays;
							row22.prenom = row21.prenom;
							row22.nom = row21.nom;
							row22.telephone = row21.telephone;
							row22.adresse = row21.adresse;
							row22.id_user = row21.id_user;
							row22.date_creation = row21.date_creation;
							row22.date_last_modif = row21.date_last_modif;
							row22.est_supprime = row21.est_supprime;
							row22.bloque = row21.bloque;
							nb_line_ok_tFilterRow_8++;
						} else {
							nb_line_reject_tFilterRow_8++;
						}

						nb_line_tFilterRow_8++;

						tos_count_tFilterRow_8++;

						/**
						 * [tFilterRow_8 main ] stop
						 */

						/**
						 * [tFilterRow_8 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_8";

						/**
						 * [tFilterRow_8 process_data_begin ] stop
						 */
						// Start of branch "row22"
						if (row22 != null) {

							/**
							 * [tAdvancedHash_row22 main ] start
							 */

							currentComponent = "tAdvancedHash_row22";

							// row22
							// row22

							if (execStat) {
								runStat.updateStatOnConnection("row22"
										+ iterateId, 1, 1);
							}

							row22Struct row22_HashRow = new row22Struct();

							row22_HashRow.idclients = row22.idclients;

							row22_HashRow.idpays = row22.idpays;

							row22_HashRow.prenom = row22.prenom;

							row22_HashRow.nom = row22.nom;

							row22_HashRow.telephone = row22.telephone;

							row22_HashRow.adresse = row22.adresse;

							row22_HashRow.id_user = row22.id_user;

							row22_HashRow.date_creation = row22.date_creation;

							row22_HashRow.date_last_modif = row22.date_last_modif;

							row22_HashRow.est_supprime = row22.est_supprime;

							row22_HashRow.bloque = row22.bloque;

							tHash_Lookup_row22.put(row22_HashRow);

							tos_count_tAdvancedHash_row22++;

							/**
							 * [tAdvancedHash_row22 main ] stop
							 */

							/**
							 * [tAdvancedHash_row22 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row22";

							/**
							 * [tAdvancedHash_row22 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row22 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row22";

							/**
							 * [tAdvancedHash_row22 process_data_end ] stop
							 */

						} // End of branch "row22"

						/**
						 * [tFilterRow_8 process_data_end ] start
						 */

						currentComponent = "tFilterRow_8";

						/**
						 * [tFilterRow_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_14 process_data_end ] start
						 */

						currentComponent = "tDBInput_14";

						/**
						 * [tDBInput_14 process_data_end ] stop
						 */

						/**
						 * [tDBInput_14 end ] start
						 */

						currentComponent = "tDBInput_14";

					}
				} finally {
					if (rs_tDBInput_14 != null) {
						rs_tDBInput_14.close();
					}
					if (stmt_tDBInput_14 != null) {
						stmt_tDBInput_14.close();
					}
					if (conn_tDBInput_14 != null
							&& !conn_tDBInput_14.isClosed()) {

						conn_tDBInput_14.close();

					}

				}

				globalMap.put("tDBInput_14_NB_LINE", nb_line_tDBInput_14);

				ok_Hash.put("tDBInput_14", true);
				end_Hash.put("tDBInput_14", System.currentTimeMillis());

				/**
				 * [tDBInput_14 end ] stop
				 */

				/**
				 * [tFilterRow_8 end ] start
				 */

				currentComponent = "tFilterRow_8";

				globalMap.put("tFilterRow_8_NB_LINE", nb_line_tFilterRow_8);
				globalMap.put("tFilterRow_8_NB_LINE_OK",
						nb_line_ok_tFilterRow_8);
				globalMap.put("tFilterRow_8_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_8);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row21" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFilterRow_8", true);
				end_Hash.put("tFilterRow_8", System.currentTimeMillis());

				/**
				 * [tFilterRow_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row22 end ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				tHash_Lookup_row22.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row22" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row22", true);
				end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row22 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_14 finally ] start
				 */

				currentComponent = "tDBInput_14";

				/**
				 * [tDBInput_14 finally ] stop
				 */

				/**
				 * [tFilterRow_8 finally ] start
				 */

				currentComponent = "tFilterRow_8";

				/**
				 * [tFilterRow_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row22 finally ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				/**
				 * [tAdvancedHash_row22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}

	public static class lesPartsCommandesStruct implements
			routines.system.IPersistableRow<lesPartsCommandesStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idcommande;

		public int getIdcommande() {
			return this.idcommande;
		}

		public Double quantite_totale;

		public Double getQuantite_totale() {
			return this.quantite_totale;
		}

		public Double quantite_decomp;

		public Double getQuantite_decomp() {
			return this.quantite_decomp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idcommande;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lesPartsCommandesStruct other = (lesPartsCommandesStruct) obj;

			if (this.idcommande != other.idcommande)
				return false;

			return true;
		}

		public void copyDataTo(lesPartsCommandesStruct other) {

			other.idcommande = this.idcommande;
			other.quantite_totale = this.quantite_totale;
			other.quantite_decomp = this.quantite_decomp;

		}

		public void copyKeysDataTo(lesPartsCommandesStruct other) {

			other.idcommande = this.idcommande;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idcommande = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.quantite_totale = null;
					} else {
						this.quantite_totale = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.quantite_decomp = null;
					} else {
						this.quantite_decomp = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idcommande);

				// Double

				if (this.quantite_totale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite_totale);
				}

				// Double

				if (this.quantite_decomp == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite_decomp);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcommande=" + String.valueOf(idcommande));
			sb.append(",quantite_totale=" + String.valueOf(quantite_totale));
			sb.append(",quantite_decomp=" + String.valueOf(quantite_decomp));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lesPartsCommandesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idcommande,
					other.idcommande);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public int idcommande;

		public int getIdcommande() {
			return this.idcommande;
		}

		public Double quantite;

		public Double getQuantite() {
			return this.quantite;
		}

		public Double quantite_decompose;

		public Double getQuantite_decompose() {
			return this.quantite_decompose;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idcommande = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.quantite = null;
					} else {
						this.quantite = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.quantite_decompose = null;
					} else {
						this.quantite_decompose = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idcommande);

				// Double

				if (this.quantite == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite);
				}

				// Double

				if (this.quantite_decompose == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite_decompose);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idcommande=" + String.valueOf(idcommande));
			sb.append(",quantite=" + String.valueOf(quantite));
			sb.append(",quantite_decompose="
					+ String.valueOf(quantite_decompose));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();
				lesPartsCommandesStruct lesPartsCommandes = new lesPartsCommandesStruct();

				/**
				 * [tDBOutput_12 begin ] start
				 */

				ok_Hash.put("tDBOutput_12", false);
				start_Hash.put("tDBOutput_12", System.currentTimeMillis());

				currentComponent = "tDBOutput_12";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lesPartsCommandes"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_12 = 0;

				int nb_line_tDBOutput_12 = 0;
				int nb_line_update_tDBOutput_12 = 0;
				int nb_line_inserted_tDBOutput_12 = 0;
				int nb_line_deleted_tDBOutput_12 = 0;
				int nb_line_rejected_tDBOutput_12 = 0;

				int deletedCount_tDBOutput_12 = 0;
				int updatedCount_tDBOutput_12 = 0;
				int insertedCount_tDBOutput_12 = 0;
				int rejectedCount_tDBOutput_12 = 0;
				String dbschema_tDBOutput_12 = null;
				String tableName_tDBOutput_12 = null;
				boolean whetherReject_tDBOutput_12 = false;

				java.util.Calendar calendar_tDBOutput_12 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_12 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_12 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_12 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_12;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_12 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_12 = 1;
				if (insertKeyCount_tDBOutput_12 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_12 = null;
				String dbUser_tDBOutput_12 = null;
				dbschema_tDBOutput_12 = "dbo";
				String driverClass_tDBOutput_12 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_12);
				String port_tDBOutput_12 = "1433";
				String dbname_tDBOutput_12 = "PROJET_DW";
				String url_tDBOutput_12 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_12)) {
					url_tDBOutput_12 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_12)) {
					url_tDBOutput_12 += "//" + "PROJET_DW";

				}
				url_tDBOutput_12 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_12 = "sa";

				final String decryptedPassword_tDBOutput_12 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_12 = decryptedPassword_tDBOutput_12;
				conn_tDBOutput_12 = java.sql.DriverManager.getConnection(
						url_tDBOutput_12, dbUser_tDBOutput_12,
						dbPwd_tDBOutput_12);

				resourceMap.put("conn_tDBOutput_12", conn_tDBOutput_12);

				conn_tDBOutput_12.setAutoCommit(false);
				int commitEvery_tDBOutput_12 = 10000;
				int commitCounter_tDBOutput_12 = 0;

				if (dbschema_tDBOutput_12 == null
						|| dbschema_tDBOutput_12.trim().length() == 0) {
					tableName_tDBOutput_12 = "FAIT_PART_CLIENT_COMMANDE";
				} else {
					tableName_tDBOutput_12 = dbschema_tDBOutput_12 + "].["
							+ "FAIT_PART_CLIENT_COMMANDE";
				}
				int count_tDBOutput_12 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_12 = conn_tDBOutput_12
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_12
								+ "] WHERE [idcommande] = ?");
				resourceMap.put("pstmt_tDBOutput_12", pstmt_tDBOutput_12);
				String insert_tDBOutput_12 = "INSERT INTO ["
						+ tableName_tDBOutput_12
						+ "] ([idcommande],[quantite_totale],[quantite_decomp]) VALUES (?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_12 = conn_tDBOutput_12
						.prepareStatement(insert_tDBOutput_12);
				resourceMap.put("pstmtInsert_tDBOutput_12",
						pstmtInsert_tDBOutput_12);

				/**
				 * [tDBOutput_12 begin ] stop
				 */

				/**
				 * [tMap_12 begin ] start
				 */

				ok_Hash.put("tMap_12", false);
				start_Hash.put("tMap_12", System.currentTimeMillis());

				currentComponent = "tMap_12";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row23" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_12 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_12__Struct {
				}
				Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lesPartsCommandesStruct lesPartsCommandes_tmp = new lesPartsCommandesStruct();
				// ###############################

				/**
				 * [tMap_12 begin ] stop
				 */

				/**
				 * [tDBInput_15 begin ] start
				 */

				ok_Hash.put("tDBInput_15", false);
				start_Hash.put("tDBInput_15", System.currentTimeMillis());

				currentComponent = "tDBInput_15";

				int tos_count_tDBInput_15 = 0;

				java.util.Calendar calendar_tDBInput_15 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_15.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_15 = calendar_tDBInput_15
						.getTime();
				int nb_line_tDBInput_15 = 0;
				java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = "root";

				final String decryptedPassword_tDBInput_15 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;

				String url_tDBInput_15 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_15 = java.sql.DriverManager.getConnection(
						url_tDBInput_15, dbUser_tDBInput_15, dbPwd_tDBInput_15);

				java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15
						.createStatement();

				String dbquery_tDBInput_15 = "select commande.idcommande,commande.quantite as quantite_commande,ifnull(sum(part_client_commande.quantite),commande.qu"
						+ "antite) as quantite_decompose\n from commande  left join part_client_commande\n on commande.idcommande=part_client_comma"
						+ "nde.idcommande group by idcommande";

				globalMap.put("tDBInput_15_QUERY", dbquery_tDBInput_15);
				java.sql.ResultSet rs_tDBInput_15 = null;

				try {
					rs_tDBInput_15 = stmt_tDBInput_15
							.executeQuery(dbquery_tDBInput_15);
					java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15
							.getMetaData();
					int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15
							.getColumnCount();

					String tmpContent_tDBInput_15 = null;

					while (rs_tDBInput_15.next()) {
						nb_line_tDBInput_15++;

						if (colQtyInRs_tDBInput_15 < 1) {
							row23.idcommande = 0;
						} else {

							if (rs_tDBInput_15.getObject(1) != null) {
								row23.idcommande = rs_tDBInput_15.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 2) {
							row23.quantite = null;
						} else {

							if (rs_tDBInput_15.getObject(2) != null) {
								row23.quantite = rs_tDBInput_15.getDouble(2);
							} else {
								row23.quantite = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 3) {
							row23.quantite_decompose = null;
						} else {

							if (rs_tDBInput_15.getObject(3) != null) {
								row23.quantite_decompose = rs_tDBInput_15
										.getDouble(3);
							} else {
								row23.quantite_decompose = null;
							}
						}

						/**
						 * [tDBInput_15 begin ] stop
						 */

						/**
						 * [tDBInput_15 main ] start
						 */

						currentComponent = "tDBInput_15";

						tos_count_tDBInput_15++;

						/**
						 * [tDBInput_15 main ] stop
						 */

						/**
						 * [tDBInput_15 process_data_begin ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_begin ] stop
						 */

						/**
						 * [tMap_12 main ] start
						 */

						currentComponent = "tMap_12";

						// row23
						// row23

						if (execStat) {
							runStat.updateStatOnConnection("row23" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_12 = false;
						boolean mainRowRejected_tMap_12 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
							// ###############################
							// # Output tables

							lesPartsCommandes = null;

							// # Output table : 'lesPartsCommandes'
							lesPartsCommandes_tmp.idcommande = row23.idcommande;
							lesPartsCommandes_tmp.quantite_totale = row23.quantite;
							lesPartsCommandes_tmp.quantite_decomp = row23.quantite_decompose;
							lesPartsCommandes = lesPartsCommandes_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_12 = false;

						tos_count_tMap_12++;

						/**
						 * [tMap_12 main ] stop
						 */

						/**
						 * [tMap_12 process_data_begin ] start
						 */

						currentComponent = "tMap_12";

						/**
						 * [tMap_12 process_data_begin ] stop
						 */
						// Start of branch "lesPartsCommandes"
						if (lesPartsCommandes != null) {

							/**
							 * [tDBOutput_12 main ] start
							 */

							currentComponent = "tDBOutput_12";

							// lesPartsCommandes
							// lesPartsCommandes

							if (execStat) {
								runStat.updateStatOnConnection(
										"lesPartsCommandes" + iterateId, 1, 1);
							}

							whetherReject_tDBOutput_12 = false;

							pstmt_tDBOutput_12.setInt(1,
									lesPartsCommandes.idcommande);

							java.sql.ResultSet rs_tDBOutput_12 = pstmt_tDBOutput_12
									.executeQuery();
							int checkCount_tDBOutput_12 = -1;
							while (rs_tDBOutput_12.next()) {
								checkCount_tDBOutput_12 = rs_tDBOutput_12
										.getInt(1);
							}

							if (checkCount_tDBOutput_12 < 1) {
								pstmtInsert_tDBOutput_12.setInt(1,
										lesPartsCommandes.idcommande);

								if (lesPartsCommandes.quantite_totale == null) {
									pstmtInsert_tDBOutput_12.setNull(2,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_12.setDouble(2,
											lesPartsCommandes.quantite_totale);
								}

								if (lesPartsCommandes.quantite_decomp == null) {
									pstmtInsert_tDBOutput_12.setNull(3,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_12.setDouble(3,
											lesPartsCommandes.quantite_decomp);
								}

								try {
									insertedCount_tDBOutput_12 = insertedCount_tDBOutput_12
											+ pstmtInsert_tDBOutput_12
													.executeUpdate();
									nb_line_tDBOutput_12++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_12 = true;
									nb_line_tDBOutput_12++;

									System.err.print(e.getMessage());
								}
							}
							// ////////batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_12 {
								public int limitBytePart1(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_12)
										throws Exception {
									try {

										for (int countEach_tDBOutput_12 : pstmt_tDBOutput_12
												.executeBatch()) {
											if (countEach_tDBOutput_12 == -2
													|| countEach_tDBOutput_12 == -3) {
												break;
											}
											counter += countEach_tDBOutput_12;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_12 = 0;
										for (int countEach_tDBOutput_12 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_12 < 0 ? 0
													: countEach_tDBOutput_12);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_12)
										throws Exception {
									try {

										for (int countEach_tDBOutput_12 : pstmt_tDBOutput_12
												.executeBatch()) {
											if (countEach_tDBOutput_12 == -2
													|| countEach_tDBOutput_12 == -3) {
												break;
											}
											counter += countEach_tDBOutput_12;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_12 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_12 < 0 ? 0
													: countEach_tDBOutput_12);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							// //////////commit every////////////

							commitCounter_tDBOutput_12++;
							if (commitEvery_tDBOutput_12 <= commitCounter_tDBOutput_12) {

								conn_tDBOutput_12.commit();

								commitCounter_tDBOutput_12 = 0;
							}

							tos_count_tDBOutput_12++;

							/**
							 * [tDBOutput_12 main ] stop
							 */

							/**
							 * [tDBOutput_12 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_12";

							/**
							 * [tDBOutput_12 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_12 process_data_end ] start
							 */

							currentComponent = "tDBOutput_12";

							/**
							 * [tDBOutput_12 process_data_end ] stop
							 */

						} // End of branch "lesPartsCommandes"

						/**
						 * [tMap_12 process_data_end ] start
						 */

						currentComponent = "tMap_12";

						/**
						 * [tMap_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 process_data_end ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 end ] start
						 */

						currentComponent = "tDBInput_15";

					}
				} finally {
					if (rs_tDBInput_15 != null) {
						rs_tDBInput_15.close();
					}
					if (stmt_tDBInput_15 != null) {
						stmt_tDBInput_15.close();
					}
					if (conn_tDBInput_15 != null
							&& !conn_tDBInput_15.isClosed()) {

						conn_tDBInput_15.close();

					}

				}

				globalMap.put("tDBInput_15_NB_LINE", nb_line_tDBInput_15);

				ok_Hash.put("tDBInput_15", true);
				end_Hash.put("tDBInput_15", System.currentTimeMillis());

				/**
				 * [tDBInput_15 end ] stop
				 */

				/**
				 * [tMap_12 end ] start
				 */

				currentComponent = "tMap_12";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row23" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_12", true);
				end_Hash.put("tMap_12", System.currentTimeMillis());

				/**
				 * [tMap_12 end ] stop
				 */

				/**
				 * [tDBOutput_12 end ] start
				 */

				currentComponent = "tDBOutput_12";

				if (pstmtInsert_tDBOutput_12 != null) {
					pstmtInsert_tDBOutput_12.close();
					resourceMap.remove("pstmtInsert_tDBOutput_12");
				}
				if (pstmt_tDBOutput_12 != null) {
					pstmt_tDBOutput_12.close();
					resourceMap.remove("pstmt_tDBOutput_12");
				}
				resourceMap.put("statementClosed_tDBOutput_12", true);
				conn_tDBOutput_12.commit();

				conn_tDBOutput_12.close();
				resourceMap.put("finish_tDBOutput_12", true);

				nb_line_deleted_tDBOutput_12 = nb_line_deleted_tDBOutput_12
						+ deletedCount_tDBOutput_12;
				nb_line_update_tDBOutput_12 = nb_line_update_tDBOutput_12
						+ updatedCount_tDBOutput_12;
				nb_line_inserted_tDBOutput_12 = nb_line_inserted_tDBOutput_12
						+ insertedCount_tDBOutput_12;
				nb_line_rejected_tDBOutput_12 = nb_line_rejected_tDBOutput_12
						+ rejectedCount_tDBOutput_12;

				globalMap.put("tDBOutput_12_NB_LINE", nb_line_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_12);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lesPartsCommandes"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_12", true);
				end_Hash.put("tDBOutput_12", System.currentTimeMillis());

				/**
				 * [tDBOutput_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_15 finally ] start
				 */

				currentComponent = "tDBInput_15";

				/**
				 * [tDBInput_15 finally ] stop
				 */

				/**
				 * [tMap_12 finally ] start
				 */

				currentComponent = "tMap_12";

				/**
				 * [tMap_12 finally ] stop
				 */

				/**
				 * [tDBOutput_12 finally ] start
				 */

				currentComponent = "tDBOutput_12";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_12") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_12 = null;
						if ((pstmtToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_12")) != null) {
							pstmtToClose_tDBOutput_12.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_12") == null) {
						java.sql.Connection ctn_tDBOutput_12 = null;
						if ((ctn_tDBOutput_12 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_12")) != null) {
							try {
								ctn_tDBOutput_12.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_12) {
								String errorMessage_tDBOutput_12 = "failed to close the connection in tDBOutput_12 :"
										+ sqlEx_tDBOutput_12.getMessage();
								System.err.println(errorMessage_tDBOutput_12);
							}
						}
					}
				}

				/**
				 * [tDBOutput_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}

	public static class faitVersementRestantStruct implements
			routines.system.IPersistableRow<faitVersementRestantStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int DIM_CLIENTS_idclients;

		public int getDIM_CLIENTS_idclients() {
			return this.DIM_CLIENTS_idclients;
		}

		public Double montant_du;

		public Double getMontant_du() {
			return this.montant_du;
		}

		public Double montant_verse;

		public Double getMontant_verse() {
			return this.montant_verse;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.DIM_CLIENTS_idclients;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final faitVersementRestantStruct other = (faitVersementRestantStruct) obj;

			if (this.DIM_CLIENTS_idclients != other.DIM_CLIENTS_idclients)
				return false;

			return true;
		}

		public void copyDataTo(faitVersementRestantStruct other) {

			other.DIM_CLIENTS_idclients = this.DIM_CLIENTS_idclients;
			other.montant_du = this.montant_du;
			other.montant_verse = this.montant_verse;

		}

		public void copyKeysDataTo(faitVersementRestantStruct other) {

			other.DIM_CLIENTS_idclients = this.DIM_CLIENTS_idclients;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.DIM_CLIENTS_idclients = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.montant_du = null;
					} else {
						this.montant_du = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_verse = null;
					} else {
						this.montant_verse = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.DIM_CLIENTS_idclients);

				// Double

				if (this.montant_du == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_du);
				}

				// Double

				if (this.montant_verse == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_verse);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DIM_CLIENTS_idclients="
					+ String.valueOf(DIM_CLIENTS_idclients));
			sb.append(",montant_du=" + String.valueOf(montant_du));
			sb.append(",montant_verse=" + String.valueOf(montant_verse));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(faitVersementRestantStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DIM_CLIENTS_idclients,
					other.DIM_CLIENTS_idclients);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public Double montant_t_du;

		public Double getMontant_t_du() {
			return this.montant_t_du;
		}

		public Double montant_verse;

		public Double getMontant_verse() {
			return this.montant_verse;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idclients = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.montant_t_du = null;
					} else {
						this.montant_t_du = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_verse = null;
					} else {
						this.montant_verse = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idclients);

				// Double

				if (this.montant_t_du == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_t_du);
				}

				// Double

				if (this.montant_verse == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_verse);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idclients=" + String.valueOf(idclients));
			sb.append(",montant_t_du=" + String.valueOf(montant_t_du));
			sb.append(",montant_verse=" + String.valueOf(montant_verse));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_16Struct implements
			routines.system.IPersistableRow<after_tDBInput_16Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public Double montant_t_du;

		public Double getMontant_t_du() {
			return this.montant_t_du;
		}

		public Double montant_verse;

		public Double getMontant_verse() {
			return this.montant_verse;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idclients = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.montant_t_du = null;
					} else {
						this.montant_t_du = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_verse = null;
					} else {
						this.montant_verse = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idclients);

				// Double

				if (this.montant_t_du == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_t_du);
				}

				// Double

				if (this.montant_verse == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant_verse);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idclients=" + String.valueOf(idclients));
			sb.append(",montant_t_du=" + String.valueOf(montant_t_du));
			sb.append(",montant_verse=" + String.valueOf(montant_verse));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_16Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_17Process(globalMap);

				row24Struct row24 = new row24Struct();
				faitVersementRestantStruct faitVersementRestant = new faitVersementRestantStruct();

				/**
				 * [tDBOutput_13 begin ] start
				 */

				ok_Hash.put("tDBOutput_13", false);
				start_Hash.put("tDBOutput_13", System.currentTimeMillis());

				currentComponent = "tDBOutput_13";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("faitVersementRestant"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_13 = 0;

				int nb_line_tDBOutput_13 = 0;
				int nb_line_update_tDBOutput_13 = 0;
				int nb_line_inserted_tDBOutput_13 = 0;
				int nb_line_deleted_tDBOutput_13 = 0;
				int nb_line_rejected_tDBOutput_13 = 0;

				int deletedCount_tDBOutput_13 = 0;
				int updatedCount_tDBOutput_13 = 0;
				int insertedCount_tDBOutput_13 = 0;
				int rejectedCount_tDBOutput_13 = 0;
				String dbschema_tDBOutput_13 = null;
				String tableName_tDBOutput_13 = null;
				boolean whetherReject_tDBOutput_13 = false;

				java.util.Calendar calendar_tDBOutput_13 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_13 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_13 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_13 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_13;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_13 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_13 = 1;
				if (insertKeyCount_tDBOutput_13 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_13 = null;
				String dbUser_tDBOutput_13 = null;
				dbschema_tDBOutput_13 = "dbo";
				String driverClass_tDBOutput_13 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_13);
				String port_tDBOutput_13 = "1433";
				String dbname_tDBOutput_13 = "PROJET_DW";
				String url_tDBOutput_13 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_13)) {
					url_tDBOutput_13 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_13)) {
					url_tDBOutput_13 += "//" + "PROJET_DW";

				}
				url_tDBOutput_13 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_13 = "sa";

				final String decryptedPassword_tDBOutput_13 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_13 = decryptedPassword_tDBOutput_13;
				conn_tDBOutput_13 = java.sql.DriverManager.getConnection(
						url_tDBOutput_13, dbUser_tDBOutput_13,
						dbPwd_tDBOutput_13);

				resourceMap.put("conn_tDBOutput_13", conn_tDBOutput_13);

				conn_tDBOutput_13.setAutoCommit(false);
				int commitEvery_tDBOutput_13 = 10000;
				int commitCounter_tDBOutput_13 = 0;

				if (dbschema_tDBOutput_13 == null
						|| dbschema_tDBOutput_13.trim().length() == 0) {
					tableName_tDBOutput_13 = "FAIT_VERSEMENT_RESTANT";
				} else {
					tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "].["
							+ "FAIT_VERSEMENT_RESTANT";
				}
				int count_tDBOutput_13 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_13
								+ "] WHERE [DIM_CLIENTS_idclients] = ?");
				resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);
				String insert_tDBOutput_13 = "INSERT INTO ["
						+ tableName_tDBOutput_13
						+ "] ([DIM_CLIENTS_idclients],[montant_du],[montant_verse]) VALUES (?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_13 = conn_tDBOutput_13
						.prepareStatement(insert_tDBOutput_13);
				resourceMap.put("pstmtInsert_tDBOutput_13",
						pstmtInsert_tDBOutput_13);

				/**
				 * [tDBOutput_13 begin ] stop
				 */

				/**
				 * [tMap_13 begin ] start
				 */

				ok_Hash.put("tMap_13", false);
				start_Hash.put("tMap_13", System.currentTimeMillis());

				currentComponent = "tMap_13";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row24" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_13 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) globalMap
						.get("tHash_Lookup_row26"));

				row26Struct row26HashKey = new row26Struct();
				row26Struct row26Default = new row26Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_13__Struct {
				}
				Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				faitVersementRestantStruct faitVersementRestant_tmp = new faitVersementRestantStruct();
				// ###############################

				/**
				 * [tMap_13 begin ] stop
				 */

				/**
				 * [tDBInput_16 begin ] start
				 */

				ok_Hash.put("tDBInput_16", false);
				start_Hash.put("tDBInput_16", System.currentTimeMillis());

				currentComponent = "tDBInput_16";

				int tos_count_tDBInput_16 = 0;

				java.util.Calendar calendar_tDBInput_16 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_16.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_16 = calendar_tDBInput_16
						.getTime();
				int nb_line_tDBInput_16 = 0;
				java.sql.Connection conn_tDBInput_16 = null;
				String driverClass_tDBInput_16 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_16);
				String dbUser_tDBInput_16 = "root";

				final String decryptedPassword_tDBInput_16 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_16 = decryptedPassword_tDBInput_16;

				String url_tDBInput_16 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_16 = java.sql.DriverManager.getConnection(
						url_tDBInput_16, dbUser_tDBInput_16, dbPwd_tDBInput_16);

				java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16
						.createStatement();

				String dbquery_tDBInput_16 = "select montant_du.idclients,montant_du.montant_t_du,sum(versement.montant_v) as montant_verse from montant_du\nleft joi"
						+ "n versement\non montant_du.idclients=versement.idclients group by idclients";

				globalMap.put("tDBInput_16_QUERY", dbquery_tDBInput_16);
				java.sql.ResultSet rs_tDBInput_16 = null;

				try {
					rs_tDBInput_16 = stmt_tDBInput_16
							.executeQuery(dbquery_tDBInput_16);
					java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16
							.getMetaData();
					int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16
							.getColumnCount();

					String tmpContent_tDBInput_16 = null;

					while (rs_tDBInput_16.next()) {
						nb_line_tDBInput_16++;

						if (colQtyInRs_tDBInput_16 < 1) {
							row24.idclients = 0;
						} else {

							if (rs_tDBInput_16.getObject(1) != null) {
								row24.idclients = rs_tDBInput_16.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 2) {
							row24.montant_t_du = null;
						} else {

							if (rs_tDBInput_16.getObject(2) != null) {
								row24.montant_t_du = rs_tDBInput_16
										.getDouble(2);
							} else {
								row24.montant_t_du = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 3) {
							row24.montant_verse = null;
						} else {

							if (rs_tDBInput_16.getObject(3) != null) {
								row24.montant_verse = rs_tDBInput_16
										.getDouble(3);
							} else {
								row24.montant_verse = null;
							}
						}

						/**
						 * [tDBInput_16 begin ] stop
						 */

						/**
						 * [tDBInput_16 main ] start
						 */

						currentComponent = "tDBInput_16";

						tos_count_tDBInput_16++;

						/**
						 * [tDBInput_16 main ] stop
						 */

						/**
						 * [tDBInput_16 process_data_begin ] start
						 */

						currentComponent = "tDBInput_16";

						/**
						 * [tDBInput_16 process_data_begin ] stop
						 */

						/**
						 * [tMap_13 main ] start
						 */

						currentComponent = "tMap_13";

						// row24
						// row24

						if (execStat) {
							runStat.updateStatOnConnection("row24" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_13 = false;
						boolean mainRowRejected_tMap_13 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row26"
						// /////////////////////////////////////////////

						boolean forceLooprow26 = false;

						row26Struct row26ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_13) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_13 = false;

							Object exprKeyValue_row26__idclients = row24.idclients;
							if (exprKeyValue_row26__idclients == null) {
								hasCasePrimitiveKeyWithNull_tMap_13 = true;
							} else {
								row26HashKey.idclients = (int) (Integer) exprKeyValue_row26__idclients;
							}

							row26HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_13) { // G_TM_M_091

								tHash_Lookup_row26.lookup(row26HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_13
									|| !tHash_Lookup_row26.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_13 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row26 != null
								&& tHash_Lookup_row26.getCount(row26HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row26' and it contains more one result from keys :  row26.idclients = '"
							// + row26HashKey.idclients + "'");
						} // G 071

						row26Struct row26 = null;

						row26Struct fromLookup_row26 = null;
						row26 = row26Default;

						if (tHash_Lookup_row26 != null
								&& tHash_Lookup_row26.hasNext()) { // G 099

							fromLookup_row26 = tHash_Lookup_row26.next();

						} // G 099

						if (fromLookup_row26 != null) {
							row26 = fromLookup_row26;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
							// ###############################
							// # Output tables

							faitVersementRestant = null;

							if (!rejectedInnerJoin_tMap_13) {

								// # Output table : 'faitVersementRestant'
								faitVersementRestant_tmp.DIM_CLIENTS_idclients = row24.idclients;
								faitVersementRestant_tmp.montant_du = row24.montant_t_du;
								faitVersementRestant_tmp.montant_verse = row24.montant_verse;
								faitVersementRestant = faitVersementRestant_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_13 = false;

						tos_count_tMap_13++;

						/**
						 * [tMap_13 main ] stop
						 */

						/**
						 * [tMap_13 process_data_begin ] start
						 */

						currentComponent = "tMap_13";

						/**
						 * [tMap_13 process_data_begin ] stop
						 */
						// Start of branch "faitVersementRestant"
						if (faitVersementRestant != null) {

							/**
							 * [tDBOutput_13 main ] start
							 */

							currentComponent = "tDBOutput_13";

							// faitVersementRestant
							// faitVersementRestant

							if (execStat) {
								runStat.updateStatOnConnection(
										"faitVersementRestant" + iterateId, 1,
										1);
							}

							whetherReject_tDBOutput_13 = false;

							pstmt_tDBOutput_13.setInt(1,
									faitVersementRestant.DIM_CLIENTS_idclients);

							java.sql.ResultSet rs_tDBOutput_13 = pstmt_tDBOutput_13
									.executeQuery();
							int checkCount_tDBOutput_13 = -1;
							while (rs_tDBOutput_13.next()) {
								checkCount_tDBOutput_13 = rs_tDBOutput_13
										.getInt(1);
							}

							if (checkCount_tDBOutput_13 < 1) {
								pstmtInsert_tDBOutput_13
										.setInt(1,
												faitVersementRestant.DIM_CLIENTS_idclients);

								if (faitVersementRestant.montant_du == null) {
									pstmtInsert_tDBOutput_13.setNull(2,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_13.setDouble(2,
											faitVersementRestant.montant_du);
								}

								if (faitVersementRestant.montant_verse == null) {
									pstmtInsert_tDBOutput_13.setNull(3,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_13.setDouble(3,
											faitVersementRestant.montant_verse);
								}

								try {
									insertedCount_tDBOutput_13 = insertedCount_tDBOutput_13
											+ pstmtInsert_tDBOutput_13
													.executeUpdate();
									nb_line_tDBOutput_13++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_13 = true;
									nb_line_tDBOutput_13++;

									System.err.print(e.getMessage());
								}
							}
							// ////////batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_13 {
								public int limitBytePart1(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_13)
										throws Exception {
									try {

										for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13
												.executeBatch()) {
											if (countEach_tDBOutput_13 == -2
													|| countEach_tDBOutput_13 == -3) {
												break;
											}
											counter += countEach_tDBOutput_13;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_13 = 0;
										for (int countEach_tDBOutput_13 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_13 < 0 ? 0
													: countEach_tDBOutput_13);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_13)
										throws Exception {
									try {

										for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13
												.executeBatch()) {
											if (countEach_tDBOutput_13 == -2
													|| countEach_tDBOutput_13 == -3) {
												break;
											}
											counter += countEach_tDBOutput_13;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_13 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_13 < 0 ? 0
													: countEach_tDBOutput_13);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							// //////////commit every////////////

							commitCounter_tDBOutput_13++;
							if (commitEvery_tDBOutput_13 <= commitCounter_tDBOutput_13) {

								conn_tDBOutput_13.commit();

								commitCounter_tDBOutput_13 = 0;
							}

							tos_count_tDBOutput_13++;

							/**
							 * [tDBOutput_13 main ] stop
							 */

							/**
							 * [tDBOutput_13 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_13";

							/**
							 * [tDBOutput_13 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_13 process_data_end ] start
							 */

							currentComponent = "tDBOutput_13";

							/**
							 * [tDBOutput_13 process_data_end ] stop
							 */

						} // End of branch "faitVersementRestant"

						/**
						 * [tMap_13 process_data_end ] start
						 */

						currentComponent = "tMap_13";

						/**
						 * [tMap_13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_16 process_data_end ] start
						 */

						currentComponent = "tDBInput_16";

						/**
						 * [tDBInput_16 process_data_end ] stop
						 */

						/**
						 * [tDBInput_16 end ] start
						 */

						currentComponent = "tDBInput_16";

					}
				} finally {
					if (rs_tDBInput_16 != null) {
						rs_tDBInput_16.close();
					}
					if (stmt_tDBInput_16 != null) {
						stmt_tDBInput_16.close();
					}
					if (conn_tDBInput_16 != null
							&& !conn_tDBInput_16.isClosed()) {

						conn_tDBInput_16.close();

					}

				}

				globalMap.put("tDBInput_16_NB_LINE", nb_line_tDBInput_16);

				ok_Hash.put("tDBInput_16", true);
				end_Hash.put("tDBInput_16", System.currentTimeMillis());

				/**
				 * [tDBInput_16 end ] stop
				 */

				/**
				 * [tMap_13 end ] start
				 */

				currentComponent = "tMap_13";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row26 != null) {
					tHash_Lookup_row26.endGet();
				}
				globalMap.remove("tHash_Lookup_row26");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row24" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_13", true);
				end_Hash.put("tMap_13", System.currentTimeMillis());

				/**
				 * [tMap_13 end ] stop
				 */

				/**
				 * [tDBOutput_13 end ] start
				 */

				currentComponent = "tDBOutput_13";

				if (pstmtInsert_tDBOutput_13 != null) {
					pstmtInsert_tDBOutput_13.close();
					resourceMap.remove("pstmtInsert_tDBOutput_13");
				}
				if (pstmt_tDBOutput_13 != null) {
					pstmt_tDBOutput_13.close();
					resourceMap.remove("pstmt_tDBOutput_13");
				}
				resourceMap.put("statementClosed_tDBOutput_13", true);
				conn_tDBOutput_13.commit();

				conn_tDBOutput_13.close();
				resourceMap.put("finish_tDBOutput_13", true);

				nb_line_deleted_tDBOutput_13 = nb_line_deleted_tDBOutput_13
						+ deletedCount_tDBOutput_13;
				nb_line_update_tDBOutput_13 = nb_line_update_tDBOutput_13
						+ updatedCount_tDBOutput_13;
				nb_line_inserted_tDBOutput_13 = nb_line_inserted_tDBOutput_13
						+ insertedCount_tDBOutput_13;
				nb_line_rejected_tDBOutput_13 = nb_line_rejected_tDBOutput_13
						+ rejectedCount_tDBOutput_13;

				globalMap.put("tDBOutput_13_NB_LINE", nb_line_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_13);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("faitVersementRestant"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_13", true);
				end_Hash.put("tDBOutput_13", System.currentTimeMillis());

				/**
				 * [tDBOutput_13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_13"
			globalMap.remove("tHash_Lookup_row26");

			try {

				/**
				 * [tDBInput_16 finally ] start
				 */

				currentComponent = "tDBInput_16";

				/**
				 * [tDBInput_16 finally ] stop
				 */

				/**
				 * [tMap_13 finally ] start
				 */

				currentComponent = "tMap_13";

				/**
				 * [tMap_13 finally ] stop
				 */

				/**
				 * [tDBOutput_13 finally ] start
				 */

				currentComponent = "tDBOutput_13";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
						if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_13")) != null) {
							pstmtToClose_tDBOutput_13.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_13") == null) {
						java.sql.Connection ctn_tDBOutput_13 = null;
						if ((ctn_tDBOutput_13 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_13")) != null) {
							try {
								ctn_tDBOutput_13.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_13) {
								String errorMessage_tDBOutput_13 = "failed to close the connection in tDBOutput_13 :"
										+ sqlEx_tDBOutput_13.getMessage();
								System.err.println(errorMessage_tDBOutput_13);
							}
						}
					}
				}

				/**
				 * [tDBOutput_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements
			routines.system.IPersistableComparableLookupRow<row26Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public long idpays;

		public long getIdpays() {
			return this.idpays;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public Integer id_user;

		public Integer getId_user() {
			return this.id_user;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String bloque;

		public String getBloque() {
			return this.bloque;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idclients;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row26Struct other = (row26Struct) obj;

			if (this.idclients != other.idclients)
				return false;

			return true;
		}

		public void copyDataTo(row26Struct other) {

			other.idclients = this.idclients;
			other.idpays = this.idpays;
			other.prenom = this.prenom;
			other.nom = this.nom;
			other.telephone = this.telephone;
			other.adresse = this.adresse;
			other.id_user = this.id_user;
			other.date_creation = this.date_creation;
			other.date_last_modif = this.date_last_modif;
			other.est_supprime = this.est_supprime;
			other.bloque = this.bloque;

		}

		public void copyKeysDataTo(row26Struct other) {

			other.idclients = this.idclients;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idclients = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idclients);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.idpays = dis.readLong();

				this.prenom = readString(dis, ois);

				this.nom = readString(dis, ois);

				this.telephone = readString(dis, ois);

				this.adresse = readString(dis, ois);

				this.id_user = readInteger(dis, ois);

				this.date_creation = readDate(dis, ois);

				this.date_last_modif = readDate(dis, ois);

				this.est_supprime = readInteger(dis, ois);

				this.bloque = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.idpays);

				writeString(this.prenom, dos, oos);

				writeString(this.nom, dos, oos);

				writeString(this.telephone, dos, oos);

				writeString(this.adresse, dos, oos);

				writeInteger(this.id_user, dos, oos);

				writeDate(this.date_creation, dos, oos);

				writeDate(this.date_last_modif, dos, oos);

				writeInteger(this.est_supprime, dos, oos);

				writeString(this.bloque, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idclients=" + String.valueOf(idclients));
			sb.append(",idpays=" + String.valueOf(idpays));
			sb.append(",prenom=" + prenom);
			sb.append(",nom=" + nom);
			sb.append(",telephone=" + telephone);
			sb.append(",adresse=" + adresse);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",bloque=" + bloque);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idclients, other.idclients);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int idclients;

		public int getIdclients() {
			return this.idclients;
		}

		public long idpays;

		public long getIdpays() {
			return this.idpays;
		}

		public String prenom;

		public String getPrenom() {
			return this.prenom;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public Integer id_user;

		public Integer getId_user() {
			return this.id_user;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public java.util.Date date_last_modif;

		public java.util.Date getDate_last_modif() {
			return this.date_last_modif;
		}

		public Integer est_supprime;

		public Integer getEst_supprime() {
			return this.est_supprime;
		}

		public String bloque;

		public String getBloque() {
			return this.bloque;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.idclients;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row25Struct other = (row25Struct) obj;

			if (this.idclients != other.idclients)
				return false;

			return true;
		}

		public void copyDataTo(row25Struct other) {

			other.idclients = this.idclients;
			other.idpays = this.idpays;
			other.prenom = this.prenom;
			other.nom = this.nom;
			other.telephone = this.telephone;
			other.adresse = this.adresse;
			other.id_user = this.id_user;
			other.date_creation = this.date_creation;
			other.date_last_modif = this.date_last_modif;
			other.est_supprime = this.est_supprime;
			other.bloque = this.bloque;

		}

		public void copyKeysDataTo(row25Struct other) {

			other.idclients = this.idclients;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idclients = dis.readInt();

					this.idpays = dis.readLong();

					this.prenom = readString(dis);

					this.nom = readString(dis);

					this.telephone = readString(dis);

					this.adresse = readString(dis);

					this.id_user = readInteger(dis);

					this.date_creation = readDate(dis);

					this.date_last_modif = readDate(dis);

					this.est_supprime = readInteger(dis);

					this.bloque = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idclients);

				// long

				dos.writeLong(this.idpays);

				// String

				writeString(this.prenom, dos);

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.telephone, dos);

				// String

				writeString(this.adresse, dos);

				// Integer

				writeInteger(this.id_user, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// java.util.Date

				writeDate(this.date_last_modif, dos);

				// Integer

				writeInteger(this.est_supprime, dos);

				// String

				writeString(this.bloque, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idclients=" + String.valueOf(idclients));
			sb.append(",idpays=" + String.valueOf(idpays));
			sb.append(",prenom=" + prenom);
			sb.append(",nom=" + nom);
			sb.append(",telephone=" + telephone);
			sb.append(",adresse=" + adresse);
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",date_last_modif=" + String.valueOf(date_last_modif));
			sb.append(",est_supprime=" + String.valueOf(est_supprime));
			sb.append(",bloque=" + bloque);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.idclients, other.idclients);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_17Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row25Struct row25 = new row25Struct();
				row26Struct row26 = new row26Struct();

				/**
				 * [tAdvancedHash_row26 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row26", false);
				start_Hash.put("tAdvancedHash_row26",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row26";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row26" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row26 = 0;

				// connection name:row26
				// source node:tFilterRow_9 - inputs:(row25)
				// outputs:(row26,row26) | target node:tAdvancedHash_row26 -
				// inputs:(row26) outputs:()
				// linked node: tMap_13 - inputs:(row24,row26)
				// outputs:(faitVersementRestant)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row26Struct> getLookup(matchingModeEnum_row26);

				globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);

				/**
				 * [tAdvancedHash_row26 begin ] stop
				 */

				/**
				 * [tFilterRow_9 begin ] start
				 */

				ok_Hash.put("tFilterRow_9", false);
				start_Hash.put("tFilterRow_9", System.currentTimeMillis());

				currentComponent = "tFilterRow_9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row25" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFilterRow_9 = 0;

				int nb_line_tFilterRow_9 = 0;
				int nb_line_ok_tFilterRow_9 = 0;
				int nb_line_reject_tFilterRow_9 = 0;

				class Operator_tFilterRow_9 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_9(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_9 begin ] stop
				 */

				/**
				 * [tDBInput_17 begin ] start
				 */

				ok_Hash.put("tDBInput_17", false);
				start_Hash.put("tDBInput_17", System.currentTimeMillis());

				currentComponent = "tDBInput_17";

				int tos_count_tDBInput_17 = 0;

				java.util.Calendar calendar_tDBInput_17 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_17.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_17 = calendar_tDBInput_17
						.getTime();
				int nb_line_tDBInput_17 = 0;
				java.sql.Connection conn_tDBInput_17 = null;
				String driverClass_tDBInput_17 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_17);
				String dbUser_tDBInput_17 = "root";

				final String decryptedPassword_tDBInput_17 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_17 = decryptedPassword_tDBInput_17;

				String url_tDBInput_17 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_17 = java.sql.DriverManager.getConnection(
						url_tDBInput_17, dbUser_tDBInput_17, dbPwd_tDBInput_17);

				java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17
						.createStatement();

				String dbquery_tDBInput_17 = "SELECT \n  `clients`.`idclients`, \n  `clients`.`idpays`, \n  `clients`.`prenom`, \n  `clients`.`nom`, \n  `clients`.`teleph"
						+ "one`, \n  `clients`.`adresse`, \n  `clients`.`id_user`, \n  `clients`.`date_creation`, \n  `clients`.`date_last_modif`, \n  `"
						+ "clients`.`est_supprime`, \n  `clients`.`bloque`\nFROM `clients`";

				globalMap.put("tDBInput_17_QUERY", dbquery_tDBInput_17);
				java.sql.ResultSet rs_tDBInput_17 = null;

				try {
					rs_tDBInput_17 = stmt_tDBInput_17
							.executeQuery(dbquery_tDBInput_17);
					java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17
							.getMetaData();
					int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17
							.getColumnCount();

					String tmpContent_tDBInput_17 = null;

					while (rs_tDBInput_17.next()) {
						nb_line_tDBInput_17++;

						if (colQtyInRs_tDBInput_17 < 1) {
							row25.idclients = 0;
						} else {

							if (rs_tDBInput_17.getObject(1) != null) {
								row25.idclients = rs_tDBInput_17.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 2) {
							row25.idpays = 0;
						} else {

							if (rs_tDBInput_17.getObject(2) != null) {
								row25.idpays = rs_tDBInput_17.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 3) {
							row25.prenom = null;
						} else {

							row25.prenom = routines.system.JDBCUtil.getString(
									rs_tDBInput_17, 3, false);
						}
						if (colQtyInRs_tDBInput_17 < 4) {
							row25.nom = null;
						} else {

							row25.nom = routines.system.JDBCUtil.getString(
									rs_tDBInput_17, 4, false);
						}
						if (colQtyInRs_tDBInput_17 < 5) {
							row25.telephone = null;
						} else {

							row25.telephone = routines.system.JDBCUtil
									.getString(rs_tDBInput_17, 5, false);
						}
						if (colQtyInRs_tDBInput_17 < 6) {
							row25.adresse = null;
						} else {

							row25.adresse = routines.system.JDBCUtil.getString(
									rs_tDBInput_17, 6, false);
						}
						if (colQtyInRs_tDBInput_17 < 7) {
							row25.id_user = null;
						} else {

							if (rs_tDBInput_17.getObject(7) != null) {
								row25.id_user = rs_tDBInput_17.getInt(7);
							} else {
								row25.id_user = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 8) {
							row25.date_creation = null;
						} else {

							if (rs_tDBInput_17.getString(8) != null) {
								String dateString_tDBInput_17 = rs_tDBInput_17
										.getString(8);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_17)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_17)) {
									row25.date_creation = rs_tDBInput_17
											.getTimestamp(8);
								} else {
									row25.date_creation = (java.util.Date) year0_tDBInput_17
											.clone();
								}
							} else {
								row25.date_creation = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 9) {
							row25.date_last_modif = null;
						} else {

							if (rs_tDBInput_17.getString(9) != null) {
								String dateString_tDBInput_17 = rs_tDBInput_17
										.getString(9);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_17)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_17)) {
									row25.date_last_modif = rs_tDBInput_17
											.getTimestamp(9);
								} else {
									row25.date_last_modif = (java.util.Date) year0_tDBInput_17
											.clone();
								}
							} else {
								row25.date_last_modif = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 10) {
							row25.est_supprime = null;
						} else {

							if (rs_tDBInput_17.getObject(10) != null) {
								row25.est_supprime = rs_tDBInput_17.getInt(10);
							} else {
								row25.est_supprime = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 11) {
							row25.bloque = null;
						} else {

							row25.bloque = routines.system.JDBCUtil.getString(
									rs_tDBInput_17, 11, false);
						}

						/**
						 * [tDBInput_17 begin ] stop
						 */

						/**
						 * [tDBInput_17 main ] start
						 */

						currentComponent = "tDBInput_17";

						tos_count_tDBInput_17++;

						/**
						 * [tDBInput_17 main ] stop
						 */

						/**
						 * [tDBInput_17 process_data_begin ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_9 main ] start
						 */

						currentComponent = "tFilterRow_9";

						// row25
						// row25

						if (execStat) {
							runStat.updateStatOnConnection("row25" + iterateId,
									1, 1);
						}

						row26 = null;
						row26 = null;
						Operator_tFilterRow_9 ope_tFilterRow_9 = new Operator_tFilterRow_9(
								"&&");
						ope_tFilterRow_9.matches((row25.est_supprime == null),
								"est_supprime==null failed");

						if (ope_tFilterRow_9.getMatchFlag()) {
							if (row26 == null) {
								row26 = new row26Struct();
							}
							row26.idclients = row25.idclients;
							row26.idpays = row25.idpays;
							row26.prenom = row25.prenom;
							row26.nom = row25.nom;
							row26.telephone = row25.telephone;
							row26.adresse = row25.adresse;
							row26.id_user = row25.id_user;
							row26.date_creation = row25.date_creation;
							row26.date_last_modif = row25.date_last_modif;
							row26.est_supprime = row25.est_supprime;
							row26.bloque = row25.bloque;
							if (row26 == null) {
								row26 = new row26Struct();
							}
							row26.idclients = row25.idclients;
							row26.idpays = row25.idpays;
							row26.prenom = row25.prenom;
							row26.nom = row25.nom;
							row26.telephone = row25.telephone;
							row26.adresse = row25.adresse;
							row26.id_user = row25.id_user;
							row26.date_creation = row25.date_creation;
							row26.date_last_modif = row25.date_last_modif;
							row26.est_supprime = row25.est_supprime;
							row26.bloque = row25.bloque;
							nb_line_ok_tFilterRow_9++;
						} else {
							nb_line_reject_tFilterRow_9++;
						}

						nb_line_tFilterRow_9++;

						tos_count_tFilterRow_9++;

						/**
						 * [tFilterRow_9 main ] stop
						 */

						/**
						 * [tFilterRow_9 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_9";

						/**
						 * [tFilterRow_9 process_data_begin ] stop
						 */
						// Start of branch "row26"
						if (row26 != null) {

							/**
							 * [tAdvancedHash_row26 main ] start
							 */

							currentComponent = "tAdvancedHash_row26";

							// row26
							// row26

							if (execStat) {
								runStat.updateStatOnConnection("row26"
										+ iterateId, 1, 1);
							}

							row26Struct row26_HashRow = new row26Struct();

							row26_HashRow.idclients = row26.idclients;

							row26_HashRow.idpays = row26.idpays;

							row26_HashRow.prenom = row26.prenom;

							row26_HashRow.nom = row26.nom;

							row26_HashRow.telephone = row26.telephone;

							row26_HashRow.adresse = row26.adresse;

							row26_HashRow.id_user = row26.id_user;

							row26_HashRow.date_creation = row26.date_creation;

							row26_HashRow.date_last_modif = row26.date_last_modif;

							row26_HashRow.est_supprime = row26.est_supprime;

							row26_HashRow.bloque = row26.bloque;

							tHash_Lookup_row26.put(row26_HashRow);

							tos_count_tAdvancedHash_row26++;

							/**
							 * [tAdvancedHash_row26 main ] stop
							 */

							/**
							 * [tAdvancedHash_row26 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row26";

							/**
							 * [tAdvancedHash_row26 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row26 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row26";

							/**
							 * [tAdvancedHash_row26 process_data_end ] stop
							 */

						} // End of branch "row26"

						/**
						 * [tFilterRow_9 process_data_end ] start
						 */

						currentComponent = "tFilterRow_9";

						/**
						 * [tFilterRow_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 process_data_end ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 end ] start
						 */

						currentComponent = "tDBInput_17";

					}
				} finally {
					if (rs_tDBInput_17 != null) {
						rs_tDBInput_17.close();
					}
					if (stmt_tDBInput_17 != null) {
						stmt_tDBInput_17.close();
					}
					if (conn_tDBInput_17 != null
							&& !conn_tDBInput_17.isClosed()) {

						conn_tDBInput_17.close();

					}

				}

				globalMap.put("tDBInput_17_NB_LINE", nb_line_tDBInput_17);

				ok_Hash.put("tDBInput_17", true);
				end_Hash.put("tDBInput_17", System.currentTimeMillis());

				/**
				 * [tDBInput_17 end ] stop
				 */

				/**
				 * [tFilterRow_9 end ] start
				 */

				currentComponent = "tFilterRow_9";

				globalMap.put("tFilterRow_9_NB_LINE", nb_line_tFilterRow_9);
				globalMap.put("tFilterRow_9_NB_LINE_OK",
						nb_line_ok_tFilterRow_9);
				globalMap.put("tFilterRow_9_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_9);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row25" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFilterRow_9", true);
				end_Hash.put("tFilterRow_9", System.currentTimeMillis());

				/**
				 * [tFilterRow_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row26 end ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				tHash_Lookup_row26.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row26" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row26", true);
				end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row26 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_17 finally ] start
				 */

				currentComponent = "tDBInput_17";

				/**
				 * [tDBInput_17 finally ] stop
				 */

				/**
				 * [tFilterRow_9 finally ] start
				 */

				currentComponent = "tFilterRow_9";

				/**
				 * [tFilterRow_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row26 finally ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				/**
				 * [tAdvancedHash_row26 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}

	public static class lesStocksStruct implements
			routines.system.IPersistableRow<lesStocksStruct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String DIM_DATE_STOCK_iddate;

		public String getDIM_DATE_STOCK_iddate() {
			return this.DIM_DATE_STOCK_iddate;
		}

		public int DIM_PRODUITS_idproduits;

		public int getDIM_PRODUITS_idproduits() {
			return this.DIM_PRODUITS_idproduits;
		}

		public Double quantite_cmd;

		public Double getQuantite_cmd() {
			return this.quantite_cmd;
		}

		public double quantite_livree;

		public double getQuantite_livree() {
			return this.quantite_livree;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.DIM_DATE_STOCK_iddate == null) ? 0
								: this.DIM_DATE_STOCK_iddate.hashCode());

				result = prime * result + (int) this.DIM_PRODUITS_idproduits;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lesStocksStruct other = (lesStocksStruct) obj;

			if (this.DIM_DATE_STOCK_iddate == null) {
				if (other.DIM_DATE_STOCK_iddate != null)
					return false;

			} else if (!this.DIM_DATE_STOCK_iddate
					.equals(other.DIM_DATE_STOCK_iddate))

				return false;

			if (this.DIM_PRODUITS_idproduits != other.DIM_PRODUITS_idproduits)
				return false;

			return true;
		}

		public void copyDataTo(lesStocksStruct other) {

			other.DIM_DATE_STOCK_iddate = this.DIM_DATE_STOCK_iddate;
			other.DIM_PRODUITS_idproduits = this.DIM_PRODUITS_idproduits;
			other.quantite_cmd = this.quantite_cmd;
			other.quantite_livree = this.quantite_livree;

		}

		public void copyKeysDataTo(lesStocksStruct other) {

			other.DIM_DATE_STOCK_iddate = this.DIM_DATE_STOCK_iddate;
			other.DIM_PRODUITS_idproduits = this.DIM_PRODUITS_idproduits;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.DIM_DATE_STOCK_iddate = readString(dis);

					this.DIM_PRODUITS_idproduits = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.quantite_cmd = null;
					} else {
						this.quantite_cmd = dis.readDouble();
					}

					this.quantite_livree = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DIM_DATE_STOCK_iddate, dos);

				// int

				dos.writeInt(this.DIM_PRODUITS_idproduits);

				// Double

				if (this.quantite_cmd == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite_cmd);
				}

				// double

				dos.writeDouble(this.quantite_livree);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DIM_DATE_STOCK_iddate=" + DIM_DATE_STOCK_iddate);
			sb.append(",DIM_PRODUITS_idproduits="
					+ String.valueOf(DIM_PRODUITS_idproduits));
			sb.append(",quantite_cmd=" + String.valueOf(quantite_cmd));
			sb.append(",quantite_livree=" + String.valueOf(quantite_livree));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lesStocksStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DIM_DATE_STOCK_iddate,
					other.DIM_DATE_STOCK_iddate);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.DIM_PRODUITS_idproduits,
					other.DIM_PRODUITS_idproduits);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_PROJET_DW_MONPROJET_DW = new byte[0];
		static byte[] commonByteArray_PROJET_DW_MONPROJET_DW = new byte[0];

		public int idproduits;

		public int getIdproduits() {
			return this.idproduits;
		}

		public String dates;

		public String getDates() {
			return this.dates;
		}

		public Double quantite_cmd;

		public Double getQuantite_cmd() {
			return this.quantite_cmd;
		}

		public Double quantite_livree;

		public Double getQuantite_livree() {
			return this.quantite_livree;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_DW_MONPROJET_DW.length) {
					if (length < 1024
							&& commonByteArray_PROJET_DW_MONPROJET_DW.length == 0) {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[1024];
					} else {
						commonByteArray_PROJET_DW_MONPROJET_DW = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_DW_MONPROJET_DW, 0, length);
				strReturn = new String(commonByteArray_PROJET_DW_MONPROJET_DW,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_DW_MONPROJET_DW) {

				try {

					int length = 0;

					this.idproduits = dis.readInt();

					this.dates = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantite_cmd = null;
					} else {
						this.quantite_cmd = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.quantite_livree = null;
					} else {
						this.quantite_livree = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.idproduits);

				// String

				writeString(this.dates, dos);

				// Double

				if (this.quantite_cmd == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite_cmd);
				}

				// Double

				if (this.quantite_livree == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantite_livree);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("idproduits=" + String.valueOf(idproduits));
			sb.append(",dates=" + dates);
			sb.append(",quantite_cmd=" + String.valueOf(quantite_cmd));
			sb.append(",quantite_livree=" + String.valueOf(quantite_livree));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_18Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row27Struct row27 = new row27Struct();
				lesStocksStruct lesStocks = new lesStocksStruct();

				/**
				 * [tDBOutput_14 begin ] start
				 */

				ok_Hash.put("tDBOutput_14", false);
				start_Hash.put("tDBOutput_14", System.currentTimeMillis());

				currentComponent = "tDBOutput_14";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("lesStocks" + iterateId,
								0, 0);

					}
				}

				int tos_count_tDBOutput_14 = 0;

				int nb_line_tDBOutput_14 = 0;
				int nb_line_update_tDBOutput_14 = 0;
				int nb_line_inserted_tDBOutput_14 = 0;
				int nb_line_deleted_tDBOutput_14 = 0;
				int nb_line_rejected_tDBOutput_14 = 0;

				int deletedCount_tDBOutput_14 = 0;
				int updatedCount_tDBOutput_14 = 0;
				int insertedCount_tDBOutput_14 = 0;
				int rejectedCount_tDBOutput_14 = 0;
				String dbschema_tDBOutput_14 = null;
				String tableName_tDBOutput_14 = null;
				boolean whetherReject_tDBOutput_14 = false;

				java.util.Calendar calendar_tDBOutput_14 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_14 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_14 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_14 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_14;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_14 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				int insertKeyCount_tDBOutput_14 = 2;
				if (insertKeyCount_tDBOutput_14 < 1) {
					throw new RuntimeException(
							"For insert if not exist, Schema must have a key");
				}

				java.sql.Connection conn_tDBOutput_14 = null;
				String dbUser_tDBOutput_14 = null;
				dbschema_tDBOutput_14 = "dbo";
				String driverClass_tDBOutput_14 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_14);
				String port_tDBOutput_14 = "1433";
				String dbname_tDBOutput_14 = "PROJET_DW";
				String url_tDBOutput_14 = "jdbc:jtds:sqlserver://" + "MOHAMED";
				if (!"".equals(port_tDBOutput_14)) {
					url_tDBOutput_14 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_14)) {
					url_tDBOutput_14 += "//" + "PROJET_DW";

				}
				url_tDBOutput_14 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_14 = "sa";

				final String decryptedPassword_tDBOutput_14 = routines.system.PasswordEncryptUtil
						.decryptPassword("2cee9ec3fa9ecc5a9cf12d1a20758377f4f7aba1746784ea");

				String dbPwd_tDBOutput_14 = decryptedPassword_tDBOutput_14;
				conn_tDBOutput_14 = java.sql.DriverManager.getConnection(
						url_tDBOutput_14, dbUser_tDBOutput_14,
						dbPwd_tDBOutput_14);

				resourceMap.put("conn_tDBOutput_14", conn_tDBOutput_14);

				conn_tDBOutput_14.setAutoCommit(false);
				int commitEvery_tDBOutput_14 = 10000;
				int commitCounter_tDBOutput_14 = 0;

				if (dbschema_tDBOutput_14 == null
						|| dbschema_tDBOutput_14.trim().length() == 0) {
					tableName_tDBOutput_14 = "FAIT_STOCK";
				} else {
					tableName_tDBOutput_14 = dbschema_tDBOutput_14 + "].["
							+ "FAIT_STOCK";
				}
				int count_tDBOutput_14 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_14 = conn_tDBOutput_14
						.prepareStatement("SELECT COUNT(1) FROM ["
								+ tableName_tDBOutput_14
								+ "] WHERE [DIM_DATE_STOCK_iddate] = ? AND [DIM_PRODUITS_idproduits] = ?");
				resourceMap.put("pstmt_tDBOutput_14", pstmt_tDBOutput_14);
				String insert_tDBOutput_14 = "INSERT INTO ["
						+ tableName_tDBOutput_14
						+ "] ([DIM_DATE_STOCK_iddate],[DIM_PRODUITS_idproduits],[quantite_cmd],[quantite_livree]) VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_14 = conn_tDBOutput_14
						.prepareStatement(insert_tDBOutput_14);
				resourceMap.put("pstmtInsert_tDBOutput_14",
						pstmtInsert_tDBOutput_14);

				/**
				 * [tDBOutput_14 begin ] stop
				 */

				/**
				 * [tMap_14 begin ] start
				 */

				ok_Hash.put("tMap_14", false);
				start_Hash.put("tMap_14", System.currentTimeMillis());

				currentComponent = "tMap_14";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row27" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_14 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_14__Struct {
				}
				Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				lesStocksStruct lesStocks_tmp = new lesStocksStruct();
				// ###############################

				/**
				 * [tMap_14 begin ] stop
				 */

				/**
				 * [tDBInput_18 begin ] start
				 */

				ok_Hash.put("tDBInput_18", false);
				start_Hash.put("tDBInput_18", System.currentTimeMillis());

				currentComponent = "tDBInput_18";

				int tos_count_tDBInput_18 = 0;

				java.util.Calendar calendar_tDBInput_18 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_18.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_18 = calendar_tDBInput_18
						.getTime();
				int nb_line_tDBInput_18 = 0;
				java.sql.Connection conn_tDBInput_18 = null;
				String driverClass_tDBInput_18 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_18);
				String dbUser_tDBInput_18 = "root";

				final String decryptedPassword_tDBInput_18 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_18 = decryptedPassword_tDBInput_18;

				String url_tDBInput_18 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "tp_its4" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_18 = java.sql.DriverManager.getConnection(
						url_tDBInput_18, dbUser_tDBInput_18, dbPwd_tDBInput_18);

				java.sql.Statement stmt_tDBInput_18 = conn_tDBInput_18
						.createStatement();

				String dbquery_tDBInput_18 = "select commande.idproduits,DATE_FORMAT(STR_TO_DATE(REPLACE(commande.date_cmd,'-','/'), '%d/%m/%Y' ), '%d/%m/%Y')as date"
						+ "s,sum(commande.quantite) as quantite_cmd,ifnull(qt_livree.quantite_livree,0) as quantite_livree\nfrom commande left join"
						+ " qt_livree\non DATE_FORMAT(STR_TO_DATE(REPLACE(commande.date_cmd,'-','/'), '%d/%m/%Y' ), '%d/%m/%Y')=qt_livree.dates and"
						+ " commande.idproduits=qt_livree.idproduits\ngroup by idproduits,dates\nUNION\nselect qt_livree.idproduits,qt_livree.dates"
						+ ",ifnull(sum(commande.quantite),0) as quantite_cmd,qt_livree.quantite_livree\nfrom qt_livree left join commande\non DATE_"
						+ "FORMAT(STR_TO_DATE(REPLACE(commande.date_cmd,'-','/'), '%d/%m/%Y' ), '%d/%m/%Y')=qt_livree.dates and commande.idproduits"
						+ "=qt_livree.idproduits\ngroup by idproduits,dates";

				globalMap.put("tDBInput_18_QUERY", dbquery_tDBInput_18);
				java.sql.ResultSet rs_tDBInput_18 = null;

				try {
					rs_tDBInput_18 = stmt_tDBInput_18
							.executeQuery(dbquery_tDBInput_18);
					java.sql.ResultSetMetaData rsmd_tDBInput_18 = rs_tDBInput_18
							.getMetaData();
					int colQtyInRs_tDBInput_18 = rsmd_tDBInput_18
							.getColumnCount();

					String tmpContent_tDBInput_18 = null;

					while (rs_tDBInput_18.next()) {
						nb_line_tDBInput_18++;

						if (colQtyInRs_tDBInput_18 < 1) {
							row27.idproduits = 0;
						} else {

							if (rs_tDBInput_18.getObject(1) != null) {
								row27.idproduits = rs_tDBInput_18.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_18 < 2) {
							row27.dates = null;
						} else {

							row27.dates = routines.system.JDBCUtil.getString(
									rs_tDBInput_18, 2, false);
						}
						if (colQtyInRs_tDBInput_18 < 3) {
							row27.quantite_cmd = null;
						} else {

							if (rs_tDBInput_18.getObject(3) != null) {
								row27.quantite_cmd = rs_tDBInput_18
										.getDouble(3);
							} else {
								row27.quantite_cmd = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 4) {
							row27.quantite_livree = null;
						} else {

							if (rs_tDBInput_18.getObject(4) != null) {
								row27.quantite_livree = rs_tDBInput_18
										.getDouble(4);
							} else {
								row27.quantite_livree = null;
							}
						}

						/**
						 * [tDBInput_18 begin ] stop
						 */

						/**
						 * [tDBInput_18 main ] start
						 */

						currentComponent = "tDBInput_18";

						tos_count_tDBInput_18++;

						/**
						 * [tDBInput_18 main ] stop
						 */

						/**
						 * [tDBInput_18 process_data_begin ] start
						 */

						currentComponent = "tDBInput_18";

						/**
						 * [tDBInput_18 process_data_begin ] stop
						 */

						/**
						 * [tMap_14 main ] start
						 */

						currentComponent = "tMap_14";

						// row27
						// row27

						if (execStat) {
							runStat.updateStatOnConnection("row27" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_14 = false;
						boolean mainRowRejected_tMap_14 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
							// ###############################
							// # Output tables

							lesStocks = null;

							// # Output table : 'lesStocks'
							lesStocks_tmp.DIM_DATE_STOCK_iddate = row27.dates;
							lesStocks_tmp.DIM_PRODUITS_idproduits = row27.idproduits;
							lesStocks_tmp.quantite_cmd = row27.quantite_cmd;
							lesStocks_tmp.quantite_livree = row27.quantite_livree;
							lesStocks = lesStocks_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_14 = false;

						tos_count_tMap_14++;

						/**
						 * [tMap_14 main ] stop
						 */

						/**
						 * [tMap_14 process_data_begin ] start
						 */

						currentComponent = "tMap_14";

						/**
						 * [tMap_14 process_data_begin ] stop
						 */
						// Start of branch "lesStocks"
						if (lesStocks != null) {

							/**
							 * [tDBOutput_14 main ] start
							 */

							currentComponent = "tDBOutput_14";

							// lesStocks
							// lesStocks

							if (execStat) {
								runStat.updateStatOnConnection("lesStocks"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_14 = false;

							if (lesStocks.DIM_DATE_STOCK_iddate == null) {
								pstmt_tDBOutput_14.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_14.setString(1,
										lesStocks.DIM_DATE_STOCK_iddate);
							}

							pstmt_tDBOutput_14.setInt(2,
									lesStocks.DIM_PRODUITS_idproduits);

							java.sql.ResultSet rs_tDBOutput_14 = pstmt_tDBOutput_14
									.executeQuery();
							int checkCount_tDBOutput_14 = -1;
							while (rs_tDBOutput_14.next()) {
								checkCount_tDBOutput_14 = rs_tDBOutput_14
										.getInt(1);
							}

							if (checkCount_tDBOutput_14 < 1) {
								if (lesStocks.DIM_DATE_STOCK_iddate == null) {
									pstmtInsert_tDBOutput_14.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_14.setString(1,
											lesStocks.DIM_DATE_STOCK_iddate);
								}

								pstmtInsert_tDBOutput_14.setInt(2,
										lesStocks.DIM_PRODUITS_idproduits);

								if (lesStocks.quantite_cmd == null) {
									pstmtInsert_tDBOutput_14.setNull(3,
											java.sql.Types.DOUBLE);
								} else {
									pstmtInsert_tDBOutput_14.setDouble(3,
											lesStocks.quantite_cmd);
								}

								pstmtInsert_tDBOutput_14.setDouble(4,
										lesStocks.quantite_livree);

								try {
									insertedCount_tDBOutput_14 = insertedCount_tDBOutput_14
											+ pstmtInsert_tDBOutput_14
													.executeUpdate();
									nb_line_tDBOutput_14++;
								} catch (java.lang.Exception e) {
									whetherReject_tDBOutput_14 = true;
									nb_line_tDBOutput_14++;

									System.err.print(e.getMessage());
								}
							}
							// ////////batch execute by batch size///////
							class LimitBytesHelper_tDBOutput_14 {
								public int limitBytePart1(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_14)
										throws Exception {
									try {

										for (int countEach_tDBOutput_14 : pstmt_tDBOutput_14
												.executeBatch()) {
											if (countEach_tDBOutput_14 == -2
													|| countEach_tDBOutput_14 == -3) {
												break;
											}
											counter += countEach_tDBOutput_14;
										}

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tDBOutput_14 = 0;
										for (int countEach_tDBOutput_14 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_14 < 0 ? 0
													: countEach_tDBOutput_14);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}

								public int limitBytePart2(
										int counter,
										java.sql.PreparedStatement pstmt_tDBOutput_14)
										throws Exception {
									try {

										for (int countEach_tDBOutput_14 : pstmt_tDBOutput_14
												.executeBatch()) {
											if (countEach_tDBOutput_14 == -2
													|| countEach_tDBOutput_14 == -3) {
												break;
											}
											counter += countEach_tDBOutput_14;
										}

									} catch (java.sql.BatchUpdateException e) {

										for (int countEach_tDBOutput_14 : e
												.getUpdateCounts()) {
											counter += (countEach_tDBOutput_14 < 0 ? 0
													: countEach_tDBOutput_14);
										}

										System.err.println(e.getMessage());

									}
									return counter;
								}
							}

							// //////////commit every////////////

							commitCounter_tDBOutput_14++;
							if (commitEvery_tDBOutput_14 <= commitCounter_tDBOutput_14) {

								conn_tDBOutput_14.commit();

								commitCounter_tDBOutput_14 = 0;
							}

							tos_count_tDBOutput_14++;

							/**
							 * [tDBOutput_14 main ] stop
							 */

							/**
							 * [tDBOutput_14 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_14";

							/**
							 * [tDBOutput_14 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_14 process_data_end ] start
							 */

							currentComponent = "tDBOutput_14";

							/**
							 * [tDBOutput_14 process_data_end ] stop
							 */

						} // End of branch "lesStocks"

						/**
						 * [tMap_14 process_data_end ] start
						 */

						currentComponent = "tMap_14";

						/**
						 * [tMap_14 process_data_end ] stop
						 */

						/**
						 * [tDBInput_18 process_data_end ] start
						 */

						currentComponent = "tDBInput_18";

						/**
						 * [tDBInput_18 process_data_end ] stop
						 */

						/**
						 * [tDBInput_18 end ] start
						 */

						currentComponent = "tDBInput_18";

					}
				} finally {
					if (rs_tDBInput_18 != null) {
						rs_tDBInput_18.close();
					}
					if (stmt_tDBInput_18 != null) {
						stmt_tDBInput_18.close();
					}
					if (conn_tDBInput_18 != null
							&& !conn_tDBInput_18.isClosed()) {

						conn_tDBInput_18.close();

					}

				}

				globalMap.put("tDBInput_18_NB_LINE", nb_line_tDBInput_18);

				ok_Hash.put("tDBInput_18", true);
				end_Hash.put("tDBInput_18", System.currentTimeMillis());

				/**
				 * [tDBInput_18 end ] stop
				 */

				/**
				 * [tMap_14 end ] start
				 */

				currentComponent = "tMap_14";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row27" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_14", true);
				end_Hash.put("tMap_14", System.currentTimeMillis());

				/**
				 * [tMap_14 end ] stop
				 */

				/**
				 * [tDBOutput_14 end ] start
				 */

				currentComponent = "tDBOutput_14";

				if (pstmtInsert_tDBOutput_14 != null) {
					pstmtInsert_tDBOutput_14.close();
					resourceMap.remove("pstmtInsert_tDBOutput_14");
				}
				if (pstmt_tDBOutput_14 != null) {
					pstmt_tDBOutput_14.close();
					resourceMap.remove("pstmt_tDBOutput_14");
				}
				resourceMap.put("statementClosed_tDBOutput_14", true);
				conn_tDBOutput_14.commit();

				conn_tDBOutput_14.close();
				resourceMap.put("finish_tDBOutput_14", true);

				nb_line_deleted_tDBOutput_14 = nb_line_deleted_tDBOutput_14
						+ deletedCount_tDBOutput_14;
				nb_line_update_tDBOutput_14 = nb_line_update_tDBOutput_14
						+ updatedCount_tDBOutput_14;
				nb_line_inserted_tDBOutput_14 = nb_line_inserted_tDBOutput_14
						+ insertedCount_tDBOutput_14;
				nb_line_rejected_tDBOutput_14 = nb_line_rejected_tDBOutput_14
						+ rejectedCount_tDBOutput_14;

				globalMap.put("tDBOutput_14_NB_LINE", nb_line_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_14);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("lesStocks" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tDBOutput_14", true);
				end_Hash.put("tDBOutput_14", System.currentTimeMillis());

				/**
				 * [tDBOutput_14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_18 finally ] start
				 */

				currentComponent = "tDBInput_18";

				/**
				 * [tDBInput_18 finally ] stop
				 */

				/**
				 * [tMap_14 finally ] start
				 */

				currentComponent = "tMap_14";

				/**
				 * [tMap_14 finally ] stop
				 */

				/**
				 * [tDBOutput_14 finally ] start
				 */

				currentComponent = "tDBOutput_14";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_14") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_14 = null;
						if ((pstmtToClose_tDBOutput_14 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_14")) != null) {
							pstmtToClose_tDBOutput_14.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_14") == null) {
						java.sql.Connection ctn_tDBOutput_14 = null;
						if ((ctn_tDBOutput_14 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_14")) != null) {
							try {
								ctn_tDBOutput_14.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_14) {
								String errorMessage_tDBOutput_14 = "failed to close the connection in tDBOutput_14 :"
										+ sqlEx_tDBOutput_14.getMessage();
								System.err.println(errorMessage_tDBOutput_14);
							}
						}
					}
				}

				/**
				 * [tDBOutput_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_18_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MONPROJET_DW MONPROJET_DWClass = new MONPROJET_DW();

		int exitCode = MONPROJET_DWClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = MONPROJET_DW.class.getClassLoader()
					.getResourceAsStream(
							"projet_dw/monprojet_dw_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = MONPROJET_DW.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_2) {
			globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

			e_tDBInput_2.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_3) {
			globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

			e_tDBInput_3.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_4) {
			globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

			e_tDBInput_4.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_5) {
			globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

			e_tDBInput_5.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_6) {
			globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);

			e_tDBInput_6.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_7) {
			globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);

			e_tDBInput_7.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_8) {
			globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);

			e_tDBInput_8.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_9Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_9) {
			globalMap.put("tDBInput_9_SUBPROCESS_STATE", -1);

			e_tDBInput_9.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_11Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_11) {
			globalMap.put("tDBInput_11_SUBPROCESS_STATE", -1);

			e_tDBInput_11.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_12Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_12) {
			globalMap.put("tDBInput_12_SUBPROCESS_STATE", -1);

			e_tDBInput_12.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_15Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_15) {
			globalMap.put("tDBInput_15_SUBPROCESS_STATE", -1);

			e_tDBInput_15.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_16Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_16) {
			globalMap.put("tDBInput_16_SUBPROCESS_STATE", -1);

			e_tDBInput_16.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_18Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_18) {
			globalMap.put("tDBInput_18_SUBPROCESS_STATE", -1);

			e_tDBInput_18.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : MONPROJET_DW");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 809372 characters generated by Talend Open Studio for Data Integration on the
 * 3 mars 2019 13:45:26 GMT
 ************************************************************************************************/
